
utralsonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d44  08008d44  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d4c  08008d4c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d4c  08008d4c  00018d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  20000094  08008de8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  08008de8  000209e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a52  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003322  00000000  00000000  00037b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f8  00000000  00000000  0003ae38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  0003c030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024136  00000000  00000000  0003d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f07e  00000000  00000000  000611f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce5f1  00000000  00000000  00070274  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e865  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f08  00000000  00000000  0013e8e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008cd4 	.word	0x08008cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	08008cd4 	.word	0x08008cd4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f007 fa82 	bl	8007aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	2000002c 	.word	0x2000002c
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200000c4 	.word	0x200000c4

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000c4 	.word	0x200000c4

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
 80008d6:	e16b      	b.n	8000bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f040 815a 	bne.w	8000baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d00b      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d007      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090a:	2b11      	cmp	r3, #17
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b12      	cmp	r3, #18
 8000914:	d130      	bne.n	8000978 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800094c:	2201      	movs	r2, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	f003 0201 	and.w	r2, r3, #1
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0xfc>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b12      	cmp	r3, #18
 80009b6:	d123      	bne.n	8000a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	08da      	lsrs	r2, r3, #3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3208      	adds	r2, #8
 80009fa:	69b9      	ldr	r1, [r7, #24]
 80009fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0203 	and.w	r2, r3, #3
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80b4 	beq.w	8000baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a5e      	ldr	r2, [pc, #376]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d02b      	beq.n	8000ae2 <HAL_GPIO_Init+0x226>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x314>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d025      	beq.n	8000ade <HAL_GPIO_Init+0x222>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x318>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d01f      	beq.n	8000ada <HAL_GPIO_Init+0x21e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_GPIO_Init+0x31c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d019      	beq.n	8000ad6 <HAL_GPIO_Init+0x21a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x320>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x216>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x324>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x212>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_GPIO_Init+0x328>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x20e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_GPIO_Init+0x32c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x20a>
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	e00e      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	e00c      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000aca:	2306      	movs	r3, #6
 8000acc:	e00a      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000af4:	4934      	ldr	r1, [pc, #208]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	f67f ae90 	bls.w	80008d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3724      	adds	r7, #36	; 0x24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40021c00 	.word	0x40021c00
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e001      	b.n	8000c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c30:	787b      	ldrb	r3, [r7, #1]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c3c:	e003      	b.n	8000c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	041a      	lsls	r2, r3, #16
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	619a      	str	r2, [r3, #24]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b083      	sub	sp, #12
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	401a      	ands	r2, r3
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d104      	bne.n	8000c76 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	041a      	lsls	r2, r3, #16
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000c74:	e002      	b.n	8000c7c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c8a:	b08f      	sub	sp, #60	; 0x3c
 8000c8c:	af0a      	add	r7, sp, #40	; 0x28
 8000c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e054      	b.n	8000d44 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d106      	bne.n	8000cba <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f007 f8f1 	bl	8007e9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d102      	bne.n	8000cd4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fd8d 	bl	80047f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	687e      	ldr	r6, [r7, #4]
 8000ce6:	466d      	mov	r5, sp
 8000ce8:	f106 0410 	add.w	r4, r6, #16
 8000cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cfc:	1d33      	adds	r3, r6, #4
 8000cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d00:	6838      	ldr	r0, [r7, #0]
 8000d02:	f003 fd07 	bl	8004714 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f003 fd84 	bl	800481a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	687e      	ldr	r6, [r7, #4]
 8000d1a:	466d      	mov	r5, sp
 8000d1c:	f106 0410 	add.w	r4, r6, #16
 8000d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d30:	1d33      	adds	r3, r6, #4
 8000d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d34:	6838      	ldr	r0, [r7, #0]
 8000d36:	f003 fe97 	bl	8004a68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d4c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4608      	mov	r0, r1
 8000d56:	4611      	mov	r1, r2
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	70fb      	strb	r3, [r7, #3]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	70bb      	strb	r3, [r7, #2]
 8000d62:	4613      	mov	r3, r2
 8000d64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d101      	bne.n	8000d74 <HAL_HCD_HC_Init+0x28>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e07f      	b.n	8000e74 <HAL_HCD_HC_Init+0x128>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d7c:	78fa      	ldrb	r2, [r7, #3]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	333d      	adds	r3, #61	; 0x3d
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3338      	adds	r3, #56	; 0x38
 8000da0:	787a      	ldrb	r2, [r7, #1]
 8000da2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000da4:	78fa      	ldrb	r2, [r7, #3]
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	3340      	adds	r3, #64	; 0x40
 8000db4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000db6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3339      	adds	r3, #57	; 0x39
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	333f      	adds	r3, #63	; 0x3f
 8000ddc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000de0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000de2:	78fa      	ldrb	r2, [r7, #3]
 8000de4:	78bb      	ldrb	r3, [r7, #2]
 8000de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dea:	b2d8      	uxtb	r0, r3
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	333a      	adds	r3, #58	; 0x3a
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000dfe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da0a      	bge.n	8000e1c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000e06:	78fa      	ldrb	r2, [r7, #3]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	440b      	add	r3, r1
 8000e14:	333b      	adds	r3, #59	; 0x3b
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e009      	b.n	8000e30 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	333b      	adds	r3, #59	; 0x3b
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	440b      	add	r3, r1
 8000e3e:	333c      	adds	r3, #60	; 0x3c
 8000e40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e44:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	787c      	ldrb	r4, [r7, #1]
 8000e4c:	78ba      	ldrb	r2, [r7, #2]
 8000e4e:	78f9      	ldrb	r1, [r7, #3]
 8000e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	4623      	mov	r3, r4
 8000e62:	f003 ff83 	bl	8004d6c <USB_HC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd90      	pop	{r4, r7, pc}

08000e7c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <HAL_HCD_HC_Halt+0x1e>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e00f      	b.n	8000eba <HAL_HCD_HC_Halt+0x3e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	78fa      	ldrb	r2, [r7, #3]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 f9bd 	bl	800522a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	4608      	mov	r0, r1
 8000ece:	4611      	mov	r1, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	70fb      	strb	r3, [r7, #3]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	70bb      	strb	r3, [r7, #2]
 8000eda:	4613      	mov	r3, r2
 8000edc:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000ede:	78fa      	ldrb	r2, [r7, #3]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	333b      	adds	r3, #59	; 0x3b
 8000eee:	78ba      	ldrb	r2, [r7, #2]
 8000ef0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000ef2:	78fa      	ldrb	r2, [r7, #3]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	333f      	adds	r3, #63	; 0x3f
 8000f02:	787a      	ldrb	r2, [r7, #1]
 8000f04:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000f06:	7c3b      	ldrb	r3, [r7, #16]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10a      	bne.n	8000f22 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000f0c:	78fa      	ldrb	r2, [r7, #3]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	3342      	adds	r3, #66	; 0x42
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e009      	b.n	8000f36 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	3342      	adds	r3, #66	; 0x42
 8000f32:	2202      	movs	r2, #2
 8000f34:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000f36:	787b      	ldrb	r3, [r7, #1]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	f200 80d6 	bhi.w	80010ea <HAL_HCD_HC_SubmitRequest+0x226>
 8000f3e:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f44:	08000f55 	.word	0x08000f55
 8000f48:	080010d5 	.word	0x080010d5
 8000f4c:	08000fc1 	.word	0x08000fc1
 8000f50:	0800104b 	.word	0x0800104b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000f54:	7c3b      	ldrb	r3, [r7, #16]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	f040 80c9 	bne.w	80010ee <HAL_HCD_HC_SubmitRequest+0x22a>
 8000f5c:	78bb      	ldrb	r3, [r7, #2]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 80c5 	bne.w	80010ee <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000f64:	8b3b      	ldrh	r3, [r7, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d109      	bne.n	8000f7e <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	440b      	add	r3, r1
 8000f78:	3351      	adds	r3, #81	; 0x51
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4413      	add	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	440b      	add	r3, r1
 8000f8c:	3351      	adds	r3, #81	; 0x51
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10a      	bne.n	8000faa <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f94:	78fa      	ldrb	r2, [r7, #3]
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3342      	adds	r3, #66	; 0x42
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000fa8:	e0a1      	b.n	80010ee <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3342      	adds	r3, #66	; 0x42
 8000fba:	2202      	movs	r2, #2
 8000fbc:	701a      	strb	r2, [r3, #0]
      break;
 8000fbe:	e096      	b.n	80010ee <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000fc0:	78bb      	ldrb	r3, [r7, #2]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d120      	bne.n	8001008 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fc6:	78fa      	ldrb	r2, [r7, #3]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3351      	adds	r3, #81	; 0x51
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10a      	bne.n	8000ff2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3342      	adds	r3, #66	; 0x42
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000ff0:	e07e      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	440b      	add	r3, r1
 8001000:	3342      	adds	r3, #66	; 0x42
 8001002:	2202      	movs	r2, #2
 8001004:	701a      	strb	r2, [r3, #0]
      break;
 8001006:	e073      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001008:	78fa      	ldrb	r2, [r7, #3]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	3350      	adds	r3, #80	; 0x50
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10a      	bne.n	8001034 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800101e:	78fa      	ldrb	r2, [r7, #3]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	440b      	add	r3, r1
 800102c:	3342      	adds	r3, #66	; 0x42
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
      break;
 8001032:	e05d      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001034:	78fa      	ldrb	r2, [r7, #3]
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	440b      	add	r3, r1
 8001042:	3342      	adds	r3, #66	; 0x42
 8001044:	2202      	movs	r2, #2
 8001046:	701a      	strb	r2, [r3, #0]
      break;
 8001048:	e052      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800104a:	78bb      	ldrb	r3, [r7, #2]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d120      	bne.n	8001092 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001050:	78fa      	ldrb	r2, [r7, #3]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3351      	adds	r3, #81	; 0x51
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	3342      	adds	r3, #66	; 0x42
 8001076:	2200      	movs	r2, #0
 8001078:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800107a:	e039      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	440b      	add	r3, r1
 800108a:	3342      	adds	r3, #66	; 0x42
 800108c:	2202      	movs	r2, #2
 800108e:	701a      	strb	r2, [r3, #0]
      break;
 8001090:	e02e      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001092:	78fa      	ldrb	r2, [r7, #3]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	3350      	adds	r3, #80	; 0x50
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10a      	bne.n	80010be <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80010a8:	78fa      	ldrb	r2, [r7, #3]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	440b      	add	r3, r1
 80010b6:	3342      	adds	r3, #66	; 0x42
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
      break;
 80010bc:	e018      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	440b      	add	r3, r1
 80010cc:	3342      	adds	r3, #66	; 0x42
 80010ce:	2202      	movs	r2, #2
 80010d0:	701a      	strb	r2, [r3, #0]
      break;
 80010d2:	e00d      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80010d4:	78fa      	ldrb	r2, [r7, #3]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	3342      	adds	r3, #66	; 0x42
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
      break;
 80010e8:	e002      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80010ea:	bf00      	nop
 80010ec:	e000      	b.n	80010f0 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 80010ee:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3344      	adds	r3, #68	; 0x44
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	8b39      	ldrh	r1, [r7, #24]
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4403      	add	r3, r0
 8001114:	3348      	adds	r3, #72	; 0x48
 8001116:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001118:	78fa      	ldrb	r2, [r7, #3]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	335c      	adds	r3, #92	; 0x5c
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800112c:	78fa      	ldrb	r2, [r7, #3]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	334c      	adds	r3, #76	; 0x4c
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001140:	78fa      	ldrb	r2, [r7, #3]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	3339      	adds	r3, #57	; 0x39
 8001150:	78fa      	ldrb	r2, [r7, #3]
 8001152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001154:	78fa      	ldrb	r2, [r7, #3]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	335d      	adds	r3, #93	; 0x5d
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	78fa      	ldrb	r2, [r7, #3]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	3338      	adds	r3, #56	; 0x38
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	18d1      	adds	r1, r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461a      	mov	r2, r3
 8001184:	f003 fefc 	bl	8004f80 <USB_HC_StartXfer>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop

08001194 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fc19 	bl	80049e2 <USB_GetMode>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	f040 80f1 	bne.w	800139a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fbfd 	bl	80049bc <USB_ReadInterrupts>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80e7 	beq.w	8001398 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fbf4 	bl	80049bc <USB_ReadInterrupts>
 80011d4:	4603      	mov	r3, r0
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80011de:	d104      	bne.n	80011ea <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80011e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fbe4 	bl	80049bc <USB_ReadInterrupts>
 80011f4:	4603      	mov	r3, r0
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80011fe:	d104      	bne.n	800120a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001208:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fbd4 	bl	80049bc <USB_ReadInterrupts>
 8001214:	4603      	mov	r3, r0
 8001216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800121a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800121e:	d104      	bne.n	800122a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001228:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f003 fbc4 	bl	80049bc <USB_ReadInterrupts>
 8001234:	4603      	mov	r3, r0
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b02      	cmp	r3, #2
 800123c:	d103      	bne.n	8001246 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2202      	movs	r2, #2
 8001244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fbb6 	bl	80049bc <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800125a:	d117      	bne.n	800128c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800126a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800126e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f006 fe91 	bl	8007f98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2101      	movs	r1, #1
 800127c:	4618      	mov	r0, r3
 800127e:	f003 fcaf 	bl	8004be0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800128a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f003 fb93 	bl	80049bc <USB_ReadInterrupts>
 8001296:	4603      	mov	r3, r0
 8001298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d102      	bne.n	80012a8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f001 f8c8 	bl	8002438 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fb85 	bl	80049bc <USB_ReadInterrupts>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d106      	bne.n	80012ca <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f006 fe4f 	bl	8007f60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2208      	movs	r2, #8
 80012c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fb74 	bl	80049bc <USB_ReadInterrupts>
 80012d4:	4603      	mov	r3, r0
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012de:	d138      	bne.n	8001352 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 ff8f 	bl	8005208 <USB_HC_ReadInterrupt>
 80012ea:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e025      	b.n	800133e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d018      	beq.n	8001338 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	015a      	lsls	r2, r3, #5
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800131c:	d106      	bne.n	800132c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f8cf 	bl	80014c8 <HCD_HC_IN_IRQHandler>
 800132a:	e005      	b.n	8001338 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fc5f 	bl	8001bf6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3d4      	bcc.n	80012f2 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001350:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fb30 	bl	80049bc <USB_ReadInterrupts>
 800135c:	4603      	mov	r3, r0
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b10      	cmp	r3, #16
 8001364:	d101      	bne.n	800136a <HAL_HCD_IRQHandler+0x1d6>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_HCD_IRQHandler+0x1d8>
 800136a:	2300      	movs	r3, #0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d014      	beq.n	800139a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699a      	ldr	r2, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0210 	bic.w	r2, r2, #16
 800137e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 ffad 	bl	80022e0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0210 	orr.w	r2, r2, #16
 8001394:	619a      	str	r2, [r3, #24]
 8001396:	e000      	b.n	800139a <HAL_HCD_IRQHandler+0x206>
      return;
 8001398:	bf00      	nop
    }
  }
}
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_HCD_Start+0x16>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e013      	b.n	80013de <HAL_HCD_Start+0x3e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 fa07 	bl	80047d6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2101      	movs	r1, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 fc6a 	bl	8004ca8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_HCD_Stop+0x16>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e00d      	b.n	8001418 <HAL_HCD_Stop+0x32>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f004 f849 	bl	80054a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fc11 	bl	8004c54 <USB_ResetPort>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001448:	78fa      	ldrb	r2, [r7, #3]
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	335c      	adds	r3, #92	; 0x5c
 8001458:	781b      	ldrb	r3, [r3, #0]
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001472:	78fa      	ldrb	r2, [r7, #3]
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	334c      	adds	r3, #76	; 0x4c
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fc53 	bl	8004d48 <USB_GetCurrentFrame>
 80014a2:	4603      	mov	r3, r0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 fc2e 	bl	8004d1a <USB_GetHostSpeed>
 80014be:	4603      	mov	r3, r0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	015a      	lsls	r2, r3, #5
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d119      	bne.n	800152c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	015a      	lsls	r2, r3, #5
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4413      	add	r3, r2
 8001500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001504:	461a      	mov	r2, r3
 8001506:	2304      	movs	r3, #4
 8001508:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4413      	add	r3, r2
 8001512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	0151      	lsls	r1, r2, #5
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	440a      	add	r2, r1
 8001520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	60d3      	str	r3, [r2, #12]
 800152a:	e095      	b.n	8001658 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4413      	add	r3, r2
 8001534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	2b20      	cmp	r3, #32
 8001540:	d109      	bne.n	8001556 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	4413      	add	r3, r2
 800154a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800154e:	461a      	mov	r2, r3
 8001550:	2320      	movs	r3, #32
 8001552:	6093      	str	r3, [r2, #8]
 8001554:	e080      	b.n	8001658 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	015a      	lsls	r2, r3, #5
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4413      	add	r3, r2
 800155e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b08      	cmp	r3, #8
 800156a:	d134      	bne.n	80015d6 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4413      	add	r3, r2
 8001574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	0151      	lsls	r1, r2, #5
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	440a      	add	r2, r1
 8001582:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	335d      	adds	r3, #93	; 0x5d
 800159c:	2205      	movs	r2, #5
 800159e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ac:	461a      	mov	r2, r3
 80015ae:	2310      	movs	r3, #16
 80015b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	015a      	lsls	r2, r3, #5
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4413      	add	r3, r2
 80015ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015be:	461a      	mov	r2, r3
 80015c0:	2308      	movs	r3, #8
 80015c2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fe2b 	bl	800522a <USB_HC_Halt>
 80015d4:	e040      	b.n	8001658 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	015a      	lsls	r2, r3, #5
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ec:	d134      	bne.n	8001658 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	0151      	lsls	r1, r2, #5
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	440a      	add	r2, r1
 8001604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fe06 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4413      	add	r3, r2
 8001626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800162a:	461a      	mov	r2, r3
 800162c:	2310      	movs	r3, #16
 800162e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	335d      	adds	r3, #93	; 0x5d
 8001640:	2208      	movs	r2, #8
 8001642:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	015a      	lsls	r2, r3, #5
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4413      	add	r3, r2
 800164c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001650:	461a      	mov	r2, r3
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	015a      	lsls	r2, r3, #5
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4413      	add	r3, r2
 8001660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800166a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800166e:	d122      	bne.n	80016b6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4413      	add	r3, r2
 8001678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	0151      	lsls	r1, r2, #5
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	440a      	add	r2, r1
 8001686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fdc5 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	015a      	lsls	r2, r3, #5
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4413      	add	r3, r2
 80016a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ac:	461a      	mov	r2, r3
 80016ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80016b4:	e29b      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	f040 80c1 	bne.w	8001850 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d01b      	beq.n	800170e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	3348      	adds	r3, #72	; 0x48
 80016e6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	0159      	lsls	r1, r3, #5
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	440b      	add	r3, r1
 80016f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80016fa:	1ad1      	subs	r1, r2, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4403      	add	r3, r0
 800170a:	334c      	adds	r3, #76	; 0x4c
 800170c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	335d      	adds	r3, #93	; 0x5d
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3358      	adds	r3, #88	; 0x58
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4413      	add	r3, r2
 800173e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001742:	461a      	mov	r2, r3
 8001744:	2301      	movs	r3, #1
 8001746:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	333f      	adds	r3, #63	; 0x3f
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00a      	beq.n	8001774 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	00db      	lsls	r3, r3, #3
 800176a:	440b      	add	r3, r1
 800176c:	333f      	adds	r3, #63	; 0x3f
 800176e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001770:	2b02      	cmp	r3, #2
 8001772:	d121      	bne.n	80017b8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4413      	add	r3, r2
 800177c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	0151      	lsls	r1, r2, #5
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	440a      	add	r2, r1
 800178a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 fd43 	bl	800522a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	015a      	lsls	r2, r3, #5
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4413      	add	r3, r2
 80017ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b0:	461a      	mov	r2, r3
 80017b2:	2310      	movs	r3, #16
 80017b4:	6093      	str	r3, [r2, #8]
 80017b6:	e034      	b.n	8001822 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	333f      	adds	r3, #63	; 0x3f
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d129      	bne.n	8001822 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	015a      	lsls	r2, r3, #5
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	0151      	lsls	r1, r2, #5
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	440a      	add	r2, r1
 80017e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017ec:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	440b      	add	r3, r1
 80017fc:	335c      	adds	r3, #92	; 0x5c
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	b2d8      	uxtb	r0, r3
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	440b      	add	r3, r1
 8001814:	335c      	adds	r3, #92	; 0x5c
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4601      	mov	r1, r0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f006 fbc9 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	3350      	adds	r3, #80	; 0x50
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2d8      	uxtb	r0, r3
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3350      	adds	r3, #80	; 0x50
 800184a:	4602      	mov	r2, r0
 800184c:	701a      	strb	r2, [r3, #0]
}
 800184e:	e1ce      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	015a      	lsls	r2, r3, #5
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4413      	add	r3, r2
 8001858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b02      	cmp	r3, #2
 8001864:	f040 80f1 	bne.w	8001a4a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	0151      	lsls	r1, r2, #5
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	440a      	add	r2, r1
 800187e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001882:	f023 0302 	bic.w	r3, r3, #2
 8001886:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	335d      	adds	r3, #93	; 0x5d
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d10a      	bne.n	80018b4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	335c      	adds	r3, #92	; 0x5c
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e0b0      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	335d      	adds	r3, #93	; 0x5d
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	d10a      	bne.n	80018e0 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	335c      	adds	r3, #92	; 0x5c
 80018da:	2205      	movs	r2, #5
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	e09a      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	335d      	adds	r3, #93	; 0x5d
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d00a      	beq.n	800190c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	440b      	add	r3, r1
 8001904:	335d      	adds	r3, #93	; 0x5d
 8001906:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001908:	2b08      	cmp	r3, #8
 800190a:	d156      	bne.n	80019ba <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3358      	adds	r3, #88	; 0x58
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4403      	add	r3, r0
 800192e:	3358      	adds	r3, #88	; 0x58
 8001930:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	3358      	adds	r3, #88	; 0x58
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d914      	bls.n	8001972 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	3358      	adds	r3, #88	; 0x58
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	335c      	adds	r3, #92	; 0x5c
 800196c:	2204      	movs	r2, #4
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e009      	b.n	8001986 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	335c      	adds	r3, #92	; 0x5c
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	015a      	lsls	r2, r3, #5
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4413      	add	r3, r2
 800198e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800199c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019a4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	015a      	lsls	r2, r3, #5
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e02d      	b.n	8001a16 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	335d      	adds	r3, #93	; 0x5d
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d122      	bne.n	8001a16 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	440b      	add	r3, r1
 80019de:	335c      	adds	r3, #92	; 0x5c
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a02:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	015a      	lsls	r2, r3, #5
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	015a      	lsls	r2, r3, #5
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a22:	461a      	mov	r2, r3
 8001a24:	2302      	movs	r3, #2
 8001a26:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	b2d8      	uxtb	r0, r3
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	335c      	adds	r3, #92	; 0x5c
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4601      	mov	r1, r0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f006 fab6 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a48:	e0d1      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	015a      	lsls	r2, r3, #5
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4413      	add	r3, r2
 8001a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d13e      	bne.n	8001ade <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3358      	adds	r3, #88	; 0x58
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4403      	add	r3, r0
 8001aa2:	3358      	adds	r3, #88	; 0x58
 8001aa4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	335d      	adds	r3, #93	; 0x5d
 8001ab6:	2206      	movs	r2, #6
 8001ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fbb0 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	015a      	lsls	r2, r3, #5
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	6093      	str	r3, [r2, #8]
}
 8001adc:	e087      	b.n	8001bee <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	015a      	lsls	r2, r3, #5
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d17c      	bne.n	8001bee <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	333f      	adds	r3, #63	; 0x3f
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d122      	bne.n	8001b50 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3358      	adds	r3, #88	; 0x58
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fb6e 	bl	800522a <USB_HC_Halt>
 8001b4e:	e045      	b.n	8001bdc <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	333f      	adds	r3, #63	; 0x3f
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	333f      	adds	r3, #63	; 0x3f
 8001b76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d12f      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4613      	mov	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	440b      	add	r3, r1
 8001b8a:	3358      	adds	r3, #88	; 0x58
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d121      	bne.n	8001bdc <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	335d      	adds	r3, #93	; 0x5d
 8001ba8:	2203      	movs	r2, #3
 8001baa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	015a      	lsls	r2, r3, #5
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	0151      	lsls	r1, r2, #5
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	440a      	add	r2, r1
 8001bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f003 fb27 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	461a      	mov	r2, r3
 8001bea:	2310      	movs	r3, #16
 8001bec:	6093      	str	r3, [r2, #8]
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d119      	bne.n	8001c5a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	015a      	lsls	r2, r3, #5
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c32:	461a      	mov	r2, r3
 8001c34:	2304      	movs	r3, #4
 8001c36:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	0151      	lsls	r1, r2, #5
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	440a      	add	r2, r1
 8001c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001c58:	e33e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d141      	bne.n	8001cf4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2320      	movs	r3, #32
 8001c80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	333d      	adds	r3, #61	; 0x3d
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	f040 831f 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	333d      	adds	r3, #61	; 0x3d
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	335c      	adds	r3, #92	; 0x5c
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	0151      	lsls	r1, r2, #5
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	440a      	add	r2, r1
 8001cd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fa9c 	bl	800522a <USB_HC_Halt>
}
 8001cf2:	e2f1      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d13f      	bne.n	8001d8a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	335d      	adds	r3, #93	; 0x5d
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	440b      	add	r3, r1
 8001d2c:	333d      	adds	r3, #61	; 0x3d
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3358      	adds	r3, #88	; 0x58
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	015a      	lsls	r2, r3, #5
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	0151      	lsls	r1, r2, #5
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	440a      	add	r2, r1
 8001d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fa5a 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	015a      	lsls	r2, r3, #5
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d82:	461a      	mov	r2, r3
 8001d84:	2340      	movs	r3, #64	; 0x40
 8001d86:	6093      	str	r3, [r2, #8]
}
 8001d88:	e2a6      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da0:	d122      	bne.n	8001de8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	0151      	lsls	r1, r2, #5
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	440a      	add	r2, r1
 8001db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fa2c 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	461a      	mov	r2, r3
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	6093      	str	r3, [r2, #8]
}
 8001de6:	e277      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d135      	bne.n	8001e6a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3358      	adds	r3, #88	; 0x58
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	015a      	lsls	r2, r3, #5
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	0151      	lsls	r1, r2, #5
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	440a      	add	r2, r1
 8001e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 f9f4 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	015a      	lsls	r2, r3, #5
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2301      	movs	r3, #1
 8001e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	335d      	adds	r3, #93	; 0x5d
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
}
 8001e68:	e236      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d12b      	bne.n	8001ed8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	015a      	lsls	r2, r3, #5
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	0151      	lsls	r1, r2, #5
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	440a      	add	r2, r1
 8001ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f9b4 	bl	800522a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	335d      	adds	r3, #93	; 0x5d
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	701a      	strb	r2, [r3, #0]
}
 8001ed6:	e1ff      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d155      	bne.n	8001f9a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	3358      	adds	r3, #88	; 0x58
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	335d      	adds	r3, #93	; 0x5d
 8001f12:	2203      	movs	r2, #3
 8001f14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	333d      	adds	r3, #61	; 0x3d
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d114      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	333c      	adds	r3, #60	; 0x3c
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	333d      	adds	r3, #61	; 0x3d
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	0151      	lsls	r1, r2, #5
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	440a      	add	r2, r1
 8001f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f952 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	2310      	movs	r3, #16
 8001f96:	6093      	str	r3, [r2, #8]
}
 8001f98:	e19e      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d12b      	bne.n	8002008 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	015a      	lsls	r2, r3, #5
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	0151      	lsls	r1, r2, #5
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	440a      	add	r2, r1
 8001fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 f925 	bl	800522a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	335d      	adds	r3, #93	; 0x5d
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	6093      	str	r3, [r2, #8]
}
 8002006:	e167      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800201e:	d135      	bne.n	800208c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f003 f8ed 	bl	800522a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002074:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	335d      	adds	r3, #93	; 0x5d
 8002086:	2208      	movs	r2, #8
 8002088:	701a      	strb	r2, [r3, #0]
}
 800208a:	e125      	b.n	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 811a 	bne.w	80022d8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020be:	f023 0302 	bic.w	r3, r3, #2
 80020c2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335d      	adds	r3, #93	; 0x5d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d137      	bne.n	800214a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	335c      	adds	r3, #92	; 0x5c
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	333f      	adds	r3, #63	; 0x3f
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d00b      	beq.n	800211c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	333f      	adds	r3, #63	; 0x3f
 8002114:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002116:	2b03      	cmp	r3, #3
 8002118:	f040 80c5 	bne.w	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	3351      	adds	r3, #81	; 0x51
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	f083 0301 	eor.w	r3, r3, #1
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	3351      	adds	r3, #81	; 0x51
 8002144:	4602      	mov	r2, r0
 8002146:	701a      	strb	r2, [r3, #0]
 8002148:	e0ad      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	335d      	adds	r3, #93	; 0x5d
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d10a      	bne.n	8002176 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	335c      	adds	r3, #92	; 0x5c
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e097      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	335d      	adds	r3, #93	; 0x5d
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d10a      	bne.n	80021a2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	335c      	adds	r3, #92	; 0x5c
 800219c:	2202      	movs	r2, #2
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e081      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	335d      	adds	r3, #93	; 0x5d
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10a      	bne.n	80021ce <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	2205      	movs	r2, #5
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e06b      	b.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	335d      	adds	r3, #93	; 0x5d
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d00a      	beq.n	80021fa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	440b      	add	r3, r1
 80021f2:	335d      	adds	r3, #93	; 0x5d
 80021f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d155      	bne.n	80022a6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3358      	adds	r3, #88	; 0x58
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4403      	add	r3, r0
 800221c:	3358      	adds	r3, #88	; 0x58
 800221e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3358      	adds	r3, #88	; 0x58
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d914      	bls.n	8002260 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	3358      	adds	r3, #88	; 0x58
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	440b      	add	r3, r1
 8002258:	335c      	adds	r3, #92	; 0x5c
 800225a:	2204      	movs	r2, #4
 800225c:	701a      	strb	r2, [r3, #0]
 800225e:	e009      	b.n	8002274 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	335c      	adds	r3, #92	; 0x5c
 8002270:	2202      	movs	r2, #2
 8002272:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800228a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002292:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	461a      	mov	r2, r3
 80022b4:	2302      	movs	r3, #2
 80022b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	b2d8      	uxtb	r0, r3
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4601      	mov	r1, r0
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f005 fe6e 	bl	8007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022d8:	bf00      	nop
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002314:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d003      	beq.n	8002324 <HCD_RXQLVL_IRQHandler+0x44>
 800231c:	2b05      	cmp	r3, #5
 800231e:	f000 8082 	beq.w	8002426 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002322:	e083      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d07f      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3344      	adds	r3, #68	; 0x44
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d074      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3344      	adds	r3, #68	; 0x44
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	b292      	uxth	r2, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f002 fb05 	bl	800496a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3344      	adds	r3, #68	; 0x44
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	18d1      	adds	r1, r2, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4403      	add	r3, r0
 8002384:	3344      	adds	r3, #68	; 0x44
 8002386:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	; 0x4c
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	18d1      	adds	r1, r2, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4403      	add	r3, r0
 80023ac:	334c      	adds	r3, #76	; 0x4c
 80023ae:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <HCD_RXQLVL_IRQHandler+0x154>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d031      	beq.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	3350      	adds	r3, #80	; 0x50
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f083 0301 	eor.w	r3, r3, #1
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	3350      	adds	r3, #80	; 0x50
 8002420:	4602      	mov	r2, r0
 8002422:	701a      	strb	r2, [r3, #0]
      break;
 8002424:	e001      	b.n	800242a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002426:	bf00      	nop
 8002428:	e000      	b.n	800242c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800242a:	bf00      	nop
  }
}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	1ff80000 	.word	0x1ff80000

08002438 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002464:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b02      	cmp	r3, #2
 800246e:	d113      	bne.n	8002498 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b01      	cmp	r3, #1
 8002478:	d10a      	bne.n	8002490 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002488:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f005 fd76 	bl	8007f7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d147      	bne.n	8002532 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d129      	bne.n	8002508 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d113      	bne.n	80024e4 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80024c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024c6:	d106      	bne.n	80024d6 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fb86 	bl	8004be0 <USB_InitFSLSPClkSel>
 80024d4:	e011      	b.n	80024fa <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 fb7f 	bl	8004be0 <USB_InitFSLSPClkSel>
 80024e2:	e00a      	b.n	80024fa <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d106      	bne.n	80024fa <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f2:	461a      	mov	r2, r3
 80024f4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80024f8:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f005 fd68 	bl	8007fd0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f005 fd3b 	bl	8007f7c <HAL_HCD_Connect_Callback>
 8002506:	e014      	b.n	8002532 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f005 fd6f 	bl	8007fec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800251c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002520:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002530:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0320 	and.w	r3, r3, #32
 8002538:	2b20      	cmp	r3, #32
 800253a:	d103      	bne.n	8002544 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f043 0320 	orr.w	r3, r3, #32
 8002542:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e25b      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d075      	beq.n	8002662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	4ba3      	ldr	r3, [pc, #652]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b04      	cmp	r3, #4
 8002580:	d00c      	beq.n	800259c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4ba0      	ldr	r3, [pc, #640]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258a:	2b08      	cmp	r3, #8
 800258c:	d112      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258e:	4b9d      	ldr	r3, [pc, #628]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800259a:	d10b      	bne.n	80025b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	4b99      	ldr	r3, [pc, #612]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d05b      	beq.n	8002660 <HAL_RCC_OscConfig+0x108>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d157      	bne.n	8002660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e236      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025bc:	d106      	bne.n	80025cc <HAL_RCC_OscConfig+0x74>
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a90      	ldr	r2, [pc, #576]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e01d      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b8b      	ldr	r3, [pc, #556]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a8a      	ldr	r2, [pc, #552]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b88      	ldr	r3, [pc, #544]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a87      	ldr	r2, [pc, #540]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0xb0>
 80025f0:	4b84      	ldr	r3, [pc, #528]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a83      	ldr	r2, [pc, #524]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b81      	ldr	r3, [pc, #516]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a80      	ldr	r2, [pc, #512]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d013      	beq.n	8002638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe f814 	bl	800063c <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe f810 	bl	800063c <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1fb      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0xc0>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe f800 	bl	800063c <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fd fffc 	bl	800063c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e1e7      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	4b6c      	ldr	r3, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0xe8>
 800265e:	e000      	b.n	8002662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d063      	beq.n	8002736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	4b65      	ldr	r3, [pc, #404]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b62      	ldr	r3, [pc, #392]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002682:	2b08      	cmp	r3, #8
 8002684:	d11c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b5f      	ldr	r3, [pc, #380]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	4b5c      	ldr	r3, [pc, #368]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1bb      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4952      	ldr	r1, [pc, #328]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e03a      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c8:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <HAL_RCC_OscConfig+0x2b0>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fd ffb5 	bl	800063c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fd ffb1 	bl	800063c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e19c      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	4b46      	ldr	r3, [pc, #280]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4940      	ldr	r1, [pc, #256]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <HAL_RCC_OscConfig+0x2b0>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fd ff94 	bl	800063c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7fd ff90 	bl	800063c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e17b      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d030      	beq.n	80027a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <HAL_RCC_OscConfig+0x2b4>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7fd ff74 	bl	800063c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fd ff70 	bl	800063c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e15b      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x200>
 8002776:	e015      	b.n	80027a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002778:	4b24      	ldr	r3, [pc, #144]	; (800280c <HAL_RCC_OscConfig+0x2b4>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277e:	f7fd ff5d 	bl	800063c <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002786:	f7fd ff59 	bl	800063c <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e144      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a0 	beq.w	80028f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_RCC_OscConfig+0x2b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d121      	bne.n	8002832 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_RCC_OscConfig+0x2b8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a07      	ldr	r2, [pc, #28]	; (8002810 <HAL_RCC_OscConfig+0x2b8>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fd ff1f 	bl	800063c <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e011      	b.n	8002826 <HAL_RCC_OscConfig+0x2ce>
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	42470000 	.word	0x42470000
 800280c:	42470e80 	.word	0x42470e80
 8002810:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002814:	f7fd ff12 	bl	800063c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0fd      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b81      	ldr	r3, [pc, #516]	; (8002a2c <HAL_RCC_OscConfig+0x4d4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x2f0>
 800283a:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283e:	4a7c      	ldr	r2, [pc, #496]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	; 0x70
 8002846:	e01c      	b.n	8002882 <HAL_RCC_OscConfig+0x32a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b05      	cmp	r3, #5
 800284e:	d10c      	bne.n	800286a <HAL_RCC_OscConfig+0x312>
 8002850:	4b77      	ldr	r3, [pc, #476]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a76      	ldr	r2, [pc, #472]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002856:	f043 0304 	orr.w	r3, r3, #4
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
 800285c:	4b74      	ldr	r3, [pc, #464]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a73      	ldr	r2, [pc, #460]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
 8002868:	e00b      	b.n	8002882 <HAL_RCC_OscConfig+0x32a>
 800286a:	4b71      	ldr	r3, [pc, #452]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	4a70      	ldr	r2, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	6713      	str	r3, [r2, #112]	; 0x70
 8002876:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	4a6d      	ldr	r2, [pc, #436]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 800287c:	f023 0304 	bic.w	r3, r3, #4
 8002880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d015      	beq.n	80028b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f7fd fed7 	bl	800063c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fd fed3 	bl	800063c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e0bc      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ee      	beq.n	8002892 <HAL_RCC_OscConfig+0x33a>
 80028b4:	e014      	b.n	80028e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b6:	f7fd fec1 	bl	800063c <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fd febd 	bl	800063c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0a6      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d4:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1ee      	bne.n	80028be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a51      	ldr	r2, [pc, #324]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 80028ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8092 	beq.w	8002a20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fc:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030c 	and.w	r3, r3, #12
 8002904:	2b08      	cmp	r3, #8
 8002906:	d05c      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d141      	bne.n	8002994 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002910:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <HAL_RCC_OscConfig+0x4dc>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fd fe91 	bl	800063c <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291e:	f7fd fe8d 	bl	800063c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e078      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002930:	4b3f      	ldr	r3, [pc, #252]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	019b      	lsls	r3, r3, #6
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	4933      	ldr	r1, [pc, #204]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002966:	4b33      	ldr	r3, [pc, #204]	; (8002a34 <HAL_RCC_OscConfig+0x4dc>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fd fe66 	bl	800063c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002974:	f7fd fe62 	bl	800063c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e04d      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x41c>
 8002992:	e045      	b.n	8002a20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_OscConfig+0x4dc>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7fd fe4f 	bl	800063c <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fd fe4b 	bl	800063c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e036      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x44a>
 80029c0:	e02e      	b.n	8002a20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e029      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_RCC_OscConfig+0x4d8>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d11c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d115      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f6:	4013      	ands	r3, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10d      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470060 	.word	0x42470060

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0cc      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d90c      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d044      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e067      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 0203 	bic.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4934      	ldr	r1, [pc, #208]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b28:	f7fd fd88 	bl	800063c <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7fd fd84 	bl	800063c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e04f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 020c 	and.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1eb      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d20c      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	5cd3      	ldrb	r3, [r2, r3]
 8002bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fce8 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	08008cf8 	.word	0x08008cf8
 8002bfc:	2000002c 	.word	0x2000002c
 8002c00:	20000000 	.word	0x20000000

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	2300      	movs	r3, #0
 8002c14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1a:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d007      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x32>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d008      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x38>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80b4 	bne.w	8002d98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c30:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c32:	60bb      	str	r3, [r7, #8]
       break;
 8002c34:	e0b3      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c36:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c38:	60bb      	str	r3, [r7, #8]
      break;
 8002c3a:	e0b0      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c3c:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c46:	4b58      	ldr	r3, [pc, #352]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04a      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c52:	4b55      	ldr	r3, [pc, #340]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	099b      	lsrs	r3, r3, #6
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	ea03 0501 	and.w	r5, r3, r1
 8002c68:	ea04 0602 	and.w	r6, r4, r2
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	4632      	mov	r2, r6
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	f04f 0400 	mov.w	r4, #0
 8002c78:	0154      	lsls	r4, r2, #5
 8002c7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c7e:	014b      	lsls	r3, r1, #5
 8002c80:	4619      	mov	r1, r3
 8002c82:	4622      	mov	r2, r4
 8002c84:	1b49      	subs	r1, r1, r5
 8002c86:	eb62 0206 	sbc.w	r2, r2, r6
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	f04f 0400 	mov.w	r4, #0
 8002c92:	0194      	lsls	r4, r2, #6
 8002c94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c98:	018b      	lsls	r3, r1, #6
 8002c9a:	1a5b      	subs	r3, r3, r1
 8002c9c:	eb64 0402 	sbc.w	r4, r4, r2
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	00e2      	lsls	r2, r4, #3
 8002caa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cae:	00d9      	lsls	r1, r3, #3
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	195b      	adds	r3, r3, r5
 8002cb6:	eb44 0406 	adc.w	r4, r4, r6
 8002cba:	f04f 0100 	mov.w	r1, #0
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	0262      	lsls	r2, r4, #9
 8002cc4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002cc8:	0259      	lsls	r1, r3, #9
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4614      	mov	r4, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f04f 0400 	mov.w	r4, #0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4623      	mov	r3, r4
 8002cdc:	f7fd fac8 	bl	8000270 <__aeabi_uldivmod>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e049      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce8:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	f04f 0400 	mov.w	r4, #0
 8002cf2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	ea03 0501 	and.w	r5, r3, r1
 8002cfe:	ea04 0602 	and.w	r6, r4, r2
 8002d02:	4629      	mov	r1, r5
 8002d04:	4632      	mov	r2, r6
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f04f 0400 	mov.w	r4, #0
 8002d0e:	0154      	lsls	r4, r2, #5
 8002d10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d14:	014b      	lsls	r3, r1, #5
 8002d16:	4619      	mov	r1, r3
 8002d18:	4622      	mov	r2, r4
 8002d1a:	1b49      	subs	r1, r1, r5
 8002d1c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	0194      	lsls	r4, r2, #6
 8002d2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d2e:	018b      	lsls	r3, r1, #6
 8002d30:	1a5b      	subs	r3, r3, r1
 8002d32:	eb64 0402 	sbc.w	r4, r4, r2
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	00e2      	lsls	r2, r4, #3
 8002d40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d44:	00d9      	lsls	r1, r3, #3
 8002d46:	460b      	mov	r3, r1
 8002d48:	4614      	mov	r4, r2
 8002d4a:	195b      	adds	r3, r3, r5
 8002d4c:	eb44 0406 	adc.w	r4, r4, r6
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	02a2      	lsls	r2, r4, #10
 8002d5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d5e:	0299      	lsls	r1, r3, #10
 8002d60:	460b      	mov	r3, r1
 8002d62:	4614      	mov	r4, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	4621      	mov	r1, r4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f04f 0400 	mov.w	r4, #0
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4623      	mov	r3, r4
 8002d72:	f7fd fa7d 	bl	8000270 <__aeabi_uldivmod>
 8002d76:	4603      	mov	r3, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	3301      	adds	r3, #1
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d94:	60bb      	str	r3, [r7, #8]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d9a:	60bb      	str	r3, [r7, #8]
      break;
 8002d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	2000002c 	.word	0x2000002c

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4601      	mov	r1, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08008d08 	.word	0x08008d08

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffdc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0b5b      	lsrs	r3, r3, #13
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5cd3      	ldrb	r3, [r2, r3]
 8002e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	08008d08 	.word	0x08008d08

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e01d      	b.n	8002e6a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f004 fe5a 	bl	8007afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fb68 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b06      	cmp	r3, #6
 8002e92:	d007      	beq.n	8002ea4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	d007      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e01d      	b.n	8002f50 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f004 fe2d 	bl	8007b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f000 faf5 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fdca 	bl	8003b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <HAL_TIM_PWM_Start+0x74>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d004      	beq.n	8002f84 <HAL_TIM_PWM_Start+0x2c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a14      	ldr	r2, [pc, #80]	; (8002fd0 <HAL_TIM_PWM_Start+0x78>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d101      	bne.n	8002f88 <HAL_TIM_PWM_Start+0x30>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_TIM_PWM_Start+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2b06      	cmp	r3, #6
 8002fae:	d007      	beq.n	8002fc0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40010400 	.word	0x40010400

08002fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0202 	mvn.w	r2, #2
 8003000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa6b 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa5d 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa6e 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d122      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b04      	cmp	r3, #4
 800304a:	d11b      	bne.n	8003084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0204 	mvn.w	r2, #4
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa41 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa33 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fa44 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b08      	cmp	r3, #8
 8003090:	d122      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0308 	and.w	r3, r3, #8
 800309c:	2b08      	cmp	r3, #8
 800309e:	d11b      	bne.n	80030d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0208 	mvn.w	r2, #8
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2204      	movs	r2, #4
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa17 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa09 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 fa1a 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0310 	and.w	r3, r3, #16
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d122      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d11b      	bne.n	800312c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2208      	movs	r2, #8
 8003102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f9ed 	bl	80034f2 <HAL_TIM_IC_CaptureCallback>
 8003118:	e005      	b.n	8003126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9df 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f9f0 	bl	8003506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10e      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d107      	bne.n	8003158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0201 	mvn.w	r2, #1
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f004 f92e 	bl	80073b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b80      	cmp	r3, #128	; 0x80
 8003164:	d10e      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d107      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800317c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fd6c 	bl	8003c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d10e      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f9b5 	bl	800351a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d10e      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d107      	bne.n	80031dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0220 	mvn.w	r2, #32
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fd36 	bl	8003c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e0b4      	b.n	8003368 <HAL_TIM_PWM_ConfigChannel+0x184>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2202      	movs	r2, #2
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	f200 809f 	bhi.w	8003354 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003251 	.word	0x08003251
 8003220:	08003355 	.word	0x08003355
 8003224:	08003355 	.word	0x08003355
 8003228:	08003355 	.word	0x08003355
 800322c:	08003291 	.word	0x08003291
 8003230:	08003355 	.word	0x08003355
 8003234:	08003355 	.word	0x08003355
 8003238:	08003355 	.word	0x08003355
 800323c:	080032d3 	.word	0x080032d3
 8003240:	08003355 	.word	0x08003355
 8003244:	08003355 	.word	0x08003355
 8003248:	08003355 	.word	0x08003355
 800324c:	08003313 	.word	0x08003313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fa0a 	bl	8003670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6999      	ldr	r1, [r3, #24]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	619a      	str	r2, [r3, #24]
      break;
 800328e:	e062      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fa5a 	bl	8003750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6999      	ldr	r1, [r3, #24]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	021a      	lsls	r2, r3, #8
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	619a      	str	r2, [r3, #24]
      break;
 80032d0:	e041      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 faaf 	bl	800383c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0208 	orr.w	r2, r2, #8
 80032ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0204 	bic.w	r2, r2, #4
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	61da      	str	r2, [r3, #28]
      break;
 8003310:	e021      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fb03 	bl	8003924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69d9      	ldr	r1, [r3, #28]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	021a      	lsls	r2, r3, #8
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	61da      	str	r2, [r3, #28]
      break;
 8003352:	e000      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003354:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIM_ConfigClockSource+0x18>
 8003384:	2302      	movs	r3, #2
 8003386:	e0a6      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x166>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d067      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0x120>
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d80b      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x6c>
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d073      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0x140>
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d802      	bhi.n	80033d2 <HAL_TIM_ConfigClockSource+0x62>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d06f      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033d0:	e078      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033d2:	2b20      	cmp	r3, #32
 80033d4:	d06c      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0x140>
 80033d6:	2b30      	cmp	r3, #48	; 0x30
 80033d8:	d06a      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80033da:	e073      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033dc:	2b70      	cmp	r3, #112	; 0x70
 80033de:	d00d      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0x8c>
 80033e0:	2b70      	cmp	r3, #112	; 0x70
 80033e2:	d804      	bhi.n	80033ee <HAL_TIM_ConfigClockSource+0x7e>
 80033e4:	2b50      	cmp	r3, #80	; 0x50
 80033e6:	d033      	beq.n	8003450 <HAL_TIM_ConfigClockSource+0xe0>
 80033e8:	2b60      	cmp	r3, #96	; 0x60
 80033ea:	d041      	beq.n	8003470 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80033ec:	e06a      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f2:	d066      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x152>
 80033f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f8:	d017      	beq.n	800342a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033fa:	e063      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6899      	ldr	r1, [r3, #8]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f000 fb5a 	bl	8003ac4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800341e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	609a      	str	r2, [r3, #8]
      break;
 8003428:	e04c      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f000 fb43 	bl	8003ac4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800344c:	609a      	str	r2, [r3, #8]
      break;
 800344e:	e039      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	461a      	mov	r2, r3
 800345e:	f000 fab7 	bl	80039d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2150      	movs	r1, #80	; 0x50
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fb10 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 800346e:	e029      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	461a      	mov	r2, r3
 800347e:	f000 fad6 	bl	8003a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2160      	movs	r1, #96	; 0x60
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fb00 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 800348e:	e019      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	461a      	mov	r2, r3
 800349e:	f000 fa97 	bl	80039d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2140      	movs	r1, #64	; 0x40
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 faf0 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 80034ae:	e009      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f000 fae7 	bl	8003a8e <TIM_ITRx_SetConfig>
      break;
 80034c0:	e000      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a40      	ldr	r2, [pc, #256]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3c      	ldr	r2, [pc, #240]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3b      	ldr	r2, [pc, #236]	; (8003650 <TIM_Base_SetConfig+0x120>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x40>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3a      	ldr	r2, [pc, #232]	; (8003654 <TIM_Base_SetConfig+0x124>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02b      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003590:	d027      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d023      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2b      	ldr	r2, [pc, #172]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	; (8003650 <TIM_Base_SetConfig+0x120>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01b      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a29      	ldr	r2, [pc, #164]	; (8003654 <TIM_Base_SetConfig+0x124>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d017      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a28      	ldr	r2, [pc, #160]	; (8003658 <TIM_Base_SetConfig+0x128>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a27      	ldr	r2, [pc, #156]	; (800365c <TIM_Base_SetConfig+0x12c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00f      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a26      	ldr	r2, [pc, #152]	; (8003660 <TIM_Base_SetConfig+0x130>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a25      	ldr	r2, [pc, #148]	; (8003664 <TIM_Base_SetConfig+0x134>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a24      	ldr	r2, [pc, #144]	; (8003668 <TIM_Base_SetConfig+0x138>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a23      	ldr	r2, [pc, #140]	; (800366c <TIM_Base_SetConfig+0x13c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <TIM_Base_SetConfig+0x114>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0xf8>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <TIM_Base_SetConfig+0x124>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	615a      	str	r2, [r3, #20]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40010000 	.word	0x40010000
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800
 8003650:	40000c00 	.word	0x40000c00
 8003654:	40010400 	.word	0x40010400
 8003658:	40014000 	.word	0x40014000
 800365c:	40014400 	.word	0x40014400
 8003660:	40014800 	.word	0x40014800
 8003664:	40001800 	.word	0x40001800
 8003668:	40001c00 	.word	0x40001c00
 800366c:	40002000 	.word	0x40002000

08003670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0302 	bic.w	r3, r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a20      	ldr	r2, [pc, #128]	; (8003748 <TIM_OC1_SetConfig+0xd8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d003      	beq.n	80036d4 <TIM_OC1_SetConfig+0x64>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a1f      	ldr	r2, [pc, #124]	; (800374c <TIM_OC1_SetConfig+0xdc>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d10c      	bne.n	80036ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f023 0308 	bic.w	r3, r3, #8
 80036da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a15      	ldr	r2, [pc, #84]	; (8003748 <TIM_OC1_SetConfig+0xd8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_OC1_SetConfig+0x8e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <TIM_OC1_SetConfig+0xdc>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d111      	bne.n	8003722 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800370c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	f023 0210 	bic.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0320 	bic.w	r3, r3, #32
 800379a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a22      	ldr	r2, [pc, #136]	; (8003834 <TIM_OC2_SetConfig+0xe4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_OC2_SetConfig+0x68>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <TIM_OC2_SetConfig+0xe8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10d      	bne.n	80037d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <TIM_OC2_SetConfig+0xe4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC2_SetConfig+0x94>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <TIM_OC2_SetConfig+0xe8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d113      	bne.n	800380c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010000 	.word	0x40010000
 8003838:	40010400 	.word	0x40010400

0800383c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0303 	bic.w	r3, r3, #3
 8003872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a21      	ldr	r2, [pc, #132]	; (800391c <TIM_OC3_SetConfig+0xe0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d003      	beq.n	80038a2 <TIM_OC3_SetConfig+0x66>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a20      	ldr	r2, [pc, #128]	; (8003920 <TIM_OC3_SetConfig+0xe4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10d      	bne.n	80038be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <TIM_OC3_SetConfig+0xe0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_OC3_SetConfig+0x92>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a15      	ldr	r2, [pc, #84]	; (8003920 <TIM_OC3_SetConfig+0xe4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d113      	bne.n	80038f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40010000 	.word	0x40010000
 8003920:	40010400 	.word	0x40010400

08003924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800396e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	031b      	lsls	r3, r3, #12
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <TIM_OC4_SetConfig+0xa4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_OC4_SetConfig+0x68>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a11      	ldr	r2, [pc, #68]	; (80039cc <TIM_OC4_SetConfig+0xa8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d109      	bne.n	80039a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40010400 	.word	0x40010400

080039d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f023 0201 	bic.w	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 030a 	bic.w	r3, r3, #10
 8003a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b087      	sub	sp, #28
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f023 0210 	bic.w	r2, r3, #16
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	031b      	lsls	r3, r3, #12
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	621a      	str	r2, [r3, #32]
}
 8003a82:	bf00      	nop
 8003a84:	371c      	adds	r7, #28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f043 0307 	orr.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	2201      	movs	r2, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	401a      	ands	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1a      	ldr	r2, [r3, #32]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e05a      	b.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d022      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d018      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10c      	bne.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	40010400 	.word	0x40010400
 8003c40:	40014000 	.word	0x40014000
 8003c44:	40001800 	.word	0x40001800

08003c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e03f      	b.n	8003d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f003 ffd2 	bl	8007c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f9b1 	bl	800401c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b088      	sub	sp, #32
 8003d0e:	af02      	add	r7, sp, #8
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	f040 8083 	bne.w	8003e32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_UART_Transmit+0x2e>
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e07b      	b.n	8003e34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_UART_Transmit+0x40>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e074      	b.n	8003e34 <HAL_UART_Transmit+0x12a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2221      	movs	r2, #33	; 0x21
 8003d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d60:	f7fc fc6c 	bl	800063c <HAL_GetTick>
 8003d64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	88fa      	ldrh	r2, [r7, #6]
 8003d6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	88fa      	ldrh	r2, [r7, #6]
 8003d70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003d7a:	e042      	b.n	8003e02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d122      	bne.n	8003dda <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f8f2 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e042      	b.n	8003e34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	3302      	adds	r3, #2
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	e017      	b.n	8003e02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	e013      	b.n	8003e02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2180      	movs	r1, #128	; 0x80
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 f8cf 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e01f      	b.n	8003e34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60ba      	str	r2, [r7, #8]
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1b7      	bne.n	8003d7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2200      	movs	r2, #0
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f000 f8b6 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e006      	b.n	8003e34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	f040 8090 	bne.w	8003f7e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_UART_Receive+0x2e>
 8003e64:	88fb      	ldrh	r3, [r7, #6]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e088      	b.n	8003f80 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Receive+0x40>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e081      	b.n	8003f80 <HAL_UART_Receive+0x144>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2222      	movs	r2, #34	; 0x22
 8003e8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e92:	f7fc fbd3 	bl	800063c <HAL_GetTick>
 8003e96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	88fa      	ldrh	r2, [r7, #6]
 8003ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003eac:	e05c      	b.n	8003f68 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d12b      	bne.n	8003f1e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2120      	movs	r1, #32
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f859 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e04f      	b.n	8003f80 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3302      	adds	r3, #2
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	e030      	b.n	8003f68 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	e024      	b.n	8003f68 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	2200      	movs	r2, #0
 8003f26:	2120      	movs	r1, #32
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f82d 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e023      	b.n	8003f80 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d108      	bne.n	8003f52 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	60ba      	str	r2, [r7, #8]
 8003f4c:	b2ca      	uxtb	r2, r1
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e00a      	b.n	8003f68 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	1c59      	adds	r1, r3, #1
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d19d      	bne.n	8003eae <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e000      	b.n	8003f80 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	e02c      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d028      	beq.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa8:	f7fc fb48 	bl	800063c <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d21d      	bcs.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e00f      	b.n	8004014 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	429a      	cmp	r2, r3
 8004010:	d0c3      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800405e:	f023 030c 	bic.w	r3, r3, #12
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	68f9      	ldr	r1, [r7, #12]
 8004068:	430b      	orrs	r3, r1
 800406a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800408a:	f040 818b 	bne.w	80043a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4ac1      	ldr	r2, [pc, #772]	; (8004398 <UART_SetConfig+0x37c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d005      	beq.n	80040a4 <UART_SetConfig+0x88>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4abf      	ldr	r2, [pc, #764]	; (800439c <UART_SetConfig+0x380>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	f040 80bd 	bne.w	800421e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a4:	f7fe fea6 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80040a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	461d      	mov	r5, r3
 80040ae:	f04f 0600 	mov.w	r6, #0
 80040b2:	46a8      	mov	r8, r5
 80040b4:	46b1      	mov	r9, r6
 80040b6:	eb18 0308 	adds.w	r3, r8, r8
 80040ba:	eb49 0409 	adc.w	r4, r9, r9
 80040be:	4698      	mov	r8, r3
 80040c0:	46a1      	mov	r9, r4
 80040c2:	eb18 0805 	adds.w	r8, r8, r5
 80040c6:	eb49 0906 	adc.w	r9, r9, r6
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040de:	4688      	mov	r8, r1
 80040e0:	4691      	mov	r9, r2
 80040e2:	eb18 0005 	adds.w	r0, r8, r5
 80040e6:	eb49 0106 	adc.w	r1, r9, r6
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	461d      	mov	r5, r3
 80040f0:	f04f 0600 	mov.w	r6, #0
 80040f4:	196b      	adds	r3, r5, r5
 80040f6:	eb46 0406 	adc.w	r4, r6, r6
 80040fa:	461a      	mov	r2, r3
 80040fc:	4623      	mov	r3, r4
 80040fe:	f7fc f8b7 	bl	8000270 <__aeabi_uldivmod>
 8004102:	4603      	mov	r3, r0
 8004104:	460c      	mov	r4, r1
 8004106:	461a      	mov	r2, r3
 8004108:	4ba5      	ldr	r3, [pc, #660]	; (80043a0 <UART_SetConfig+0x384>)
 800410a:	fba3 2302 	umull	r2, r3, r3, r2
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	461d      	mov	r5, r3
 8004118:	f04f 0600 	mov.w	r6, #0
 800411c:	46a9      	mov	r9, r5
 800411e:	46b2      	mov	sl, r6
 8004120:	eb19 0309 	adds.w	r3, r9, r9
 8004124:	eb4a 040a 	adc.w	r4, sl, sl
 8004128:	4699      	mov	r9, r3
 800412a:	46a2      	mov	sl, r4
 800412c:	eb19 0905 	adds.w	r9, r9, r5
 8004130:	eb4a 0a06 	adc.w	sl, sl, r6
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004140:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004144:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004148:	4689      	mov	r9, r1
 800414a:	4692      	mov	sl, r2
 800414c:	eb19 0005 	adds.w	r0, r9, r5
 8004150:	eb4a 0106 	adc.w	r1, sl, r6
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	461d      	mov	r5, r3
 800415a:	f04f 0600 	mov.w	r6, #0
 800415e:	196b      	adds	r3, r5, r5
 8004160:	eb46 0406 	adc.w	r4, r6, r6
 8004164:	461a      	mov	r2, r3
 8004166:	4623      	mov	r3, r4
 8004168:	f7fc f882 	bl	8000270 <__aeabi_uldivmod>
 800416c:	4603      	mov	r3, r0
 800416e:	460c      	mov	r4, r1
 8004170:	461a      	mov	r2, r3
 8004172:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <UART_SetConfig+0x384>)
 8004174:	fba3 1302 	umull	r1, r3, r3, r2
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	2164      	movs	r1, #100	; 0x64
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	3332      	adds	r3, #50	; 0x32
 8004186:	4a86      	ldr	r2, [pc, #536]	; (80043a0 <UART_SetConfig+0x384>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004194:	4498      	add	r8, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	461d      	mov	r5, r3
 800419a:	f04f 0600 	mov.w	r6, #0
 800419e:	46a9      	mov	r9, r5
 80041a0:	46b2      	mov	sl, r6
 80041a2:	eb19 0309 	adds.w	r3, r9, r9
 80041a6:	eb4a 040a 	adc.w	r4, sl, sl
 80041aa:	4699      	mov	r9, r3
 80041ac:	46a2      	mov	sl, r4
 80041ae:	eb19 0905 	adds.w	r9, r9, r5
 80041b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80041b6:	f04f 0100 	mov.w	r1, #0
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ca:	4689      	mov	r9, r1
 80041cc:	4692      	mov	sl, r2
 80041ce:	eb19 0005 	adds.w	r0, r9, r5
 80041d2:	eb4a 0106 	adc.w	r1, sl, r6
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	461d      	mov	r5, r3
 80041dc:	f04f 0600 	mov.w	r6, #0
 80041e0:	196b      	adds	r3, r5, r5
 80041e2:	eb46 0406 	adc.w	r4, r6, r6
 80041e6:	461a      	mov	r2, r3
 80041e8:	4623      	mov	r3, r4
 80041ea:	f7fc f841 	bl	8000270 <__aeabi_uldivmod>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	461a      	mov	r2, r3
 80041f4:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <UART_SetConfig+0x384>)
 80041f6:	fba3 1302 	umull	r1, r3, r3, r2
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	2164      	movs	r1, #100	; 0x64
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	3332      	adds	r3, #50	; 0x32
 8004208:	4a65      	ldr	r2, [pc, #404]	; (80043a0 <UART_SetConfig+0x384>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	f003 0207 	and.w	r2, r3, #7
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4442      	add	r2, r8
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	e26f      	b.n	80046fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800421e:	f7fe fdd5 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8004222:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	461d      	mov	r5, r3
 8004228:	f04f 0600 	mov.w	r6, #0
 800422c:	46a8      	mov	r8, r5
 800422e:	46b1      	mov	r9, r6
 8004230:	eb18 0308 	adds.w	r3, r8, r8
 8004234:	eb49 0409 	adc.w	r4, r9, r9
 8004238:	4698      	mov	r8, r3
 800423a:	46a1      	mov	r9, r4
 800423c:	eb18 0805 	adds.w	r8, r8, r5
 8004240:	eb49 0906 	adc.w	r9, r9, r6
 8004244:	f04f 0100 	mov.w	r1, #0
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004250:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004254:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004258:	4688      	mov	r8, r1
 800425a:	4691      	mov	r9, r2
 800425c:	eb18 0005 	adds.w	r0, r8, r5
 8004260:	eb49 0106 	adc.w	r1, r9, r6
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	461d      	mov	r5, r3
 800426a:	f04f 0600 	mov.w	r6, #0
 800426e:	196b      	adds	r3, r5, r5
 8004270:	eb46 0406 	adc.w	r4, r6, r6
 8004274:	461a      	mov	r2, r3
 8004276:	4623      	mov	r3, r4
 8004278:	f7fb fffa 	bl	8000270 <__aeabi_uldivmod>
 800427c:	4603      	mov	r3, r0
 800427e:	460c      	mov	r4, r1
 8004280:	461a      	mov	r2, r3
 8004282:	4b47      	ldr	r3, [pc, #284]	; (80043a0 <UART_SetConfig+0x384>)
 8004284:	fba3 2302 	umull	r2, r3, r3, r2
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	461d      	mov	r5, r3
 8004292:	f04f 0600 	mov.w	r6, #0
 8004296:	46a9      	mov	r9, r5
 8004298:	46b2      	mov	sl, r6
 800429a:	eb19 0309 	adds.w	r3, r9, r9
 800429e:	eb4a 040a 	adc.w	r4, sl, sl
 80042a2:	4699      	mov	r9, r3
 80042a4:	46a2      	mov	sl, r4
 80042a6:	eb19 0905 	adds.w	r9, r9, r5
 80042aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80042ae:	f04f 0100 	mov.w	r1, #0
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042c2:	4689      	mov	r9, r1
 80042c4:	4692      	mov	sl, r2
 80042c6:	eb19 0005 	adds.w	r0, r9, r5
 80042ca:	eb4a 0106 	adc.w	r1, sl, r6
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	461d      	mov	r5, r3
 80042d4:	f04f 0600 	mov.w	r6, #0
 80042d8:	196b      	adds	r3, r5, r5
 80042da:	eb46 0406 	adc.w	r4, r6, r6
 80042de:	461a      	mov	r2, r3
 80042e0:	4623      	mov	r3, r4
 80042e2:	f7fb ffc5 	bl	8000270 <__aeabi_uldivmod>
 80042e6:	4603      	mov	r3, r0
 80042e8:	460c      	mov	r4, r1
 80042ea:	461a      	mov	r2, r3
 80042ec:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <UART_SetConfig+0x384>)
 80042ee:	fba3 1302 	umull	r1, r3, r3, r2
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	2164      	movs	r1, #100	; 0x64
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	3332      	adds	r3, #50	; 0x32
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <UART_SetConfig+0x384>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800430e:	4498      	add	r8, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	461d      	mov	r5, r3
 8004314:	f04f 0600 	mov.w	r6, #0
 8004318:	46a9      	mov	r9, r5
 800431a:	46b2      	mov	sl, r6
 800431c:	eb19 0309 	adds.w	r3, r9, r9
 8004320:	eb4a 040a 	adc.w	r4, sl, sl
 8004324:	4699      	mov	r9, r3
 8004326:	46a2      	mov	sl, r4
 8004328:	eb19 0905 	adds.w	r9, r9, r5
 800432c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004330:	f04f 0100 	mov.w	r1, #0
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800433c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004340:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004344:	4689      	mov	r9, r1
 8004346:	4692      	mov	sl, r2
 8004348:	eb19 0005 	adds.w	r0, r9, r5
 800434c:	eb4a 0106 	adc.w	r1, sl, r6
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	461d      	mov	r5, r3
 8004356:	f04f 0600 	mov.w	r6, #0
 800435a:	196b      	adds	r3, r5, r5
 800435c:	eb46 0406 	adc.w	r4, r6, r6
 8004360:	461a      	mov	r2, r3
 8004362:	4623      	mov	r3, r4
 8004364:	f7fb ff84 	bl	8000270 <__aeabi_uldivmod>
 8004368:	4603      	mov	r3, r0
 800436a:	460c      	mov	r4, r1
 800436c:	461a      	mov	r2, r3
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <UART_SetConfig+0x384>)
 8004370:	fba3 1302 	umull	r1, r3, r3, r2
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	2164      	movs	r1, #100	; 0x64
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	3332      	adds	r3, #50	; 0x32
 8004382:	4a07      	ldr	r2, [pc, #28]	; (80043a0 <UART_SetConfig+0x384>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	f003 0207 	and.w	r2, r3, #7
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4442      	add	r2, r8
 8004394:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004396:	e1b2      	b.n	80046fe <UART_SetConfig+0x6e2>
 8004398:	40011000 	.word	0x40011000
 800439c:	40011400 	.word	0x40011400
 80043a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4ad7      	ldr	r2, [pc, #860]	; (8004708 <UART_SetConfig+0x6ec>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d005      	beq.n	80043ba <UART_SetConfig+0x39e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4ad6      	ldr	r2, [pc, #856]	; (800470c <UART_SetConfig+0x6f0>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	f040 80d1 	bne.w	800455c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ba:	f7fe fd1b 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 80043be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	469a      	mov	sl, r3
 80043c4:	f04f 0b00 	mov.w	fp, #0
 80043c8:	46d0      	mov	r8, sl
 80043ca:	46d9      	mov	r9, fp
 80043cc:	eb18 0308 	adds.w	r3, r8, r8
 80043d0:	eb49 0409 	adc.w	r4, r9, r9
 80043d4:	4698      	mov	r8, r3
 80043d6:	46a1      	mov	r9, r4
 80043d8:	eb18 080a 	adds.w	r8, r8, sl
 80043dc:	eb49 090b 	adc.w	r9, r9, fp
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80043ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80043f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80043f4:	4688      	mov	r8, r1
 80043f6:	4691      	mov	r9, r2
 80043f8:	eb1a 0508 	adds.w	r5, sl, r8
 80043fc:	eb4b 0609 	adc.w	r6, fp, r9
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4619      	mov	r1, r3
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	f04f 0400 	mov.w	r4, #0
 8004412:	0094      	lsls	r4, r2, #2
 8004414:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004418:	008b      	lsls	r3, r1, #2
 800441a:	461a      	mov	r2, r3
 800441c:	4623      	mov	r3, r4
 800441e:	4628      	mov	r0, r5
 8004420:	4631      	mov	r1, r6
 8004422:	f7fb ff25 	bl	8000270 <__aeabi_uldivmod>
 8004426:	4603      	mov	r3, r0
 8004428:	460c      	mov	r4, r1
 800442a:	461a      	mov	r2, r3
 800442c:	4bb8      	ldr	r3, [pc, #736]	; (8004710 <UART_SetConfig+0x6f4>)
 800442e:	fba3 2302 	umull	r2, r3, r3, r2
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	469b      	mov	fp, r3
 800443c:	f04f 0c00 	mov.w	ip, #0
 8004440:	46d9      	mov	r9, fp
 8004442:	46e2      	mov	sl, ip
 8004444:	eb19 0309 	adds.w	r3, r9, r9
 8004448:	eb4a 040a 	adc.w	r4, sl, sl
 800444c:	4699      	mov	r9, r3
 800444e:	46a2      	mov	sl, r4
 8004450:	eb19 090b 	adds.w	r9, r9, fp
 8004454:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004464:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004468:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800446c:	4689      	mov	r9, r1
 800446e:	4692      	mov	sl, r2
 8004470:	eb1b 0509 	adds.w	r5, fp, r9
 8004474:	eb4c 060a 	adc.w	r6, ip, sl
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	4619      	mov	r1, r3
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	f04f 0400 	mov.w	r4, #0
 800448a:	0094      	lsls	r4, r2, #2
 800448c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004490:	008b      	lsls	r3, r1, #2
 8004492:	461a      	mov	r2, r3
 8004494:	4623      	mov	r3, r4
 8004496:	4628      	mov	r0, r5
 8004498:	4631      	mov	r1, r6
 800449a:	f7fb fee9 	bl	8000270 <__aeabi_uldivmod>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	461a      	mov	r2, r3
 80044a4:	4b9a      	ldr	r3, [pc, #616]	; (8004710 <UART_SetConfig+0x6f4>)
 80044a6:	fba3 1302 	umull	r1, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2164      	movs	r1, #100	; 0x64
 80044ae:	fb01 f303 	mul.w	r3, r1, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	3332      	adds	r3, #50	; 0x32
 80044b8:	4a95      	ldr	r2, [pc, #596]	; (8004710 <UART_SetConfig+0x6f4>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044c4:	4498      	add	r8, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	469b      	mov	fp, r3
 80044ca:	f04f 0c00 	mov.w	ip, #0
 80044ce:	46d9      	mov	r9, fp
 80044d0:	46e2      	mov	sl, ip
 80044d2:	eb19 0309 	adds.w	r3, r9, r9
 80044d6:	eb4a 040a 	adc.w	r4, sl, sl
 80044da:	4699      	mov	r9, r3
 80044dc:	46a2      	mov	sl, r4
 80044de:	eb19 090b 	adds.w	r9, r9, fp
 80044e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044fa:	4689      	mov	r9, r1
 80044fc:	4692      	mov	sl, r2
 80044fe:	eb1b 0509 	adds.w	r5, fp, r9
 8004502:	eb4c 060a 	adc.w	r6, ip, sl
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4619      	mov	r1, r3
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	f04f 0400 	mov.w	r4, #0
 8004518:	0094      	lsls	r4, r2, #2
 800451a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	461a      	mov	r2, r3
 8004522:	4623      	mov	r3, r4
 8004524:	4628      	mov	r0, r5
 8004526:	4631      	mov	r1, r6
 8004528:	f7fb fea2 	bl	8000270 <__aeabi_uldivmod>
 800452c:	4603      	mov	r3, r0
 800452e:	460c      	mov	r4, r1
 8004530:	461a      	mov	r2, r3
 8004532:	4b77      	ldr	r3, [pc, #476]	; (8004710 <UART_SetConfig+0x6f4>)
 8004534:	fba3 1302 	umull	r1, r3, r3, r2
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	2164      	movs	r1, #100	; 0x64
 800453c:	fb01 f303 	mul.w	r3, r1, r3
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	3332      	adds	r3, #50	; 0x32
 8004546:	4a72      	ldr	r2, [pc, #456]	; (8004710 <UART_SetConfig+0x6f4>)
 8004548:	fba2 2303 	umull	r2, r3, r2, r3
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	f003 020f 	and.w	r2, r3, #15
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4442      	add	r2, r8
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	e0d0      	b.n	80046fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800455c:	f7fe fc36 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8004560:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	469a      	mov	sl, r3
 8004566:	f04f 0b00 	mov.w	fp, #0
 800456a:	46d0      	mov	r8, sl
 800456c:	46d9      	mov	r9, fp
 800456e:	eb18 0308 	adds.w	r3, r8, r8
 8004572:	eb49 0409 	adc.w	r4, r9, r9
 8004576:	4698      	mov	r8, r3
 8004578:	46a1      	mov	r9, r4
 800457a:	eb18 080a 	adds.w	r8, r8, sl
 800457e:	eb49 090b 	adc.w	r9, r9, fp
 8004582:	f04f 0100 	mov.w	r1, #0
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800458e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004592:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004596:	4688      	mov	r8, r1
 8004598:	4691      	mov	r9, r2
 800459a:	eb1a 0508 	adds.w	r5, sl, r8
 800459e:	eb4b 0609 	adc.w	r6, fp, r9
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4619      	mov	r1, r3
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	f04f 0400 	mov.w	r4, #0
 80045b4:	0094      	lsls	r4, r2, #2
 80045b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80045ba:	008b      	lsls	r3, r1, #2
 80045bc:	461a      	mov	r2, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	4628      	mov	r0, r5
 80045c2:	4631      	mov	r1, r6
 80045c4:	f7fb fe54 	bl	8000270 <__aeabi_uldivmod>
 80045c8:	4603      	mov	r3, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	461a      	mov	r2, r3
 80045ce:	4b50      	ldr	r3, [pc, #320]	; (8004710 <UART_SetConfig+0x6f4>)
 80045d0:	fba3 2302 	umull	r2, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	469b      	mov	fp, r3
 80045de:	f04f 0c00 	mov.w	ip, #0
 80045e2:	46d9      	mov	r9, fp
 80045e4:	46e2      	mov	sl, ip
 80045e6:	eb19 0309 	adds.w	r3, r9, r9
 80045ea:	eb4a 040a 	adc.w	r4, sl, sl
 80045ee:	4699      	mov	r9, r3
 80045f0:	46a2      	mov	sl, r4
 80045f2:	eb19 090b 	adds.w	r9, r9, fp
 80045f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800460a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800460e:	4689      	mov	r9, r1
 8004610:	4692      	mov	sl, r2
 8004612:	eb1b 0509 	adds.w	r5, fp, r9
 8004616:	eb4c 060a 	adc.w	r6, ip, sl
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4619      	mov	r1, r3
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f04f 0400 	mov.w	r4, #0
 800462c:	0094      	lsls	r4, r2, #2
 800462e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004632:	008b      	lsls	r3, r1, #2
 8004634:	461a      	mov	r2, r3
 8004636:	4623      	mov	r3, r4
 8004638:	4628      	mov	r0, r5
 800463a:	4631      	mov	r1, r6
 800463c:	f7fb fe18 	bl	8000270 <__aeabi_uldivmod>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	461a      	mov	r2, r3
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <UART_SetConfig+0x6f4>)
 8004648:	fba3 1302 	umull	r1, r3, r3, r2
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	2164      	movs	r1, #100	; 0x64
 8004650:	fb01 f303 	mul.w	r3, r1, r3
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	3332      	adds	r3, #50	; 0x32
 800465a:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <UART_SetConfig+0x6f4>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004666:	4498      	add	r8, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	469b      	mov	fp, r3
 800466c:	f04f 0c00 	mov.w	ip, #0
 8004670:	46d9      	mov	r9, fp
 8004672:	46e2      	mov	sl, ip
 8004674:	eb19 0309 	adds.w	r3, r9, r9
 8004678:	eb4a 040a 	adc.w	r4, sl, sl
 800467c:	4699      	mov	r9, r3
 800467e:	46a2      	mov	sl, r4
 8004680:	eb19 090b 	adds.w	r9, r9, fp
 8004684:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004694:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004698:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800469c:	4689      	mov	r9, r1
 800469e:	4692      	mov	sl, r2
 80046a0:	eb1b 0509 	adds.w	r5, fp, r9
 80046a4:	eb4c 060a 	adc.w	r6, ip, sl
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4619      	mov	r1, r3
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	f04f 0400 	mov.w	r4, #0
 80046ba:	0094      	lsls	r4, r2, #2
 80046bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80046c0:	008b      	lsls	r3, r1, #2
 80046c2:	461a      	mov	r2, r3
 80046c4:	4623      	mov	r3, r4
 80046c6:	4628      	mov	r0, r5
 80046c8:	4631      	mov	r1, r6
 80046ca:	f7fb fdd1 	bl	8000270 <__aeabi_uldivmod>
 80046ce:	4603      	mov	r3, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <UART_SetConfig+0x6f4>)
 80046d6:	fba3 1302 	umull	r1, r3, r3, r2
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2164      	movs	r1, #100	; 0x64
 80046de:	fb01 f303 	mul.w	r3, r1, r3
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	3332      	adds	r3, #50	; 0x32
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <UART_SetConfig+0x6f4>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	f003 020f 	and.w	r2, r3, #15
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4442      	add	r2, r8
 80046fa:	609a      	str	r2, [r3, #8]
}
 80046fc:	e7ff      	b.n	80046fe <UART_SetConfig+0x6e2>
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004708:	40011000 	.word	0x40011000
 800470c:	40011400 	.word	0x40011400
 8004710:	51eb851f 	.word	0x51eb851f

08004714 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004714:	b084      	sub	sp, #16
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	f107 001c 	add.w	r0, r7, #28
 8004722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004728:	2b01      	cmp	r3, #1
 800472a:	d122      	bne.n	8004772 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f94a 	bl	8004a00 <USB_CoreReset>
 800476c:	4603      	mov	r3, r0
 800476e:	73fb      	strb	r3, [r7, #15]
 8004770:	e01a      	b.n	80047a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f93e 	bl	8004a00 <USB_CoreReset>
 8004784:	4603      	mov	r3, r0
 8004786:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004792:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
 800479a:	e005      	b.n	80047a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d10b      	bne.n	80047c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f043 0206 	orr.w	r2, r3, #6
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f043 0220 	orr.w	r2, r3, #32
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047d2:	b004      	add	sp, #16
 80047d4:	4770      	bx	lr

080047d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f043 0201 	orr.w	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 0201 	bic.w	r2, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e00b      	b.n	800485e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d106      	bne.n	800485a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
 8004858:	e001      	b.n	800485e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e003      	b.n	8004866 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800485e:	2032      	movs	r0, #50	; 0x32
 8004860:	f7fb fef8 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	f043 0220 	orr.w	r2, r3, #32
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <USB_FlushTxFifo+0x48>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e006      	b.n	80048aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d0f0      	beq.n	800488a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	00030d40 	.word	0x00030d40

080048bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2210      	movs	r2, #16
 80048cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <USB_FlushRxFifo+0x40>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e006      	b.n	80048ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d0f0      	beq.n	80048ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	00030d40 	.word	0x00030d40

08004900 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004900:	b480      	push	{r7}
 8004902:	b089      	sub	sp, #36	; 0x24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4611      	mov	r1, r2
 800490c:	461a      	mov	r2, r3
 800490e:	460b      	mov	r3, r1
 8004910:	71fb      	strb	r3, [r7, #7]
 8004912:	4613      	mov	r3, r2
 8004914:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800491e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004922:	2b00      	cmp	r3, #0
 8004924:	d11a      	bne.n	800495c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004926:	88bb      	ldrh	r3, [r7, #4]
 8004928:	3303      	adds	r3, #3
 800492a:	089b      	lsrs	r3, r3, #2
 800492c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e00f      	b.n	8004954 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	031a      	lsls	r2, r3, #12
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	4413      	add	r3, r2
 800493c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004940:	461a      	mov	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	3304      	adds	r3, #4
 800494c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	3301      	adds	r3, #1
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3eb      	bcc.n	8004934 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3724      	adds	r7, #36	; 0x24
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800496a:	b480      	push	{r7}
 800496c:	b089      	sub	sp, #36	; 0x24
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	4613      	mov	r3, r2
 8004976:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	3303      	adds	r3, #3
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004988:	2300      	movs	r3, #0
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e00b      	b.n	80049a6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	601a      	str	r2, [r3, #0]
    pDest++;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3304      	adds	r3, #4
 800499e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	3301      	adds	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d3ef      	bcc.n	800498e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80049ae:	69fb      	ldr	r3, [r7, #28]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3724      	adds	r7, #36	; 0x24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f003 0301 	and.w	r3, r3, #1
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <USB_CoreReset+0x64>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e01b      	b.n	8004a56 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	daf2      	bge.n	8004a0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <USB_CoreReset+0x64>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e006      	b.n	8004a56 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d0f0      	beq.n	8004a36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	00030d40 	.word	0x00030d40

08004a68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a68:	b084      	sub	sp, #16
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	f107 001c 	add.w	r0, r7, #28
 8004a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d018      	beq.n	8004aec <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d10a      	bne.n	8004ad6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e014      	b.n	8004b00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e009      	b.n	8004b00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004afa:	f023 0304 	bic.w	r3, r3, #4
 8004afe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004b00:	2110      	movs	r1, #16
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff feb4 	bl	8004870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fed7 	bl	80048bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e015      	b.n	8004b40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	461a      	mov	r2, r3
 8004b22:	f04f 33ff 	mov.w	r3, #4294967295
 8004b26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b34:	461a      	mov	r2, r3
 8004b36:	2300      	movs	r3, #0
 8004b38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3e5      	bcc.n	8004b14 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004b48:	2101      	movs	r1, #1
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8ac 	bl	8004ca8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004b50:	20c8      	movs	r0, #200	; 0xc8
 8004b52:	f7fb fd7f 	bl	8000654 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b62:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <USB_HostInit+0x164>)
 8004b7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <USB_HostInit+0x168>)
 8004b82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b86:	e009      	b.n	8004b9c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2280      	movs	r2, #128	; 0x80
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a10      	ldr	r2, [pc, #64]	; (8004bd4 <USB_HostInit+0x16c>)
 8004b92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <USB_HostInit+0x170>)
 8004b98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d105      	bne.n	8004bae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f043 0210 	orr.w	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <USB_HostInit+0x174>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bc6:	b004      	add	sp, #16
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	01000200 	.word	0x01000200
 8004bd0:	00e00300 	.word	0x00e00300
 8004bd4:	00600080 	.word	0x00600080
 8004bd8:	004000e0 	.word	0x004000e0
 8004bdc:	a3200008 	.word	0xa3200008

08004be0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	68f9      	ldr	r1, [r7, #12]
 8004c14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c2e:	6053      	str	r3, [r2, #4]
 8004c30:	e009      	b.n	8004c46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d106      	bne.n	8004c46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c84:	2064      	movs	r0, #100	; 0x64
 8004c86:	f7fb fce5 	bl	8000654 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c98:	200a      	movs	r0, #10
 8004c9a:	f7fb fcdb 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ccc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <USB_DriveVbus+0x44>
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d106      	bne.n	8004cec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ce6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf6:	d109      	bne.n	8004d0c <USB_DriveVbus+0x64>
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	0c5b      	lsrs	r3, r3, #17
 8004d38:	f003 0303 	and.w	r3, r3, #3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	b29b      	uxth	r3, r3
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	4608      	mov	r0, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	70fb      	strb	r3, [r7, #3]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70bb      	strb	r3, [r7, #2]
 8004d82:	4613      	mov	r3, r2
 8004d84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004da0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004da2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d87e      	bhi.n	8004ea8 <USB_HC_Init+0x13c>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <USB_HC_Init+0x44>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004e6b 	.word	0x08004e6b
 8004db8:	08004dc1 	.word	0x08004dc1
 8004dbc:	08004e2d 	.word	0x08004e2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f240 439d 	movw	r3, #1181	; 0x49d
 8004dd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da10      	bge.n	8004dfe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	78fa      	ldrb	r2, [r7, #3]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004dfc:	e057      	b.n	8004eae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d051      	beq.n	8004eae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	0151      	lsls	r1, r2, #5
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	440a      	add	r2, r1
 8004e20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e28:	60d3      	str	r3, [r2, #12]
      break;
 8004e2a:	e040      	b.n	8004eae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da34      	bge.n	8004eb2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	78fa      	ldrb	r2, [r7, #3]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e68:	e023      	b.n	8004eb2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	461a      	mov	r2, r3
 8004e78:	f240 2325 	movw	r3, #549	; 0x225
 8004e7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da17      	bge.n	8004eb6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004ea4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004ea6:	e006      	b.n	8004eb6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004eac:	e004      	b.n	8004eb8 <USB_HC_Init+0x14c>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <USB_HC_Init+0x14c>
      break;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <USB_HC_Init+0x14c>
      break;
 8004eb6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ebe:	699a      	ldr	r2, [r3, #24]
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ee2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da03      	bge.n	8004ef2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e001      	b.n	8004ef6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004ef6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d103      	bne.n	8004f06 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e001      	b.n	8004f0a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f0a:	787b      	ldrb	r3, [r7, #1]
 8004f0c:	059b      	lsls	r3, r3, #22
 8004f0e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f12:	78bb      	ldrb	r3, [r7, #2]
 8004f14:	02db      	lsls	r3, r3, #11
 8004f16:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f1a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f20:	049b      	lsls	r3, r3, #18
 8004f22:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f26:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f2e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	0159      	lsls	r1, r3, #5
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f40:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f46:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004f48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d10f      	bne.n	8004f70 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f6e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	371c      	adds	r7, #28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop

08004f80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d028      	beq.n	8004ffc <USB_HC_StartXfer+0x7c>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	791b      	ldrb	r3, [r3, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d124      	bne.n	8004ffc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10b      	bne.n	8004fd0 <USB_HC_StartXfer+0x50>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	795b      	ldrb	r3, [r3, #5]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d107      	bne.n	8004fd0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 fa2e 	bl	8005428 <USB_DoPing>
      return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	e112      	b.n	80051f6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d112      	bne.n	8004ffc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004ff4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d018      	beq.n	8005036 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	8912      	ldrh	r2, [r2, #8]
 800500c:	4413      	add	r3, r2
 800500e:	3b01      	subs	r3, #1
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	8912      	ldrh	r2, [r2, #8]
 8005014:	fbb3 f3f2 	udiv	r3, r3, r2
 8005018:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800501a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800501c:	8b7b      	ldrh	r3, [r7, #26]
 800501e:	429a      	cmp	r2, r3
 8005020:	d90b      	bls.n	800503a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005022:	8b7b      	ldrh	r3, [r7, #26]
 8005024:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005026:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	8912      	ldrh	r2, [r2, #8]
 800502c:	fb02 f203 	mul.w	r2, r2, r3
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	611a      	str	r2, [r3, #16]
 8005034:	e001      	b.n	800503a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005036:	2301      	movs	r3, #1
 8005038:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	78db      	ldrb	r3, [r3, #3]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d006      	beq.n	8005050 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	8912      	ldrh	r2, [r2, #8]
 8005048:	fb02 f203 	mul.w	r2, r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005058:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800505a:	04d9      	lsls	r1, r3, #19
 800505c:	4b68      	ldr	r3, [pc, #416]	; (8005200 <USB_HC_StartXfer+0x280>)
 800505e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005060:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	7a9b      	ldrb	r3, [r3, #10]
 8005066:	075b      	lsls	r3, r3, #29
 8005068:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800506c:	69f9      	ldr	r1, [r7, #28]
 800506e:	0148      	lsls	r0, r1, #5
 8005070:	6a39      	ldr	r1, [r7, #32]
 8005072:	4401      	add	r1, r0
 8005074:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005078:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800507a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	68d9      	ldr	r1, [r3, #12]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	460a      	mov	r2, r1
 8005094:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	6a3a      	ldr	r2, [r7, #32]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	7e7b      	ldrb	r3, [r7, #25]
 80050de:	075b      	lsls	r3, r3, #29
 80050e0:	69f9      	ldr	r1, [r7, #28]
 80050e2:	0148      	lsls	r0, r1, #5
 80050e4:	6a39      	ldr	r1, [r7, #32]
 80050e6:	4401      	add	r1, r0
 80050e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a41      	ldr	r2, [pc, #260]	; (8005204 <USB_HC_StartXfer+0x284>)
 8005100:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005102:	4b40      	ldr	r3, [pc, #256]	; (8005204 <USB_HC_StartXfer+0x284>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800510a:	4a3e      	ldr	r2, [pc, #248]	; (8005204 <USB_HC_StartXfer+0x284>)
 800510c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	78db      	ldrb	r3, [r3, #3]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005116:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <USB_HC_StartXfer+0x284>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511e:	4a39      	ldr	r2, [pc, #228]	; (8005204 <USB_HC_StartXfer+0x284>)
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e005      	b.n	8005130 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005124:	4b37      	ldr	r3, [pc, #220]	; (8005204 <USB_HC_StartXfer+0x284>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800512c:	4a35      	ldr	r2, [pc, #212]	; (8005204 <USB_HC_StartXfer+0x284>)
 800512e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005130:	4b34      	ldr	r3, [pc, #208]	; (8005204 <USB_HC_StartXfer+0x284>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005138:	4a32      	ldr	r2, [pc, #200]	; (8005204 <USB_HC_StartXfer+0x284>)
 800513a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	461a      	mov	r2, r3
 800514a:	4b2e      	ldr	r3, [pc, #184]	; (8005204 <USB_HC_StartXfer+0x284>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d14e      	bne.n	80051f4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	78db      	ldrb	r3, [r3, #3]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d14a      	bne.n	80051f4 <USB_HC_StartXfer+0x274>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d046      	beq.n	80051f4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	79db      	ldrb	r3, [r3, #7]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d830      	bhi.n	80051d0 <USB_HC_StartXfer+0x250>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <USB_HC_StartXfer+0x1f4>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005185 	.word	0x08005185
 8005178:	080051a9 	.word	0x080051a9
 800517c:	08005185 	.word	0x08005185
 8005180:	080051a9 	.word	0x080051a9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	3303      	adds	r3, #3
 800518a:	089b      	lsrs	r3, r3, #2
 800518c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800518e:	8afa      	ldrh	r2, [r7, #22]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	b29b      	uxth	r3, r3
 8005196:	429a      	cmp	r2, r3
 8005198:	d91c      	bls.n	80051d4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	619a      	str	r2, [r3, #24]
          }
          break;
 80051a6:	e015      	b.n	80051d4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	3303      	adds	r3, #3
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80051b2:	8afa      	ldrh	r2, [r7, #22]
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	429a      	cmp	r2, r3
 80051c0:	d90a      	bls.n	80051d8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	619a      	str	r2, [r3, #24]
          }
          break;
 80051ce:	e003      	b.n	80051d8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80051d0:	bf00      	nop
 80051d2:	e002      	b.n	80051da <USB_HC_StartXfer+0x25a>
          break;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <USB_HC_StartXfer+0x25a>
          break;
 80051d8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	785a      	ldrb	r2, [r3, #1]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	b298      	uxth	r0, r3
 80051e8:	2300      	movs	r3, #0
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff fb86 	bl	8004900 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3728      	adds	r7, #40	; 0x28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	1ff80000 	.word	0x1ff80000
 8005204:	200000b0 	.word	0x200000b0

08005208 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	b29b      	uxth	r3, r3
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800522a:	b480      	push	{r7}
 800522c:	b087      	sub	sp, #28
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800523a:	78fb      	ldrb	r3, [r7, #3]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	0c9b      	lsrs	r3, r3, #18
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <USB_HC_Halt+0x3a>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d16c      	bne.n	800533e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005282:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d143      	bne.n	8005318 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052ee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	3301      	adds	r3, #1
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052fc:	d81d      	bhi.n	800533a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	4413      	add	r3, r2
 8005306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005314:	d0ec      	beq.n	80052f0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005316:	e080      	b.n	800541a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4413      	add	r3, r2
 8005320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	0151      	lsls	r1, r2, #5
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	440a      	add	r2, r1
 800532e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005332:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005336:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005338:	e06f      	b.n	800541a <USB_HC_Halt+0x1f0>
          break;
 800533a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800533c:	e06d      	b.n	800541a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	4413      	add	r3, r2
 8005346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	440a      	add	r2, r1
 8005354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800535c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d143      	bne.n	80053f6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	440a      	add	r2, r1
 8005384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800538c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	4413      	add	r3, r2
 8005396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	0151      	lsls	r1, r2, #5
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	440a      	add	r2, r1
 80053c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053cc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	3301      	adds	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053da:	d81d      	bhi.n	8005418 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f2:	d0ec      	beq.n	80053ce <USB_HC_Halt+0x1a4>
 80053f4:	e011      	b.n	800541a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	440a      	add	r2, r1
 800540c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e000      	b.n	800541a <USB_HC_Halt+0x1f0>
          break;
 8005418:	bf00      	nop
    }
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	371c      	adds	r7, #28
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800543c:	2301      	movs	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	04da      	lsls	r2, r3, #19
 8005444:	4b15      	ldr	r3, [pc, #84]	; (800549c <USB_DoPing+0x74>)
 8005446:	4013      	ands	r3, r2
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	440a      	add	r2, r1
 8005450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005458:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005470:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005478:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	1ff80000 	.word	0x1ff80000

080054a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff f9a1 	bl	80047f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80054b6:	2110      	movs	r1, #16
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff f9d9 	bl	8004870 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff f9fc 	bl	80048bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054c4:	2300      	movs	r3, #0
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	e01f      	b.n	800550a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	461a      	mov	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	3301      	adds	r3, #1
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b0f      	cmp	r3, #15
 800550e:	d9dc      	bls.n	80054ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e034      	b.n	8005580 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800552c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005534:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800553c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	461a      	mov	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	3301      	adds	r3, #1
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800555c:	d80c      	bhi.n	8005578 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005574:	d0ec      	beq.n	8005550 <USB_StopHost+0xb0>
 8005576:	e000      	b.n	800557a <USB_StopHost+0xda>
        break;
 8005578:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	3301      	adds	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b0f      	cmp	r3, #15
 8005584:	d9c7      	bls.n	8005516 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558c:	461a      	mov	r2, r3
 800558e:	f04f 33ff 	mov.w	r3, #4294967295
 8005592:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f04f 32ff 	mov.w	r2, #4294967295
 800559a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff f91a 	bl	80047d6 <USB_EnableGlobalInt>

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80055ac:	b590      	push	{r4, r7, lr}
 80055ae:	b089      	sub	sp, #36	; 0x24
 80055b0:	af04      	add	r7, sp, #16
 80055b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80055b4:	2302      	movs	r3, #2
 80055b6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80055b8:	2301      	movs	r3, #1
 80055ba:	2202      	movs	r2, #2
 80055bc:	2102      	movs	r1, #2
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fc3a 	bl	8005e38 <USBH_FindInterface>
 80055c4:	4603      	mov	r3, r0
 80055c6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	2bff      	cmp	r3, #255	; 0xff
 80055cc:	f000 812a 	beq.w	8005824 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fc13 	bl	8005e00 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80055e0:	2050      	movs	r0, #80	; 0x50
 80055e2:	f002 ff59 	bl	8008498 <malloc>
 80055e6:	4603      	mov	r3, r0
 80055e8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	211a      	movs	r1, #26
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	b25b      	sxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	da15      	bge.n	8005638 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	211a      	movs	r1, #26
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800561c:	781a      	ldrb	r2, [r3, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005622:	7bbb      	ldrb	r3, [r7, #14]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	211a      	movs	r1, #26
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005632:	881a      	ldrh	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f001 fd21 	bl	8007086 <USBH_AllocPipe>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	7819      	ldrb	r1, [r3, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	7858      	ldrb	r0, [r3, #1]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	8952      	ldrh	r2, [r2, #10]
 8005664:	9202      	str	r2, [sp, #8]
 8005666:	2203      	movs	r2, #3
 8005668:	9201      	str	r2, [sp, #4]
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	4623      	mov	r3, r4
 800566e:	4602      	mov	r2, r0
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fcd9 	bl	8007028 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f002 fe30 	bl	80082e4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005684:	2300      	movs	r3, #0
 8005686:	2200      	movs	r2, #0
 8005688:	210a      	movs	r1, #10
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fbd4 	bl	8005e38 <USBH_FindInterface>
 8005690:	4603      	mov	r3, r0
 8005692:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005694:	7bbb      	ldrb	r3, [r7, #14]
 8005696:	2bff      	cmp	r3, #255	; 0xff
 8005698:	f000 80c4 	beq.w	8005824 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800569c:	7bbb      	ldrb	r3, [r7, #14]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	211a      	movs	r1, #26
 80056a2:	fb01 f303 	mul.w	r3, r1, r3
 80056a6:	4413      	add	r3, r2
 80056a8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b25b      	sxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	da16      	bge.n	80056e2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056b4:	7bbb      	ldrb	r3, [r7, #14]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	211a      	movs	r1, #26
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056ca:	7bbb      	ldrb	r3, [r7, #14]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	211a      	movs	r1, #26
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	835a      	strh	r2, [r3, #26]
 80056e0:	e015      	b.n	800570e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	211a      	movs	r1, #26
 80056e8:	fb01 f303 	mul.w	r3, r1, r3
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80056f2:	781a      	ldrb	r2, [r3, #0]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	211a      	movs	r1, #26
 80056fe:	fb01 f303 	mul.w	r3, r1, r3
 8005702:	4413      	add	r3, r2
 8005704:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005708:	881a      	ldrh	r2, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800570e:	7bbb      	ldrb	r3, [r7, #14]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	211a      	movs	r1, #26
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	4413      	add	r3, r2
 800571a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b25b      	sxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	da16      	bge.n	8005754 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	211a      	movs	r1, #26
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800573c:	7bbb      	ldrb	r3, [r7, #14]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	211a      	movs	r1, #26
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800574c:	881a      	ldrh	r2, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	835a      	strh	r2, [r3, #26]
 8005752:	e015      	b.n	8005780 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005754:	7bbb      	ldrb	r3, [r7, #14]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	211a      	movs	r1, #26
 800575a:	fb01 f303 	mul.w	r3, r1, r3
 800575e:	4413      	add	r3, r2
 8005760:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005764:	781a      	ldrb	r2, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800576a:	7bbb      	ldrb	r3, [r7, #14]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	211a      	movs	r1, #26
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	4413      	add	r3, r2
 8005776:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800577a:	881a      	ldrh	r2, [r3, #0]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	7b9b      	ldrb	r3, [r3, #14]
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fc7d 	bl	8007086 <USBH_AllocPipe>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	7bdb      	ldrb	r3, [r3, #15]
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fc73 	bl	8007086 <USBH_AllocPipe>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	7b59      	ldrb	r1, [r3, #13]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	7b98      	ldrb	r0, [r3, #14]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	8b12      	ldrh	r2, [r2, #24]
 80057c0:	9202      	str	r2, [sp, #8]
 80057c2:	2202      	movs	r2, #2
 80057c4:	9201      	str	r2, [sp, #4]
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	4623      	mov	r3, r4
 80057ca:	4602      	mov	r2, r0
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 fc2b 	bl	8007028 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	7b19      	ldrb	r1, [r3, #12]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	7bd8      	ldrb	r0, [r3, #15]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	8b52      	ldrh	r2, [r2, #26]
 80057ea:	9202      	str	r2, [sp, #8]
 80057ec:	2202      	movs	r2, #2
 80057ee:	9201      	str	r2, [sp, #4]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4623      	mov	r3, r4
 80057f4:	4602      	mov	r2, r0
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fc16 	bl	8007028 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	7b5b      	ldrb	r3, [r3, #13]
 8005808:	2200      	movs	r2, #0
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f002 fd69 	bl	80082e4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	7b1b      	ldrb	r3, [r3, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 fd62 	bl	80082e4 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005820:	2300      	movs	r3, #0
 8005822:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bd90      	pop	{r4, r7, pc}

0800582e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fc09 	bl	8007066 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f001 fc31 	bl	80070c2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	7b1b      	ldrb	r3, [r3, #12]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	7b1b      	ldrb	r3, [r3, #12]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 fbf6 	bl	8007066 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	7b1b      	ldrb	r3, [r3, #12]
 800587e:	4619      	mov	r1, r3
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fc1e 	bl	80070c2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	7b5b      	ldrb	r3, [r3, #13]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00e      	beq.n	80058b2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	7b5b      	ldrb	r3, [r3, #13]
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fbe3 	bl	8007066 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	7b5b      	ldrb	r3, [r3, #13]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fc0b 	bl	80070c2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00b      	beq.n	80058d6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f002 fdee 	bl	80084a8 <free>
    phost->pActiveClass->pData = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058d2:	2200      	movs	r2, #0
 80058d4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80058e8:	2302      	movs	r3, #2
 80058ea:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058f2:	69db      	ldr	r3, [r3, #28]
 80058f4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	3340      	adds	r3, #64	; 0x40
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f8b2 	bl	8005a66 <GetLineCoding>
 8005902:	4603      	mov	r3, r0
 8005904:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005912:	2102      	movs	r1, #2
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
  }
  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005944:	2b04      	cmp	r3, #4
 8005946:	d877      	bhi.n	8005a38 <USBH_CDC_Process+0x114>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <USBH_CDC_Process+0x2c>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005965 	.word	0x08005965
 8005954:	0800596b 	.word	0x0800596b
 8005958:	0800599b 	.word	0x0800599b
 800595c:	08005a0f 	.word	0x08005a0f
 8005960:	08005a1d 	.word	0x08005a1d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	73fb      	strb	r3, [r7, #15]
    break;
 8005968:	e06d      	b.n	8005a46 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f897 	bl	8005aa4 <SetLineCoding>
 8005976:	4603      	mov	r3, r0
 8005978:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005988:	e058      	b.n	8005a3c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800598a:	7bbb      	ldrb	r3, [r7, #14]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d055      	beq.n	8005a3c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2204      	movs	r2, #4
 8005994:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005998:	e050      	b.n	8005a3c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	3340      	adds	r3, #64	; 0x40
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f860 	bl	8005a66 <GetLineCoding>
 80059a6:	4603      	mov	r3, r0
 80059a8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80059aa:	7bbb      	ldrb	r3, [r7, #14]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d126      	bne.n	80059fe <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c2:	791b      	ldrb	r3, [r3, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d13b      	bne.n	8005a40 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d133      	bne.n	8005a40 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d12b      	bne.n	8005a40 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d124      	bne.n	8005a40 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f95a 	bl	8005cb0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80059fc:	e020      	b.n	8005a40 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80059fe:	7bbb      	ldrb	r3, [r7, #14]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d01d      	beq.n	8005a40 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2204      	movs	r2, #4
 8005a08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005a0c:	e018      	b.n	8005a40 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f867 	bl	8005ae2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f8dc 	bl	8005bd2 <CDC_ProcessReception>
    break;
 8005a1a:	e014      	b.n	8005a46 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fece 	bl	80067c0 <USBH_ClrFeature>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005a36:	e005      	b.n	8005a44 <USBH_CDC_Process+0x120>

  default:
    break;
 8005a38:	bf00      	nop
 8005a3a:	e004      	b.n	8005a46 <USBH_CDC_Process+0x122>
    break;
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <USBH_CDC_Process+0x122>
    break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <USBH_CDC_Process+0x122>
    break;
 8005a44:	bf00      	nop

  }

  return status;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	22a1      	movs	r2, #161	; 0xa1
 8005a74:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2221      	movs	r2, #33	; 0x21
 8005a7a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2207      	movs	r2, #7
 8005a8c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2207      	movs	r2, #7
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f001 f873 	bl	8006b80 <USBH_CtlReq>
 8005a9a:	4603      	mov	r3, r0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2221      	movs	r2, #33	; 0x21
 8005ab2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2207      	movs	r2, #7
 8005aca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2207      	movs	r2, #7
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f001 f854 	bl	8006b80 <USBH_CtlReq>
 8005ad8:	4603      	mov	r3, r0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b086      	sub	sp, #24
 8005ae6:	af02      	add	r7, sp, #8
 8005ae8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005af4:	2300      	movs	r3, #0
 8005af6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d002      	beq.n	8005b08 <CDC_ProcessTransmission+0x26>
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d025      	beq.n	8005b52 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005b06:	e060      	b.n	8005bca <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	8b12      	ldrh	r2, [r2, #24]
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d90c      	bls.n	8005b2e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	69d9      	ldr	r1, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8b1a      	ldrh	r2, [r3, #24]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	7b58      	ldrb	r0, [r3, #13]
 8005b20:	2301      	movs	r3, #1
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	4603      	mov	r3, r0
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 fa3b 	bl	8006fa2 <USBH_BulkSendData>
 8005b2c:	e00c      	b.n	8005b48 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	7b58      	ldrb	r0, [r3, #13]
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4603      	mov	r3, r0
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 fa2d 	bl	8006fa2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b50:	e03b      	b.n	8005bca <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	7b5b      	ldrb	r3, [r3, #13]
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f002 fb99 	bl	8008290 <USBH_LL_GetURBState>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005b62:	7afb      	ldrb	r3, [r7, #11]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d128      	bne.n	8005bba <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	8b12      	ldrh	r2, [r2, #24]
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d90e      	bls.n	8005b92 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	8b12      	ldrh	r2, [r2, #24]
 8005b7c:	1a9a      	subs	r2, r3, r2
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	8b12      	ldrh	r2, [r2, #24]
 8005b8a:	441a      	add	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	61da      	str	r2, [r3, #28]
 8005b90:	e002      	b.n	8005b98 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005ba8:	e00e      	b.n	8005bc8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f868 	bl	8005c88 <USBH_CDC_TransmitCallback>
    break;
 8005bb8:	e006      	b.n	8005bc8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005bba:	7afb      	ldrb	r3, [r7, #11]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d103      	bne.n	8005bc8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005bc8:	bf00      	nop
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d002      	beq.n	8005bf8 <CDC_ProcessReception+0x26>
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d00e      	beq.n	8005c14 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005bf6:	e043      	b.n	8005c80 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6a19      	ldr	r1, [r3, #32]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	8b5a      	ldrh	r2, [r3, #26]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	7b1b      	ldrb	r3, [r3, #12]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f9f1 	bl	8006fec <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005c12:	e035      	b.n	8005c80 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	7b1b      	ldrb	r3, [r3, #12]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f002 fb38 	bl	8008290 <USBH_LL_GetURBState>
 8005c20:	4603      	mov	r3, r0
 8005c22:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005c24:	7cfb      	ldrb	r3, [r7, #19]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d129      	bne.n	8005c7e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	7b1b      	ldrb	r3, [r3, #12]
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f002 fa9b 	bl	800816c <USBH_LL_GetLastXferSize>
 8005c36:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d016      	beq.n	8005c70 <CDC_ProcessReception+0x9e>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	8b5b      	ldrh	r3, [r3, #26]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d910      	bls.n	8005c70 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	1ad2      	subs	r2, r2, r3
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	441a      	add	r2, r3
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005c6e:	e006      	b.n	8005c7e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f80f 	bl	8005c9c <USBH_CDC_ReceiveCallback>
    break;
 8005c7e:	bf00      	nop
  }
}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]

}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]

}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e019      	b.n	8005d10 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	79fa      	ldrb	r2, [r7, #7]
 8005ce0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f80f 	bl	8005d18 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d003      	beq.n	8005d08 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f002 f97d 	bl	8008008 <USBH_LL_Init>

  return USBH_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005d24:	e008      	b.n	8005d38 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	32e0      	adds	r2, #224	; 0xe0
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2b0e      	cmp	r3, #14
 8005d3c:	d9f3      	bls.n	8005d26 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e009      	b.n	8005d58 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5e:	d3f1      	bcc.n	8005d44 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2240      	movs	r2, #64	; 0x40
 8005d84:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d017      	beq.n	8005dee <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10f      	bne.n	8005de8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dce:	1c59      	adds	r1, r3, #1
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	33dc      	adds	r3, #220	; 0xdc
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	73fb      	strb	r3, [r7, #15]
 8005de6:	e004      	b.n	8005df2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005de8:	2302      	movs	r3, #2
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e001      	b.n	8005df2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005dee:	2302      	movs	r3, #2
 8005df0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d204      	bcs.n	8005e26 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005e24:	e001      	b.n	8005e2a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e26:	2302      	movs	r3, #2
 8005e28:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	4608      	mov	r0, r1
 8005e42:	4611      	mov	r1, r2
 8005e44:	461a      	mov	r2, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	70fb      	strb	r3, [r7, #3]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	70bb      	strb	r3, [r7, #2]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005e60:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e62:	e025      	b.n	8005eb0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	221a      	movs	r2, #26
 8005e68:	fb02 f303 	mul.w	r3, r2, r3
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	3302      	adds	r3, #2
 8005e74:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	795b      	ldrb	r3, [r3, #5]
 8005e7a:	78fa      	ldrb	r2, [r7, #3]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d002      	beq.n	8005e86 <USBH_FindInterface+0x4e>
 8005e80:	78fb      	ldrb	r3, [r7, #3]
 8005e82:	2bff      	cmp	r3, #255	; 0xff
 8005e84:	d111      	bne.n	8005eaa <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005e8a:	78ba      	ldrb	r2, [r7, #2]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d002      	beq.n	8005e96 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e90:	78bb      	ldrb	r3, [r7, #2]
 8005e92:	2bff      	cmp	r3, #255	; 0xff
 8005e94:	d109      	bne.n	8005eaa <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e9a:	787a      	ldrb	r2, [r7, #1]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d002      	beq.n	8005ea6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ea0:	787b      	ldrb	r3, [r7, #1]
 8005ea2:	2bff      	cmp	r3, #255	; 0xff
 8005ea4:	d101      	bne.n	8005eaa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	e006      	b.n	8005eb8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	3301      	adds	r3, #1
 8005eae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005eb0:	7dfb      	ldrb	r3, [r7, #23]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d9d6      	bls.n	8005e64 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005eb6:	23ff      	movs	r3, #255	; 0xff
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f002 f8d7 	bl	8008080 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f002 f9ee 	bl	80082b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af04      	add	r7, sp, #16
 8005eea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005eec:	2302      	movs	r3, #2
 8005eee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 faec 	bl	80064d2 <USBH_IsPortEnabled>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d10c      	bne.n	8005f1a <USBH_Process+0x36>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b03      	cmp	r3, #3
 8005f12:	d002      	beq.n	8005f1a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2203      	movs	r2, #3
 8005f18:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b0b      	cmp	r3, #11
 8005f22:	f200 814c 	bhi.w	80061be <USBH_Process+0x2da>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <USBH_Process+0x48>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f5d 	.word	0x08005f5d
 8005f30:	08005f7f 	.word	0x08005f7f
 8005f34:	08005f93 	.word	0x08005f93
 8005f38:	08006199 	.word	0x08006199
 8005f3c:	080061bf 	.word	0x080061bf
 8005f40:	08006021 	.word	0x08006021
 8005f44:	0800614f 	.word	0x0800614f
 8005f48:	08006051 	.word	0x08006051
 8005f4c:	08006071 	.word	0x08006071
 8005f50:	08006091 	.word	0x08006091
 8005f54:	080060bf 	.word	0x080060bf
 8005f58:	08006181 	.word	0x08006181
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 812c 	beq.w	80061c2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005f70:	20c8      	movs	r0, #200	; 0xc8
 8005f72:	f002 f9ea 	bl	800834a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f002 f8dd 	bl	8008136 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005f7c:	e121      	b.n	80061c2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 811e 	bne.w	80061c6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005f90:	e119      	b.n	80061c6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005f92:	2064      	movs	r0, #100	; 0x64
 8005f94:	f002 f9d9 	bl	800834a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f002 f8a7 	bl	80080ec <USBH_LL_GetSpeed>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2205      	movs	r2, #5
 8005fac:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 f868 	bl	8007086 <USBH_AllocPipe>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005fbe:	2180      	movs	r1, #128	; 0x80
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f001 f860 	bl	8007086 <USBH_AllocPipe>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	7919      	ldrb	r1, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	9202      	str	r2, [sp, #8]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	9201      	str	r2, [sp, #4]
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	4603      	mov	r3, r0
 8005fee:	2280      	movs	r2, #128	; 0x80
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f819 	bl	8007028 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7959      	ldrb	r1, [r3, #5]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800600a:	b292      	uxth	r2, r2
 800600c:	9202      	str	r2, [sp, #8]
 800600e:	2200      	movs	r2, #0
 8006010:	9201      	str	r2, [sp, #4]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	4603      	mov	r3, r0
 8006016:	2200      	movs	r2, #0
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 f805 	bl	8007028 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800601e:	e0e3      	b.n	80061e8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f8e7 	bl	80061f4 <USBH_HandleEnum>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 80ce 	bne.w	80061ca <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800603c:	2b01      	cmp	r3, #1
 800603e:	d103      	bne.n	8006048 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2208      	movs	r2, #8
 8006044:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006046:	e0c0      	b.n	80061ca <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2207      	movs	r2, #7
 800604c:	701a      	strb	r2, [r3, #0]
    break;
 800604e:	e0bc      	b.n	80061ca <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80b9 	beq.w	80061ce <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2208      	movs	r2, #8
 800606c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800606e:	e0ae      	b.n	80061ce <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006076:	b29b      	uxth	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fb59 	bl	8006732 <USBH_SetCfg>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 80a5 	bne.w	80061d2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2209      	movs	r2, #9
 800608c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800608e:	e0a0      	b.n	80061d2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800609e:	2101      	movs	r1, #1
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fb69 	bl	8006778 <USBH_SetFeature>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f040 8094 	bne.w	80061d6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	220a      	movs	r2, #10
 80060b2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80060b4:	e08f      	b.n	80061d6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	220a      	movs	r2, #10
 80060ba:	701a      	strb	r2, [r3, #0]
    break;
 80060bc:	e08b      	b.n	80061d6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8088 	beq.w	80061da <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060d2:	2300      	movs	r3, #0
 80060d4:	73fb      	strb	r3, [r7, #15]
 80060d6:	e017      	b.n	8006108 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	33dc      	adds	r3, #220	; 0xdc
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	791a      	ldrb	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d108      	bne.n	8006102 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	33dc      	adds	r3, #220	; 0xdc
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	3301      	adds	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0e4      	beq.n	80060d8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006114:	2b00      	cmp	r3, #0
 8006116:	d016      	beq.n	8006146 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2206      	movs	r2, #6
 800612e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006136:	2103      	movs	r1, #3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800613c:	e04d      	b.n	80061da <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	220d      	movs	r2, #13
 8006142:	701a      	strb	r2, [r3, #0]
    break;
 8006144:	e049      	b.n	80061da <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	220d      	movs	r2, #13
 800614a:	701a      	strb	r2, [r3, #0]
    break;
 800614c:	e045      	b.n	80061da <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
 8006164:	4603      	mov	r3, r0
 8006166:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006168:	7bbb      	ldrb	r3, [r7, #14]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d136      	bne.n	80061de <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	220b      	movs	r2, #11
 8006174:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006176:	e032      	b.n	80061de <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	220d      	movs	r2, #13
 800617c:	701a      	strb	r2, [r3, #0]
    break;
 800617e:	e02e      	b.n	80061de <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006186:	2b00      	cmp	r3, #0
 8006188:	d02b      	beq.n	80061e2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
    }
    break;
 8006196:	e024      	b.n	80061e2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7ff fdbd 	bl	8005d18 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d01e      	beq.n	80061e6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80061bc:	e013      	b.n	80061e6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80061be:	bf00      	nop
 80061c0:	e012      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061c2:	bf00      	nop
 80061c4:	e010      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061c6:	bf00      	nop
 80061c8:	e00e      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061ca:	bf00      	nop
 80061cc:	e00c      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061ce:	bf00      	nop
 80061d0:	e00a      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061d2:	bf00      	nop
 80061d4:	e008      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061d6:	bf00      	nop
 80061d8:	e006      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061da:	bf00      	nop
 80061dc:	e004      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061de:	bf00      	nop
 80061e0:	e002      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <USBH_Process+0x304>
    break;
 80061e6:	bf00      	nop
  }
 return USBH_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop

080061f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af04      	add	r7, sp, #16
 80061fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	785b      	ldrb	r3, [r3, #1]
 8006204:	2b07      	cmp	r3, #7
 8006206:	f200 80f8 	bhi.w	80063fa <USBH_HandleEnum+0x206>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <USBH_HandleEnum+0x1c>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006231 	.word	0x08006231
 8006214:	080062a3 	.word	0x080062a3
 8006218:	080062bb 	.word	0x080062bb
 800621c:	08006331 	.word	0x08006331
 8006220:	08006347 	.word	0x08006347
 8006224:	08006363 	.word	0x08006363
 8006228:	08006397 	.word	0x08006397
 800622c:	080063cb 	.word	0x080063cb
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006230:	2108      	movs	r1, #8
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9ad 	bl	8006592 <USBH_Get_DevDesc>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 80df 	bne.w	80063fe <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	7919      	ldrb	r1, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006264:	b292      	uxth	r2, r2
 8006266:	9202      	str	r2, [sp, #8]
 8006268:	2200      	movs	r2, #0
 800626a:	9201      	str	r2, [sp, #4]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	4603      	mov	r3, r0
 8006270:	2280      	movs	r2, #128	; 0x80
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fed8 	bl	8007028 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	7959      	ldrb	r1, [r3, #5]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800628c:	b292      	uxth	r2, r2
 800628e:	9202      	str	r2, [sp, #8]
 8006290:	2200      	movs	r2, #0
 8006292:	9201      	str	r2, [sp, #4]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4603      	mov	r3, r0
 8006298:	2200      	movs	r2, #0
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fec4 	bl	8007028 <USBH_OpenPipe>

    }
    break;
 80062a0:	e0ad      	b.n	80063fe <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80062a2:	2112      	movs	r1, #18
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f974 	bl	8006592 <USBH_Get_DevDesc>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 80a8 	bne.w	8006402 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80062b8:	e0a3      	b.n	8006402 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80062ba:	2101      	movs	r1, #1
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa14 	bl	80066ea <USBH_SetAddress>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f040 809e 	bne.w	8006406 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80062ca:	2002      	movs	r0, #2
 80062cc:	f002 f83d 	bl	800834a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2203      	movs	r2, #3
 80062dc:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	7919      	ldrb	r1, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80062f2:	b292      	uxth	r2, r2
 80062f4:	9202      	str	r2, [sp, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	9201      	str	r2, [sp, #4]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4603      	mov	r3, r0
 80062fe:	2280      	movs	r2, #128	; 0x80
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fe91 	bl	8007028 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	7959      	ldrb	r1, [r3, #5]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800631a:	b292      	uxth	r2, r2
 800631c:	9202      	str	r2, [sp, #8]
 800631e:	2200      	movs	r2, #0
 8006320:	9201      	str	r2, [sp, #4]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4603      	mov	r3, r0
 8006326:	2200      	movs	r2, #0
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fe7d 	bl	8007028 <USBH_OpenPipe>
    }
    break;
 800632e:	e06a      	b.n	8006406 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006330:	2109      	movs	r1, #9
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f955 	bl	80065e2 <USBH_Get_CfgDesc>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d165      	bne.n	800640a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2204      	movs	r2, #4
 8006342:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006344:	e061      	b.n	800640a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f947 	bl	80065e2 <USBH_Get_CfgDesc>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d159      	bne.n	800640e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2205      	movs	r2, #5
 800635e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006360:	e055      	b.n	800640e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006368:	2b00      	cmp	r3, #0
 800636a:	d010      	beq.n	800638e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006378:	23ff      	movs	r3, #255	; 0xff
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f955 	bl	800662a <USBH_Get_StringDesc>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d145      	bne.n	8006412 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2206      	movs	r2, #6
 800638a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800638c:	e041      	b.n	8006412 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2206      	movs	r2, #6
 8006392:	705a      	strb	r2, [r3, #1]
    break;
 8006394:	e03d      	b.n	8006412 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80063ac:	23ff      	movs	r3, #255	; 0xff
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f93b 	bl	800662a <USBH_Get_StringDesc>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d12d      	bne.n	8006416 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2207      	movs	r2, #7
 80063be:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80063c0:	e029      	b.n	8006416 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2207      	movs	r2, #7
 80063c6:	705a      	strb	r2, [r3, #1]
    break;
 80063c8:	e025      	b.n	8006416 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00f      	beq.n	80063f4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80063e0:	23ff      	movs	r3, #255	; 0xff
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f921 	bl	800662a <USBH_Get_StringDesc>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d115      	bne.n	800641a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80063f2:	e012      	b.n	800641a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73fb      	strb	r3, [r7, #15]
    break;
 80063f8:	e00f      	b.n	800641a <USBH_HandleEnum+0x226>

  default:
    break;
 80063fa:	bf00      	nop
 80063fc:	e00e      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 80063fe:	bf00      	nop
 8006400:	e00c      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 8006402:	bf00      	nop
 8006404:	e00a      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 8006406:	bf00      	nop
 8006408:	e008      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 800640a:	bf00      	nop
 800640c:	e006      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <USBH_HandleEnum+0x228>
    break;
 800641a:	bf00      	nop
  }
  return Status;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop

08006428 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f804 	bl	800646a <USBH_HandleSof>
}
 8006462:	bf00      	nop
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b0b      	cmp	r3, #11
 800647a:	d10a      	bne.n	8006492 <USBH_HandleSof+0x28>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
  }
}
 8006492:	bf00      	nop
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80064aa:	bf00      	nop
}
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b083      	sub	sp, #12
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80064c6:	bf00      	nop
}
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b083      	sub	sp, #12
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10f      	bne.n	800651e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00e      	beq.n	800652e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006516:	2104      	movs	r1, #4
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
 800651c:	e007      	b.n	800652e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006524:	2b01      	cmp	r3, #1
 8006526:	d102      	bne.n	800652e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fdb8 	bl	80080b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	791b      	ldrb	r3, [r3, #4]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fdb8 	bl	80070c2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	795b      	ldrb	r3, [r3, #5]
 8006556:	4619      	mov	r1, r3
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fdb2 	bl	80070c2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006576:	2105      	movs	r1, #5
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fd7f 	bl	8008080 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2203      	movs	r2, #3
 8006586:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b086      	sub	sp, #24
 8006596:	af02      	add	r7, sp, #8
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b0:	2100      	movs	r1, #0
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f864 	bl	8006680 <USBH_GetDescriptor>
 80065b8:	4603      	mov	r3, r0
 80065ba:	73fb      	strb	r3, [r7, #15]
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	b292      	uxth	r2, r2
 80065d2:	4619      	mov	r1, r3
 80065d4:	f000 f918 	bl	8006808 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af02      	add	r7, sp, #8
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	331c      	adds	r3, #28
 80065f2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80065f4:	887b      	ldrh	r3, [r7, #2]
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065fe:	2100      	movs	r1, #0
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f83d 	bl	8006680 <USBH_GetDescriptor>
 8006606:	4603      	mov	r3, r0
 8006608:	72fb      	strb	r3, [r7, #11]
 800660a:	7afb      	ldrb	r3, [r7, #11]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d107      	bne.n	8006620 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006616:	887a      	ldrh	r2, [r7, #2]
 8006618:	68f9      	ldr	r1, [r7, #12]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 f964 	bl	80068e8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006620:	7afb      	ldrb	r3, [r7, #11]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b088      	sub	sp, #32
 800662e:	af02      	add	r7, sp, #8
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	461a      	mov	r2, r3
 8006636:	460b      	mov	r3, r1
 8006638:	72fb      	strb	r3, [r7, #11]
 800663a:	4613      	mov	r3, r2
 800663c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006646:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800664e:	893b      	ldrh	r3, [r7, #8]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	460b      	mov	r3, r1
 8006654:	2100      	movs	r1, #0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f812 	bl	8006680 <USBH_GetDescriptor>
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d107      	bne.n	8006676 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800666c:	893a      	ldrh	r2, [r7, #8]
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fa37 	bl	8006ae4 <USBH_ParseStringDesc>
  }
  return status;
 8006676:	7dfb      	ldrb	r3, [r7, #23]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	607b      	str	r3, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	72fb      	strb	r3, [r7, #11]
 800668e:	4613      	mov	r3, r2
 8006690:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	789b      	ldrb	r3, [r3, #2]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d11c      	bne.n	80066d4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2206      	movs	r2, #6
 80066aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	893a      	ldrh	r2, [r7, #8]
 80066b0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80066b2:	893b      	ldrh	r3, [r7, #8]
 80066b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066bc:	d104      	bne.n	80066c8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f240 4209 	movw	r2, #1033	; 0x409
 80066c4:	829a      	strh	r2, [r3, #20]
 80066c6:	e002      	b.n	80066ce <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8b3a      	ldrh	r2, [r7, #24]
 80066d2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80066d4:	8b3b      	ldrh	r3, [r7, #24]
 80066d6:	461a      	mov	r2, r3
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fa50 	bl	8006b80 <USBH_CtlReq>
 80066e0:	4603      	mov	r3, r0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	460b      	mov	r3, r1
 80066f4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	789b      	ldrb	r3, [r3, #2]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d10f      	bne.n	800671e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2205      	movs	r2, #5
 8006708:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	b29a      	uxth	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800671e:	2200      	movs	r2, #0
 8006720:	2100      	movs	r1, #0
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa2c 	bl	8006b80 <USBH_CtlReq>
 8006728:	4603      	mov	r3, r0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	789b      	ldrb	r3, [r3, #2]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d10e      	bne.n	8006764 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2209      	movs	r2, #9
 8006750:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	887a      	ldrh	r2, [r7, #2]
 8006756:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006764:	2200      	movs	r2, #0
 8006766:	2100      	movs	r1, #0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fa09 	bl	8006b80 <USBH_CtlReq>
 800676e:	4603      	mov	r3, r0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	789b      	ldrb	r3, [r3, #2]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d10f      	bne.n	80067ac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2203      	movs	r2, #3
 8006796:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006798:	78fb      	ldrb	r3, [r7, #3]
 800679a:	b29a      	uxth	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80067ac:	2200      	movs	r2, #0
 80067ae:	2100      	movs	r1, #0
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f9e5 	bl	8006b80 <USBH_CtlReq>
 80067b6:	4603      	mov	r3, r0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	789b      	ldrb	r3, [r3, #2]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d10f      	bne.n	80067f4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80067e6:	78fb      	ldrb	r3, [r7, #3]
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80067f4:	2200      	movs	r2, #0
 80067f6:	2100      	movs	r1, #0
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f9c1 	bl	8006b80 <USBH_CtlReq>
 80067fe:	4603      	mov	r3, r0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	4613      	mov	r3, r2
 8006814:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	785a      	ldrb	r2, [r3, #1]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	3302      	adds	r3, #2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	b29a      	uxth	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	3303      	adds	r3, #3
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	b29b      	uxth	r3, r3
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	4313      	orrs	r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	791a      	ldrb	r2, [r3, #4]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	795a      	ldrb	r2, [r3, #5]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	799a      	ldrb	r2, [r3, #6]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	79da      	ldrb	r2, [r3, #7]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	2b08      	cmp	r3, #8
 8006866:	d939      	bls.n	80068dc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3308      	adds	r3, #8
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	b29a      	uxth	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	3309      	adds	r3, #9
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	b29b      	uxth	r3, r3
 8006878:	021b      	lsls	r3, r3, #8
 800687a:	b29b      	uxth	r3, r3
 800687c:	4313      	orrs	r3, r2
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	330a      	adds	r3, #10
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	b29a      	uxth	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	330b      	adds	r3, #11
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	b29b      	uxth	r3, r3
 8006898:	4313      	orrs	r3, r2
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	330c      	adds	r3, #12
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	330d      	adds	r3, #13
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	021b      	lsls	r3, r3, #8
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	7b9a      	ldrb	r2, [r3, #14]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	7bda      	ldrb	r2, [r3, #15]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	7c1a      	ldrb	r2, [r3, #16]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	7c5a      	ldrb	r2, [r3, #17]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	745a      	strb	r2, [r3, #17]
  }
}
 80068dc:	bf00      	nop
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08a      	sub	sp, #40	; 0x28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	785a      	ldrb	r2, [r3, #1]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	3302      	adds	r3, #2
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	b29a      	uxth	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	3303      	adds	r3, #3
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	b29b      	uxth	r3, r3
 800692e:	4313      	orrs	r3, r2
 8006930:	b29a      	uxth	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	791a      	ldrb	r2, [r3, #4]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	795a      	ldrb	r2, [r3, #5]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	799a      	ldrb	r2, [r3, #6]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	79da      	ldrb	r2, [r3, #7]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	7a1a      	ldrb	r2, [r3, #8]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	2b09      	cmp	r3, #9
 8006962:	d95f      	bls.n	8006a24 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006964:	2309      	movs	r3, #9
 8006966:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006968:	2300      	movs	r3, #0
 800696a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800696c:	e051      	b.n	8006a12 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800696e:	f107 0316 	add.w	r3, r7, #22
 8006972:	4619      	mov	r1, r3
 8006974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006976:	f000 f8e8 	bl	8006b4a <USBH_GetNextDesc>
 800697a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b04      	cmp	r3, #4
 8006982:	d146      	bne.n	8006a12 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006988:	221a      	movs	r2, #26
 800698a:	fb02 f303 	mul.w	r3, r2, r3
 800698e:	3308      	adds	r3, #8
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	3302      	adds	r3, #2
 8006996:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800699a:	69f8      	ldr	r0, [r7, #28]
 800699c:	f000 f846 	bl	8006a2c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80069aa:	e022      	b.n	80069f2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80069ac:	f107 0316 	add.w	r3, r7, #22
 80069b0:	4619      	mov	r1, r3
 80069b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069b4:	f000 f8c9 	bl	8006b4a <USBH_GetNextDesc>
 80069b8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80069ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069bc:	785b      	ldrb	r3, [r3, #1]
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d117      	bne.n	80069f2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80069c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069c6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80069ca:	3201      	adds	r2, #1
 80069cc:	00d2      	lsls	r2, r2, #3
 80069ce:	211a      	movs	r1, #26
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	3308      	adds	r3, #8
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	3304      	adds	r3, #4
 80069de:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80069e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069e2:	69b8      	ldr	r0, [r7, #24]
 80069e4:	f000 f851 	bl	8006a8a <USBH_ParseEPDesc>
            ep_ix++;
 80069e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80069ec:	3301      	adds	r3, #1
 80069ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	791b      	ldrb	r3, [r3, #4]
 80069f6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d204      	bcs.n	8006a08 <USBH_ParseCfgDesc+0x120>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	885a      	ldrh	r2, [r3, #2]
 8006a02:	8afb      	ldrh	r3, [r7, #22]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d8d1      	bhi.n	80069ac <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d804      	bhi.n	8006a24 <USBH_ParseCfgDesc+0x13c>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	885a      	ldrh	r2, [r3, #2]
 8006a1e:	8afb      	ldrh	r3, [r7, #22]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d8a4      	bhi.n	800696e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006a24:	bf00      	nop
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	785a      	ldrb	r2, [r3, #1]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	789a      	ldrb	r2, [r3, #2]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	78da      	ldrb	r2, [r3, #3]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	791a      	ldrb	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	795a      	ldrb	r2, [r3, #5]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	799a      	ldrb	r2, [r3, #6]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	79da      	ldrb	r2, [r3, #7]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	7a1a      	ldrb	r2, [r3, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	721a      	strb	r2, [r3, #8]
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	785a      	ldrb	r2, [r3, #1]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	789a      	ldrb	r2, [r3, #2]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	78da      	ldrb	r2, [r3, #3]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	3305      	adds	r3, #5
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	799a      	ldrb	r2, [r3, #6]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	719a      	strb	r2, [r3, #6]
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3301      	adds	r3, #1
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d120      	bne.n	8006b3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	1e9a      	subs	r2, r3, #2
 8006b02:	88fb      	ldrh	r3, [r7, #6]
 8006b04:	4293      	cmp	r3, r2
 8006b06:	bf28      	it	cs
 8006b08:	4613      	movcs	r3, r2
 8006b0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3302      	adds	r3, #2
 8006b10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006b12:	2300      	movs	r3, #0
 8006b14:	82fb      	strh	r3, [r7, #22]
 8006b16:	e00b      	b.n	8006b30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006b18:	8afb      	ldrh	r3, [r7, #22]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	781a      	ldrb	r2, [r3, #0]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006b2a:	8afb      	ldrh	r3, [r7, #22]
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	82fb      	strh	r3, [r7, #22]
 8006b30:	8afa      	ldrh	r2, [r7, #22]
 8006b32:	8abb      	ldrh	r3, [r7, #20]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d3ef      	bcc.n	8006b18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]
  }
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	881a      	ldrh	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4413      	add	r3, r2
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4413      	add	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006b72:	68fb      	ldr	r3, [r7, #12]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	789b      	ldrb	r3, [r3, #2]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d002      	beq.n	8006ba0 <USBH_CtlReq+0x20>
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d00f      	beq.n	8006bbe <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006b9e:	e034      	b.n	8006c0a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
    break;
 8006bbc:	e025      	b.n	8006c0a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 f828 	bl	8006c14 <USBH_HandleControl>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d108      	bne.n	8006be0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
    break;
 8006bde:	e013      	b.n	8006c08 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d108      	bne.n	8006bf8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	75fb      	strb	r3, [r7, #23]
    break;
 8006bf6:	e007      	b.n	8006c08 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d104      	bne.n	8006c08 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006c04:	2302      	movs	r3, #2
 8006c06:	75fb      	strb	r3, [r7, #23]
    break;
 8006c08:	bf00      	nop
  }
  return status;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7e1b      	ldrb	r3, [r3, #24]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	2b0a      	cmp	r3, #10
 8006c2c:	f200 814c 	bhi.w	8006ec8 <USBH_HandleControl+0x2b4>
 8006c30:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBH_HandleControl+0x24>)
 8006c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c36:	bf00      	nop
 8006c38:	08006c65 	.word	0x08006c65
 8006c3c:	08006c7f 	.word	0x08006c7f
 8006c40:	08006ce9 	.word	0x08006ce9
 8006c44:	08006d0f 	.word	0x08006d0f
 8006c48:	08006d47 	.word	0x08006d47
 8006c4c:	08006d73 	.word	0x08006d73
 8006c50:	08006dc5 	.word	0x08006dc5
 8006c54:	08006de7 	.word	0x08006de7
 8006c58:	08006e23 	.word	0x08006e23
 8006c5c:	08006e4b 	.word	0x08006e4b
 8006c60:	08006e89 	.word	0x08006e89
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f103 0110 	add.w	r1, r3, #16
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	795b      	ldrb	r3, [r3, #5]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f939 	bl	8006ee8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	761a      	strb	r2, [r3, #24]
    break;
 8006c7c:	e12f      	b.n	8006ede <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	795b      	ldrb	r3, [r3, #5]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 fb03 	bl	8008290 <USBH_LL_GetURBState>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d11e      	bne.n	8006cd2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7c1b      	ldrb	r3, [r3, #16]
 8006c98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c9c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8adb      	ldrh	r3, [r3, #22]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006ca6:	7b7b      	ldrb	r3, [r7, #13]
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d103      	bne.n	8006cb4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006cb2:	e10b      	b.n	8006ecc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2205      	movs	r2, #5
 8006cb8:	761a      	strb	r2, [r3, #24]
    break;
 8006cba:	e107      	b.n	8006ecc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006cbc:	7b7b      	ldrb	r3, [r7, #13]
 8006cbe:	2b80      	cmp	r3, #128	; 0x80
 8006cc0:	d103      	bne.n	8006cca <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2209      	movs	r2, #9
 8006cc6:	761a      	strb	r2, [r3, #24]
    break;
 8006cc8:	e100      	b.n	8006ecc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2207      	movs	r2, #7
 8006cce:	761a      	strb	r2, [r3, #24]
    break;
 8006cd0:	e0fc      	b.n	8006ecc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d003      	beq.n	8006ce0 <USBH_HandleControl+0xcc>
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	f040 80f6 	bne.w	8006ecc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	220b      	movs	r2, #11
 8006ce4:	761a      	strb	r2, [r3, #24]
    break;
 8006ce6:	e0f1      	b.n	8006ecc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6899      	ldr	r1, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	899a      	ldrh	r2, [r3, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	791b      	ldrb	r3, [r3, #4]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f930 	bl	8006f66 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	761a      	strb	r2, [r3, #24]
    break;
 8006d0c:	e0e7      	b.n	8006ede <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	791b      	ldrb	r3, [r3, #4]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fabb 	bl	8008290 <USBH_LL_GetURBState>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d102      	bne.n	8006d2a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2209      	movs	r2, #9
 8006d28:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d102      	bne.n	8006d36 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006d30:	2303      	movs	r3, #3
 8006d32:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d34:	e0cc      	b.n	8006ed0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	f040 80c9 	bne.w	8006ed0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	220b      	movs	r2, #11
 8006d42:	761a      	strb	r2, [r3, #24]
    break;
 8006d44:	e0c4      	b.n	8006ed0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6899      	ldr	r1, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	899a      	ldrh	r2, [r3, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7958      	ldrb	r0, [r3, #5]
 8006d52:	2301      	movs	r3, #1
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	4603      	mov	r3, r0
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f8df 	bl	8006f1c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2206      	movs	r2, #6
 8006d6e:	761a      	strb	r2, [r3, #24]
    break;
 8006d70:	e0b5      	b.n	8006ede <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	795b      	ldrb	r3, [r3, #5]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fa89 	bl	8008290 <USBH_LL_GetURBState>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d103      	bne.n	8006d90 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2207      	movs	r2, #7
 8006d8c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d8e:	e0a1      	b.n	8006ed4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006d90:	7bbb      	ldrb	r3, [r7, #14]
 8006d92:	2b05      	cmp	r3, #5
 8006d94:	d105      	bne.n	8006da2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	220c      	movs	r2, #12
 8006d9a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006da0:	e098      	b.n	8006ed4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d103      	bne.n	8006db0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2205      	movs	r2, #5
 8006dac:	761a      	strb	r2, [r3, #24]
    break;
 8006dae:	e091      	b.n	8006ed4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	f040 808e 	bne.w	8006ed4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	220b      	movs	r2, #11
 8006dbc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc2:	e087      	b.n	8006ed4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	791b      	ldrb	r3, [r3, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2100      	movs	r1, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f8ca 	bl	8006f66 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2208      	movs	r2, #8
 8006de2:	761a      	strb	r2, [r3, #24]

    break;
 8006de4:	e07b      	b.n	8006ede <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	791b      	ldrb	r3, [r3, #4]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fa4f 	bl	8008290 <USBH_LL_GetURBState>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d105      	bne.n	8006e08 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	220d      	movs	r2, #13
 8006e00:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006e06:	e067      	b.n	8006ed8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d103      	bne.n	8006e16 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	220b      	movs	r2, #11
 8006e12:	761a      	strb	r2, [r3, #24]
    break;
 8006e14:	e060      	b.n	8006ed8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	2b05      	cmp	r3, #5
 8006e1a:	d15d      	bne.n	8006ed8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e20:	e05a      	b.n	8006ed8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	795a      	ldrb	r2, [r3, #5]
 8006e26:	2301      	movs	r3, #1
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f873 	bl	8006f1c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	220a      	movs	r2, #10
 8006e46:	761a      	strb	r2, [r3, #24]
    break;
 8006e48:	e049      	b.n	8006ede <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	795b      	ldrb	r3, [r3, #5]
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 fa1d 	bl	8008290 <USBH_LL_GetURBState>
 8006e56:	4603      	mov	r3, r0
 8006e58:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d105      	bne.n	8006e6c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	220d      	movs	r2, #13
 8006e68:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006e6a:	e037      	b.n	8006edc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006e6c:	7bbb      	ldrb	r3, [r7, #14]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d103      	bne.n	8006e7a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2209      	movs	r2, #9
 8006e76:	761a      	strb	r2, [r3, #24]
    break;
 8006e78:	e030      	b.n	8006edc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d12d      	bne.n	8006edc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	220b      	movs	r2, #11
 8006e84:	761a      	strb	r2, [r3, #24]
    break;
 8006e86:	e029      	b.n	8006edc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7e5b      	ldrb	r3, [r3, #25]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	765a      	strb	r2, [r3, #25]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	7e5b      	ldrb	r3, [r3, #25]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d809      	bhi.n	8006eb0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f90a 	bl	80080b6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006eae:	e016      	b.n	8006ede <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006eb6:	2106      	movs	r1, #6
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec6:	e00a      	b.n	8006ede <USBH_HandleControl+0x2ca>

  default:
    break;
 8006ec8:	bf00      	nop
 8006eca:	e008      	b.n	8006ede <USBH_HandleControl+0x2ca>
    break;
 8006ecc:	bf00      	nop
 8006ece:	e006      	b.n	8006ede <USBH_HandleControl+0x2ca>
    break;
 8006ed0:	bf00      	nop
 8006ed2:	e004      	b.n	8006ede <USBH_HandleControl+0x2ca>
    break;
 8006ed4:	bf00      	nop
 8006ed6:	e002      	b.n	8006ede <USBH_HandleControl+0x2ca>
    break;
 8006ed8:	bf00      	nop
 8006eda:	e000      	b.n	8006ede <USBH_HandleControl+0x2ca>
    break;
 8006edc:	bf00      	nop
  }
  return status;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ef6:	79f9      	ldrb	r1, [r7, #7]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	9303      	str	r3, [sp, #12]
 8006efc:	2308      	movs	r3, #8
 8006efe:	9302      	str	r3, [sp, #8]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	2300      	movs	r3, #0
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f001 f98e 	bl	800822e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af04      	add	r7, sp, #16
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4611      	mov	r1, r2
 8006f28:	461a      	mov	r2, r3
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	80fb      	strh	r3, [r7, #6]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f40:	7979      	ldrb	r1, [r7, #5]
 8006f42:	7e3b      	ldrb	r3, [r7, #24]
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	9302      	str	r3, [sp, #8]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	2301      	movs	r3, #1
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	2200      	movs	r2, #0
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f001 f969 	bl	800822e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b088      	sub	sp, #32
 8006f6a:	af04      	add	r7, sp, #16
 8006f6c:	60f8      	str	r0, [r7, #12]
 8006f6e:	60b9      	str	r1, [r7, #8]
 8006f70:	4611      	mov	r1, r2
 8006f72:	461a      	mov	r2, r3
 8006f74:	460b      	mov	r3, r1
 8006f76:	80fb      	strh	r3, [r7, #6]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f7c:	7979      	ldrb	r1, [r7, #5]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9303      	str	r3, [sp, #12]
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	9302      	str	r3, [sp, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2201      	movs	r2, #1
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f001 f94b 	bl	800822e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f98:	2300      	movs	r3, #0

}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af04      	add	r7, sp, #16
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	4611      	mov	r1, r2
 8006fae:	461a      	mov	r2, r3
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	80fb      	strh	r3, [r7, #6]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006fc6:	7979      	ldrb	r1, [r7, #5]
 8006fc8:	7e3b      	ldrb	r3, [r7, #24]
 8006fca:	9303      	str	r3, [sp, #12]
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	9302      	str	r3, [sp, #8]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	9301      	str	r3, [sp, #4]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	2302      	movs	r3, #2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 f926 	bl	800822e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af04      	add	r7, sp, #16
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	80fb      	strh	r3, [r7, #6]
 8006ffe:	4613      	mov	r3, r2
 8007000:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007002:	7979      	ldrb	r1, [r7, #5]
 8007004:	2300      	movs	r3, #0
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	9302      	str	r3, [sp, #8]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2301      	movs	r3, #1
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2302      	movs	r3, #2
 8007016:	2201      	movs	r2, #1
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f001 f908 	bl	800822e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af04      	add	r7, sp, #16
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	460b      	mov	r3, r1
 800703c:	70bb      	strb	r3, [r7, #2]
 800703e:	4613      	mov	r3, r2
 8007040:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007042:	7878      	ldrb	r0, [r7, #1]
 8007044:	78ba      	ldrb	r2, [r7, #2]
 8007046:	78f9      	ldrb	r1, [r7, #3]
 8007048:	8b3b      	ldrh	r3, [r7, #24]
 800704a:	9302      	str	r3, [sp, #8]
 800704c:	7d3b      	ldrb	r3, [r7, #20]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	7c3b      	ldrb	r3, [r7, #16]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4603      	mov	r3, r0
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 f89b 	bl	8008192 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800705c:	2300      	movs	r3, #0

}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007072:	78fb      	ldrb	r3, [r7, #3]
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f8ba 	bl	80081f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800707c:	2300      	movs	r3, #0

}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b084      	sub	sp, #16
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f831 	bl	80070fa <USBH_GetFreePipe>
 8007098:	4603      	mov	r3, r0
 800709a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	89fa      	ldrh	r2, [r7, #14]
 80070aa:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	32e0      	adds	r2, #224	; 0xe0
 80070b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80070b6:	89fb      	ldrh	r3, [r7, #14]
 80070b8:	b2db      	uxtb	r3, r3
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	2b0a      	cmp	r3, #10
 80070d2:	d80b      	bhi.n	80070ec <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80070d4:	78fa      	ldrb	r2, [r7, #3]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	32e0      	adds	r2, #224	; 0xe0
 80070da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	32e0      	adds	r2, #224	; 0xe0
 80070e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
 800710a:	e00e      	b.n	800712a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800710c:	7bfa      	ldrb	r2, [r7, #15]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	32e0      	adds	r2, #224	; 0xe0
 8007112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d102      	bne.n	8007124 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	b29b      	uxth	r3, r3
 8007122:	e007      	b.n	8007134 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	3301      	adds	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b0a      	cmp	r3, #10
 800712e:	d9ed      	bls.n	800710c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007130:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HX711_Init>:
// 3: channel A, gain factor 64
} HX711;

HX711 data;

void HX711_Init(HX711 data) {
 8007140:	b084      	sub	sp, #16
 8007142:	b580      	push	{r7, lr}
 8007144:	b086      	sub	sp, #24
 8007146:	af00      	add	r7, sp, #0
 8007148:	f107 0c20 	add.w	ip, r7, #32
 800714c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = data.pinSck;
 8007150:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007152:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007154:	2301      	movs	r3, #1
 8007156:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioSck, &GPIO_InitStruct);
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	1d3a      	adds	r2, r7, #4
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f7f9 fba8 	bl	80008bc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = data.pinData;
 800716c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800716e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007174:	2301      	movs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	1d3a      	adds	r2, r7, #4
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7f9 fb9a 	bl	80008bc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800718c:	2201      	movs	r2, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f7f9 fd46 	bl	8000c20 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8007194:	2032      	movs	r0, #50	; 0x32
 8007196:	f7f9 fa5d 	bl	8000654 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioData, data.pinSck, GPIO_PIN_RESET);
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800719e:	2200      	movs	r2, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7f9 fd3d 	bl	8000c20 <HAL_GPIO_WritePin>

}
 80071a6:	bf00      	nop
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071b0:	b004      	add	sp, #16
 80071b2:	4770      	bx	lr

080071b4 <HX711_Value>:


int HX711_Value(HX711 data) {
 80071b4:	b084      	sub	sp, #16
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	f107 0c18 	add.w	ip, r7, #24
 80071c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int buffer;
	buffer = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

	while (HAL_GPIO_ReadPin(data.gpioData, data.pinData) == 1);
 80071c8:	bf00      	nop
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80071ce:	4611      	mov	r1, r2
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7f9 fd0d 	bl	8000bf0 <HAL_GPIO_ReadPin>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d0f6      	beq.n	80071ca <HX711_Value+0x16>

	for (uint8_t i = 0; i < 24; i++) {
 80071dc:	2300      	movs	r3, #0
 80071de:	72fb      	strb	r3, [r7, #11]
 80071e0:	e01d      	b.n	800721e <HX711_Value+0x6a>
		HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	8c39      	ldrh	r1, [r7, #32]
 80071e6:	2201      	movs	r2, #1
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7f9 fd19 	bl	8000c20 <HAL_GPIO_WritePin>

		buffer = buffer << 1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	60fb      	str	r3, [r7, #12]

		if (HAL_GPIO_ReadPin(data.gpioData, data.pinData)) {
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80071f8:	4611      	mov	r1, r2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7f9 fcf8 	bl	8000bf0 <HAL_GPIO_ReadPin>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HX711_Value+0x58>
			buffer++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3301      	adds	r3, #1
 800720a:	60fb      	str	r3, [r7, #12]
		}

		HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	8c39      	ldrh	r1, [r7, #32]
 8007210:	2200      	movs	r2, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f7f9 fd04 	bl	8000c20 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 24; i++) {
 8007218:	7afb      	ldrb	r3, [r7, #11]
 800721a:	3301      	adds	r3, #1
 800721c:	72fb      	strb	r3, [r7, #11]
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	2b17      	cmp	r3, #23
 8007222:	d9de      	bls.n	80071e2 <HX711_Value+0x2e>
	}

	for (int i = 0; i < data.gain; i++) {
 8007224:	2300      	movs	r3, #0
 8007226:	607b      	str	r3, [r7, #4]
 8007228:	e00e      	b.n	8007248 <HX711_Value+0x94>
		HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	8c39      	ldrh	r1, [r7, #32]
 800722e:	2201      	movs	r2, #1
 8007230:	4618      	mov	r0, r3
 8007232:	f7f9 fcf5 	bl	8000c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	8c39      	ldrh	r1, [r7, #32]
 800723a:	2200      	movs	r2, #0
 800723c:	4618      	mov	r0, r3
 800723e:	f7f9 fcef 	bl	8000c20 <HAL_GPIO_WritePin>
	for (int i = 0; i < data.gain; i++) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3301      	adds	r3, #1
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	429a      	cmp	r2, r3
 800724e:	dbec      	blt.n	800722a <HX711_Value+0x76>
	}

	buffer = buffer ^ 0x800000;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8007256:	60fb      	str	r3, [r7, #12]

	return buffer;
 8007258:	68fb      	ldr	r3, [r7, #12]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007264:	b004      	add	sp, #16
 8007266:	4770      	bx	lr

08007268 <HX711_Average_Value>:

int HX711_Average_Value(HX711 data, uint8_t times) {
 8007268:	b084      	sub	sp, #16
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af02      	add	r7, sp, #8
 8007270:	f107 0c10 	add.w	ip, r7, #16
 8007274:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int sum = 0;
 8007278:	2300      	movs	r3, #0
 800727a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < times; i++) {
 800727c:	2300      	movs	r3, #0
 800727e:	603b      	str	r3, [r7, #0]
 8007280:	e012      	b.n	80072a8 <HX711_Average_Value+0x40>
		sum += HX711_Value(data);
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	f107 0310 	add.w	r3, r7, #16
 800728a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800728c:	f7ff ff92 	bl	80071b4 <HX711_Value>
 8007290:	4602      	mov	r2, r0
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4413      	add	r3, r2
 8007296:	607b      	str	r3, [r7, #4]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8007298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800729c:	480b      	ldr	r0, [pc, #44]	; (80072cc <HX711_Average_Value+0x64>)
 800729e:	f7f9 fcd8 	bl	8000c52 <HAL_GPIO_TogglePin>
	for (int i = 0; i < times; i++) {
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	dbe7      	blt.n	8007282 <HX711_Average_Value+0x1a>
	}

	return sum / times;
 80072b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072c6:	b004      	add	sp, #16
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40020c00 	.word	0x40020c00

080072d0 <HX711_Tare>:

HX711 HX711_Tare(HX711 data, uint8_t times) {
 80072d0:	b084      	sub	sp, #16
 80072d2:	b5b0      	push	{r4, r5, r7, lr}
 80072d4:	b086      	sub	sp, #24
 80072d6:	af02      	add	r7, sp, #8
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int sum = HX711_Average_Value(data, times);
 80072e2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80072f2:	f7ff ffb9 	bl	8007268 <HX711_Average_Value>
 80072f6:	60f8      	str	r0, [r7, #12]
	data.offset = sum;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	633b      	str	r3, [r7, #48]	; 0x30
	return data;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	461d      	mov	r5, r3
 8007300:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8007304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007306:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	602b      	str	r3, [r5, #0]
}
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8007316:	b004      	add	sp, #16
 8007318:	4770      	bx	lr
	...

0800731c <getWeight>:

int getWeight() {
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af02      	add	r7, sp, #8
	buffer = HX711_Value(data) - data.offset;
 8007322:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <getWeight+0x44>)
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	9200      	str	r2, [sp, #0]
 8007328:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800732a:	f7ff ff43 	bl	80071b4 <HX711_Value>
 800732e:	4602      	mov	r2, r0
 8007330:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <getWeight+0x44>)
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <getWeight+0x48>)
 8007338:	6013      	str	r3, [r2, #0]
	if(buffer<0)buffer=0;
 800733a:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <getWeight+0x48>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	da02      	bge.n	8007348 <getWeight+0x2c>
 8007342:	4b08      	ldr	r3, [pc, #32]	; (8007364 <getWeight+0x48>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]
	return buffer/220;
 8007348:	4b06      	ldr	r3, [pc, #24]	; (8007364 <getWeight+0x48>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a06      	ldr	r2, [pc, #24]	; (8007368 <getWeight+0x4c>)
 800734e:	fb82 1203 	smull	r1, r2, r2, r3
 8007352:	10d2      	asrs	r2, r2, #3
 8007354:	17db      	asrs	r3, r3, #31
 8007356:	1ad3      	subs	r3, r2, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	200002b8 	.word	0x200002b8
 8007364:	200002b4 	.word	0x200002b4
 8007368:	094f2095 	.word	0x094f2095

0800736c <servo_write>:

//servo
void servo_write(int degree)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	// can only assign 0 90 180 degree (CCW)
	int dutyCycle = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
	if (degree == 0) { dutyCycle = 900; }
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <servo_write+0x1a>
 800737e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	e009      	b.n	800739a <servo_write+0x2e>
	else if (degree == 90) { dutyCycle = 1300; }
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b5a      	cmp	r3, #90	; 0x5a
 800738a:	d103      	bne.n	8007394 <servo_write+0x28>
 800738c:	f240 5314 	movw	r3, #1300	; 0x514
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e002      	b.n	800739a <servo_write+0x2e>
	else { dutyCycle = 900; }
 8007394:	f44f 7361 	mov.w	r3, #900	; 0x384
 8007398:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, dutyCycle);
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <servo_write+0x44>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	635a      	str	r2, [r3, #52]	; 0x34
//	TIM4->CCR1  = dutyCycle;
}
 80073a2:	bf00      	nop
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	200000cc 	.word	0x200000cc

080073b4 <HAL_TIM_PeriodElapsedCallback>:
	}
	//close servo
	servo_write(0);
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM10)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a10      	ldr	r2, [pc, #64]	; (8007404 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d119      	bne.n	80073fa <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		memset(output, 0, 256);
 80073c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ca:	2100      	movs	r1, #0
 80073cc:	480e      	ldr	r0, [pc, #56]	; (8007408 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80073ce:	f001 f873 	bl	80084b8 <memset>
		w = getWeight();
 80073d2:	f7ff ffa3 	bl	800731c <getWeight>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4b0c      	ldr	r3, [pc, #48]	; (800740c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80073da:	601a      	str	r2, [r3, #0]
		sprintf(output, "%d. ",w, foodPerFeed);
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	490b      	ldr	r1, [pc, #44]	; (8007414 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80073e6:	4808      	ldr	r0, [pc, #32]	; (8007408 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80073e8:	f001 f926 	bl	8008638 <siprintf>
		HAL_UART_Transmit(&huart2, output, sizeof(output), 100);
 80073ec:	2364      	movs	r3, #100	; 0x64
 80073ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073f2:	4905      	ldr	r1, [pc, #20]	; (8007408 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80073f4:	4808      	ldr	r0, [pc, #32]	; (8007418 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80073f6:	f7fc fc88 	bl	8003d0a <HAL_UART_Transmit>
	}
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40014400 	.word	0x40014400
 8007408:	2000010c 	.word	0x2000010c
 800740c:	2000024c 	.word	0x2000024c
 8007410:	20000028 	.word	0x20000028
 8007414:	08008cf0 	.word	0x08008cf0
 8007418:	2000030c 	.word	0x2000030c

0800741c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800741c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741e:	b08d      	sub	sp, #52	; 0x34
 8007420:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007422:	f7f9 f8a5 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007426:	f000 f899 	bl	800755c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800742a:	f000 f9f9 	bl	8007820 <MX_GPIO_Init>
  MX_TIM1_Init();
 800742e:	f000 f8ff 	bl	8007630 <MX_TIM1_Init>
  MX_TIM4_Init();
 8007432:	f000 f94d 	bl	80076d0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8007436:	f000 f9c9 	bl	80077cc <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 800743a:	f000 fcd1 	bl	8007de0 <MX_USB_HOST_Init>
  MX_TIM10_Init();
 800743e:	f000 f9a1 	bl	8007784 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8007442:	483e      	ldr	r0, [pc, #248]	; (800753c <main+0x120>)
 8007444:	f7fb fd15 	bl	8002e72 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8007448:	2100      	movs	r1, #0
 800744a:	483c      	ldr	r0, [pc, #240]	; (800753c <main+0x120>)
 800744c:	f7fb fd84 	bl	8002f58 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 8007450:	483b      	ldr	r0, [pc, #236]	; (8007540 <main+0x124>)
 8007452:	f7fb fd0e 	bl	8002e72 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8007456:	2201      	movs	r2, #1
 8007458:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800745c:	4839      	ldr	r0, [pc, #228]	; (8007544 <main+0x128>)
 800745e:	f7f9 fbdf 	bl	8000c20 <HAL_GPIO_WritePin>
  //	HX711 data;
  	data.gpioData = GPIOD;
 8007462:	4b39      	ldr	r3, [pc, #228]	; (8007548 <main+0x12c>)
 8007464:	4a37      	ldr	r2, [pc, #220]	; (8007544 <main+0x128>)
 8007466:	605a      	str	r2, [r3, #4]
  	data.gpioSck = GPIOD;
 8007468:	4b37      	ldr	r3, [pc, #220]	; (8007548 <main+0x12c>)
 800746a:	4a36      	ldr	r2, [pc, #216]	; (8007544 <main+0x128>)
 800746c:	601a      	str	r2, [r3, #0]
  	data.pinData = GPIO_PIN_1;
 800746e:	4b36      	ldr	r3, [pc, #216]	; (8007548 <main+0x12c>)
 8007470:	2202      	movs	r2, #2
 8007472:	815a      	strh	r2, [r3, #10]
  	data.pinSck = GPIO_PIN_2;
 8007474:	4b34      	ldr	r3, [pc, #208]	; (8007548 <main+0x12c>)
 8007476:	2204      	movs	r2, #4
 8007478:	811a      	strh	r2, [r3, #8]
  	data.gain = 1;
 800747a:	4b33      	ldr	r3, [pc, #204]	; (8007548 <main+0x12c>)
 800747c:	2201      	movs	r2, #1
 800747e:	611a      	str	r2, [r3, #16]
  	HX711_Init(data);
 8007480:	4b31      	ldr	r3, [pc, #196]	; (8007548 <main+0x12c>)
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	9200      	str	r2, [sp, #0]
 8007486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007488:	f7ff fe5a 	bl	8007140 <HX711_Init>
  	data = HX711_Tare(data, 100);
 800748c:	4e2e      	ldr	r6, [pc, #184]	; (8007548 <main+0x12c>)
 800748e:	463c      	mov	r4, r7
 8007490:	4b2d      	ldr	r3, [pc, #180]	; (8007548 <main+0x12c>)
 8007492:	2264      	movs	r2, #100	; 0x64
 8007494:	9202      	str	r2, [sp, #8]
 8007496:	466d      	mov	r5, sp
 8007498:	f103 020c 	add.w	r2, r3, #12
 800749c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80074a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7ff ff12 	bl	80072d0 <HX711_Tare>
 80074ac:	4635      	mov	r5, r6
 80074ae:	463c      	mov	r4, r7
 80074b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	602b      	str	r3, [r5, #0]

  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);

  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80074b8:	2201      	movs	r2, #1
 80074ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074be:	4821      	ldr	r0, [pc, #132]	; (8007544 <main+0x128>)
 80074c0:	f7f9 fbae 	bl	8000c20 <HAL_GPIO_WritePin>
  //servo_write(0);
  HAL_TIM_Base_Start_IT(&htim10);
 80074c4:	4821      	ldr	r0, [pc, #132]	; (800754c <main+0x130>)
 80074c6:	f7fb fcf8 	bl	8002eba <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 80074ca:	2201      	movs	r2, #1
 80074cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80074d0:	481c      	ldr	r0, [pc, #112]	; (8007544 <main+0x128>)
 80074d2:	f7f9 fba5 	bl	8000c20 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80074d6:	f000 fca9 	bl	8007e2c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    servo_write(50);
 80074da:	2032      	movs	r0, #50	; 0x32
 80074dc:	f7ff ff46 	bl	800736c <servo_write>

    if (HAL_UART_Receive(&huart2, buffer2, 7, 500) == HAL_OK) {
 80074e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80074e4:	2207      	movs	r2, #7
 80074e6:	491a      	ldr	r1, [pc, #104]	; (8007550 <main+0x134>)
 80074e8:	481a      	ldr	r0, [pc, #104]	; (8007554 <main+0x138>)
 80074ea:	f7fc fca7 	bl	8003e3c <HAL_UART_Receive>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1f0      	bne.n	80074d6 <main+0xba>
	 	  			//Type "feed" to trigger.
	 	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 80074f4:	2200      	movs	r2, #0
 80074f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80074fa:	4812      	ldr	r0, [pc, #72]	; (8007544 <main+0x128>)
 80074fc:	f7f9 fb90 	bl	8000c20 <HAL_GPIO_WritePin>

	 	  		    //ptr = strtok(NULL," ");

	 	  			//foodPerFeed = (int) toString(buffer2);
	 	  			//foodPerFeed = atoi(s);
	 	  				int currentWeight = getWeight();
 8007500:	f7ff ff0c 	bl	800731c <getWeight>
 8007504:	61f8      	str	r0, [r7, #28]
	 	  					//open servo
	 	  					servo_write(90);
 8007506:	205a      	movs	r0, #90	; 0x5a
 8007508:	f7ff ff30 	bl	800736c <servo_write>

	 	  					while(currentWeight < foodPerFeed-5){
 800750c:	e005      	b.n	800751a <main+0xfe>
	 	  						HAL_Delay(100);
 800750e:	2064      	movs	r0, #100	; 0x64
 8007510:	f7f9 f8a0 	bl	8000654 <HAL_Delay>
	 	  						currentWeight = getWeight();
 8007514:	f7ff ff02 	bl	800731c <getWeight>
 8007518:	61f8      	str	r0, [r7, #28]
	 	  					while(currentWeight < foodPerFeed-5){
 800751a:	4b0f      	ldr	r3, [pc, #60]	; (8007558 <main+0x13c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	3b05      	subs	r3, #5
 8007520:	69fa      	ldr	r2, [r7, #28]
 8007522:	429a      	cmp	r2, r3
 8007524:	dbf3      	blt.n	800750e <main+0xf2>
	 	  					}
	 	  					//close servo
	 	  					HAL_Delay(100);
 8007526:	2064      	movs	r0, #100	; 0x64
 8007528:	f7f9 f894 	bl	8000654 <HAL_Delay>



	 	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 800752c:	2201      	movs	r2, #1
 800752e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007532:	4804      	ldr	r0, [pc, #16]	; (8007544 <main+0x128>)
 8007534:	f7f9 fb74 	bl	8000c20 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8007538:	e7cd      	b.n	80074d6 <main+0xba>
 800753a:	bf00      	nop
 800753c:	200000cc 	.word	0x200000cc
 8007540:	200002cc 	.word	0x200002cc
 8007544:	40020c00 	.word	0x40020c00
 8007548:	200002b8 	.word	0x200002b8
 800754c:	2000020c 	.word	0x2000020c
 8007550:	20000250 	.word	0x20000250
 8007554:	2000030c 	.word	0x2000030c
 8007558:	20000028 	.word	0x20000028

0800755c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b094      	sub	sp, #80	; 0x50
 8007560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007562:	f107 0320 	add.w	r3, r7, #32
 8007566:	2230      	movs	r2, #48	; 0x30
 8007568:	2100      	movs	r1, #0
 800756a:	4618      	mov	r0, r3
 800756c:	f000 ffa4 	bl	80084b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	609a      	str	r2, [r3, #8]
 800757c:	60da      	str	r2, [r3, #12]
 800757e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007580:	2300      	movs	r3, #0
 8007582:	60bb      	str	r3, [r7, #8]
 8007584:	4b28      	ldr	r3, [pc, #160]	; (8007628 <SystemClock_Config+0xcc>)
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	4a27      	ldr	r2, [pc, #156]	; (8007628 <SystemClock_Config+0xcc>)
 800758a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758e:	6413      	str	r3, [r2, #64]	; 0x40
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <SystemClock_Config+0xcc>)
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007598:	60bb      	str	r3, [r7, #8]
 800759a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800759c:	2300      	movs	r3, #0
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	4b22      	ldr	r3, [pc, #136]	; (800762c <SystemClock_Config+0xd0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a21      	ldr	r2, [pc, #132]	; (800762c <SystemClock_Config+0xd0>)
 80075a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	4b1f      	ldr	r3, [pc, #124]	; (800762c <SystemClock_Config+0xd0>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b4:	607b      	str	r3, [r7, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80075b8:	2301      	movs	r3, #1
 80075ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80075bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075c2:	2302      	movs	r3, #2
 80075c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80075c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80075ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80075cc:	2308      	movs	r3, #8
 80075ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80075d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80075d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80075d6:	2302      	movs	r3, #2
 80075d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80075da:	2307      	movs	r3, #7
 80075dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075de:	f107 0320 	add.w	r3, r7, #32
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fa ffb8 	bl	8002558 <HAL_RCC_OscConfig>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80075ee:	f000 fa55 	bl	8007a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075f2:	230f      	movs	r3, #15
 80075f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075f6:	2302      	movs	r3, #2
 80075f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075fa:	2300      	movs	r3, #0
 80075fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80075fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007608:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800760a:	f107 030c 	add.w	r3, r7, #12
 800760e:	2105      	movs	r1, #5
 8007610:	4618      	mov	r0, r3
 8007612:	f7fb fa11 	bl	8002a38 <HAL_RCC_ClockConfig>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800761c:	f000 fa3e 	bl	8007a9c <Error_Handler>
  }
}
 8007620:	bf00      	nop
 8007622:	3750      	adds	r7, #80	; 0x50
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40023800 	.word	0x40023800
 800762c:	40007000 	.word	0x40007000

08007630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007636:	f107 0308 	add.w	r3, r7, #8
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	605a      	str	r2, [r3, #4]
 8007640:	609a      	str	r2, [r3, #8]
 8007642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007644:	463b      	mov	r3, r7
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800764c:	4b1e      	ldr	r3, [pc, #120]	; (80076c8 <MX_TIM1_Init+0x98>)
 800764e:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <MX_TIM1_Init+0x9c>)
 8007650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8007652:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <MX_TIM1_Init+0x98>)
 8007654:	2253      	movs	r2, #83	; 0x53
 8007656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007658:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <MX_TIM1_Init+0x98>)
 800765a:	2200      	movs	r2, #0
 800765c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800765e:	4b1a      	ldr	r3, [pc, #104]	; (80076c8 <MX_TIM1_Init+0x98>)
 8007660:	f242 7210 	movw	r2, #10000	; 0x2710
 8007664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007666:	4b18      	ldr	r3, [pc, #96]	; (80076c8 <MX_TIM1_Init+0x98>)
 8007668:	2200      	movs	r2, #0
 800766a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800766c:	4b16      	ldr	r3, [pc, #88]	; (80076c8 <MX_TIM1_Init+0x98>)
 800766e:	2200      	movs	r2, #0
 8007670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <MX_TIM1_Init+0x98>)
 8007674:	2200      	movs	r2, #0
 8007676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007678:	4813      	ldr	r0, [pc, #76]	; (80076c8 <MX_TIM1_Init+0x98>)
 800767a:	f7fb fbcf 	bl	8002e1c <HAL_TIM_Base_Init>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8007684:	f000 fa0a 	bl	8007a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800768c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800768e:	f107 0308 	add.w	r3, r7, #8
 8007692:	4619      	mov	r1, r3
 8007694:	480c      	ldr	r0, [pc, #48]	; (80076c8 <MX_TIM1_Init+0x98>)
 8007696:	f7fb fe6b 	bl	8003370 <HAL_TIM_ConfigClockSource>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80076a0:	f000 f9fc 	bl	8007a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076a4:	2300      	movs	r3, #0
 80076a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80076ac:	463b      	mov	r3, r7
 80076ae:	4619      	mov	r1, r3
 80076b0:	4805      	ldr	r0, [pc, #20]	; (80076c8 <MX_TIM1_Init+0x98>)
 80076b2:	f7fc fa4d 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80076bc:	f000 f9ee 	bl	8007a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80076c0:	bf00      	nop
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	200002cc 	.word	0x200002cc
 80076cc:	40010000 	.word	0x40010000

080076d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076d6:	f107 0320 	add.w	r3, r7, #32
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076e0:	1d3b      	adds	r3, r7, #4
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	605a      	str	r2, [r3, #4]
 80076e8:	609a      	str	r2, [r3, #8]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	611a      	str	r2, [r3, #16]
 80076ee:	615a      	str	r2, [r3, #20]
 80076f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80076f2:	4b22      	ldr	r3, [pc, #136]	; (800777c <MX_TIM4_Init+0xac>)
 80076f4:	4a22      	ldr	r2, [pc, #136]	; (8007780 <MX_TIM4_Init+0xb0>)
 80076f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80076f8:	4b20      	ldr	r3, [pc, #128]	; (800777c <MX_TIM4_Init+0xac>)
 80076fa:	2253      	movs	r2, #83	; 0x53
 80076fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076fe:	4b1f      	ldr	r3, [pc, #124]	; (800777c <MX_TIM4_Init+0xac>)
 8007700:	2200      	movs	r2, #0
 8007702:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <MX_TIM4_Init+0xac>)
 8007706:	f644 6220 	movw	r2, #20000	; 0x4e20
 800770a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800770c:	4b1b      	ldr	r3, [pc, #108]	; (800777c <MX_TIM4_Init+0xac>)
 800770e:	2200      	movs	r2, #0
 8007710:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007712:	4b1a      	ldr	r3, [pc, #104]	; (800777c <MX_TIM4_Init+0xac>)
 8007714:	2200      	movs	r2, #0
 8007716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007718:	4818      	ldr	r0, [pc, #96]	; (800777c <MX_TIM4_Init+0xac>)
 800771a:	f7fb fbf2 	bl	8002f02 <HAL_TIM_PWM_Init>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8007724:	f000 f9ba 	bl	8007a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007728:	2300      	movs	r3, #0
 800772a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800772c:	2300      	movs	r3, #0
 800772e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007730:	f107 0320 	add.w	r3, r7, #32
 8007734:	4619      	mov	r1, r3
 8007736:	4811      	ldr	r0, [pc, #68]	; (800777c <MX_TIM4_Init+0xac>)
 8007738:	f7fc fa0a 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8007742:	f000 f9ab 	bl	8007a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007746:	2360      	movs	r3, #96	; 0x60
 8007748:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800774a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800774e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	2200      	movs	r2, #0
 800775c:	4619      	mov	r1, r3
 800775e:	4807      	ldr	r0, [pc, #28]	; (800777c <MX_TIM4_Init+0xac>)
 8007760:	f7fb fd40 	bl	80031e4 <HAL_TIM_PWM_ConfigChannel>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800776a:	f000 f997 	bl	8007a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800776e:	4803      	ldr	r0, [pc, #12]	; (800777c <MX_TIM4_Init+0xac>)
 8007770:	f000 fa2c 	bl	8007bcc <HAL_TIM_MspPostInit>

}
 8007774:	bf00      	nop
 8007776:	3728      	adds	r7, #40	; 0x28
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	200000cc 	.word	0x200000cc
 8007780:	40000800 	.word	0x40000800

08007784 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <MX_TIM10_Init+0x40>)
 800778a:	4a0f      	ldr	r2, [pc, #60]	; (80077c8 <MX_TIM10_Init+0x44>)
 800778c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16799;
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <MX_TIM10_Init+0x40>)
 8007790:	f244 129f 	movw	r2, #16799	; 0x419f
 8007794:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <MX_TIM10_Init+0x40>)
 8007798:	2200      	movs	r2, #0
 800779a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <MX_TIM10_Init+0x40>)
 800779e:	f242 7210 	movw	r2, #10000	; 0x2710
 80077a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077a4:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <MX_TIM10_Init+0x40>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077aa:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <MX_TIM10_Init+0x40>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80077b0:	4804      	ldr	r0, [pc, #16]	; (80077c4 <MX_TIM10_Init+0x40>)
 80077b2:	f7fb fb33 	bl	8002e1c <HAL_TIM_Base_Init>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80077bc:	f000 f96e 	bl	8007a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80077c0:	bf00      	nop
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	2000020c 	.word	0x2000020c
 80077c8:	40014400 	.word	0x40014400

080077cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80077d0:	4b11      	ldr	r3, [pc, #68]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077d2:	4a12      	ldr	r2, [pc, #72]	; (800781c <MX_USART2_UART_Init+0x50>)
 80077d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80077d6:	4b10      	ldr	r3, [pc, #64]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80077dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80077ea:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80077f0:	4b09      	ldr	r3, [pc, #36]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077f2:	220c      	movs	r2, #12
 80077f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007802:	4805      	ldr	r0, [pc, #20]	; (8007818 <MX_USART2_UART_Init+0x4c>)
 8007804:	f7fc fa34 	bl	8003c70 <HAL_UART_Init>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800780e:	f000 f945 	bl	8007a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	2000030c 	.word	0x2000030c
 800781c:	40004400 	.word	0x40004400

08007820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08c      	sub	sp, #48	; 0x30
 8007824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007826:	f107 031c 	add.w	r3, r7, #28
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	605a      	str	r2, [r3, #4]
 8007830:	609a      	str	r2, [r3, #8]
 8007832:	60da      	str	r2, [r3, #12]
 8007834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	61bb      	str	r3, [r7, #24]
 800783a:	4b91      	ldr	r3, [pc, #580]	; (8007a80 <MX_GPIO_Init+0x260>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	4a90      	ldr	r2, [pc, #576]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007840:	f043 0310 	orr.w	r3, r3, #16
 8007844:	6313      	str	r3, [r2, #48]	; 0x30
 8007846:	4b8e      	ldr	r3, [pc, #568]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f003 0310 	and.w	r3, r3, #16
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
 8007856:	4b8a      	ldr	r3, [pc, #552]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	4a89      	ldr	r2, [pc, #548]	; (8007a80 <MX_GPIO_Init+0x260>)
 800785c:	f043 0304 	orr.w	r3, r3, #4
 8007860:	6313      	str	r3, [r2, #48]	; 0x30
 8007862:	4b87      	ldr	r3, [pc, #540]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	617b      	str	r3, [r7, #20]
 800786c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800786e:	2300      	movs	r3, #0
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	4b83      	ldr	r3, [pc, #524]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	4a82      	ldr	r2, [pc, #520]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800787c:	6313      	str	r3, [r2, #48]	; 0x30
 800787e:	4b80      	ldr	r3, [pc, #512]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007886:	613b      	str	r3, [r7, #16]
 8007888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	4b7c      	ldr	r3, [pc, #496]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	4a7b      	ldr	r2, [pc, #492]	; (8007a80 <MX_GPIO_Init+0x260>)
 8007894:	f043 0301 	orr.w	r3, r3, #1
 8007898:	6313      	str	r3, [r2, #48]	; 0x30
 800789a:	4b79      	ldr	r3, [pc, #484]	; (8007a80 <MX_GPIO_Init+0x260>)
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80078a6:	2300      	movs	r3, #0
 80078a8:	60bb      	str	r3, [r7, #8]
 80078aa:	4b75      	ldr	r3, [pc, #468]	; (8007a80 <MX_GPIO_Init+0x260>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	4a74      	ldr	r2, [pc, #464]	; (8007a80 <MX_GPIO_Init+0x260>)
 80078b0:	f043 0302 	orr.w	r3, r3, #2
 80078b4:	6313      	str	r3, [r2, #48]	; 0x30
 80078b6:	4b72      	ldr	r3, [pc, #456]	; (8007a80 <MX_GPIO_Init+0x260>)
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80078c2:	2300      	movs	r3, #0
 80078c4:	607b      	str	r3, [r7, #4]
 80078c6:	4b6e      	ldr	r3, [pc, #440]	; (8007a80 <MX_GPIO_Init+0x260>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	4a6d      	ldr	r2, [pc, #436]	; (8007a80 <MX_GPIO_Init+0x260>)
 80078cc:	f043 0308 	orr.w	r3, r3, #8
 80078d0:	6313      	str	r3, [r2, #48]	; 0x30
 80078d2:	4b6b      	ldr	r3, [pc, #428]	; (8007a80 <MX_GPIO_Init+0x260>)
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	607b      	str	r3, [r7, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80078de:	2200      	movs	r2, #0
 80078e0:	2108      	movs	r1, #8
 80078e2:	4868      	ldr	r0, [pc, #416]	; (8007a84 <MX_GPIO_Init+0x264>)
 80078e4:	f7f9 f99c 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80078e8:	2201      	movs	r2, #1
 80078ea:	2101      	movs	r1, #1
 80078ec:	4866      	ldr	r0, [pc, #408]	; (8007a88 <MX_GPIO_Init+0x268>)
 80078ee:	f7f9 f997 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80078f2:	2200      	movs	r2, #0
 80078f4:	2150      	movs	r1, #80	; 0x50
 80078f6:	4865      	ldr	r0, [pc, #404]	; (8007a8c <MX_GPIO_Init+0x26c>)
 80078f8:	f7f9 f992 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|GPIO_PIN_2 
 80078fc:	2200      	movs	r2, #0
 80078fe:	f24e 0114 	movw	r1, #57364	; 0xe014
 8007902:	4863      	ldr	r0, [pc, #396]	; (8007a90 <MX_GPIO_Init+0x270>)
 8007904:	f7f9 f98c 	bl	8000c20 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007908:	2308      	movs	r3, #8
 800790a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800790c:	2301      	movs	r3, #1
 800790e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007910:	2300      	movs	r3, #0
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007914:	2300      	movs	r3, #0
 8007916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007918:	f107 031c 	add.w	r3, r7, #28
 800791c:	4619      	mov	r1, r3
 800791e:	4859      	ldr	r0, [pc, #356]	; (8007a84 <MX_GPIO_Init+0x264>)
 8007920:	f7f8 ffcc 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007924:	2301      	movs	r3, #1
 8007926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007928:	2301      	movs	r3, #1
 800792a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007930:	2300      	movs	r3, #0
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007934:	f107 031c 	add.w	r3, r7, #28
 8007938:	4619      	mov	r1, r3
 800793a:	4853      	ldr	r0, [pc, #332]	; (8007a88 <MX_GPIO_Init+0x268>)
 800793c:	f7f8 ffbe 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8007940:	2308      	movs	r3, #8
 8007942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007944:	2302      	movs	r3, #2
 8007946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800794c:	2300      	movs	r3, #0
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007950:	2305      	movs	r3, #5
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007954:	f107 031c 	add.w	r3, r7, #28
 8007958:	4619      	mov	r1, r3
 800795a:	484b      	ldr	r0, [pc, #300]	; (8007a88 <MX_GPIO_Init+0x268>)
 800795c:	f7f8 ffae 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007960:	2301      	movs	r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007964:	4b4b      	ldr	r3, [pc, #300]	; (8007a94 <MX_GPIO_Init+0x274>)
 8007966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007968:	2300      	movs	r3, #0
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800796c:	f107 031c 	add.w	r3, r7, #28
 8007970:	4619      	mov	r1, r3
 8007972:	4846      	ldr	r0, [pc, #280]	; (8007a8c <MX_GPIO_Init+0x26c>)
 8007974:	f7f8 ffa2 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8007978:	2350      	movs	r3, #80	; 0x50
 800797a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800797c:	2301      	movs	r3, #1
 800797e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007980:	2300      	movs	r3, #0
 8007982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007984:	2300      	movs	r3, #0
 8007986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007988:	f107 031c 	add.w	r3, r7, #28
 800798c:	4619      	mov	r1, r3
 800798e:	483f      	ldr	r0, [pc, #252]	; (8007a8c <MX_GPIO_Init+0x26c>)
 8007990:	f7f8 ff94 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8007994:	23a0      	movs	r3, #160	; 0xa0
 8007996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007998:	2300      	movs	r3, #0
 800799a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799c:	2300      	movs	r3, #0
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079a0:	f107 031c 	add.w	r3, r7, #28
 80079a4:	4619      	mov	r1, r3
 80079a6:	4839      	ldr	r0, [pc, #228]	; (8007a8c <MX_GPIO_Init+0x26c>)
 80079a8:	f7f8 ff88 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80079ac:	2304      	movs	r3, #4
 80079ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079b0:	2300      	movs	r3, #0
 80079b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80079b8:	f107 031c 	add.w	r3, r7, #28
 80079bc:	4619      	mov	r1, r3
 80079be:	4836      	ldr	r0, [pc, #216]	; (8007a98 <MX_GPIO_Init+0x278>)
 80079c0:	f7f8 ff7c 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80079c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ca:	2302      	movs	r3, #2
 80079cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ce:	2300      	movs	r3, #0
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079d2:	2300      	movs	r3, #0
 80079d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80079d6:	2305      	movs	r3, #5
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80079da:	f107 031c 	add.w	r3, r7, #28
 80079de:	4619      	mov	r1, r3
 80079e0:	482d      	ldr	r0, [pc, #180]	; (8007a98 <MX_GPIO_Init+0x278>)
 80079e2:	f7f8 ff6b 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin LD6_Pin PD2 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|GPIO_PIN_2 
 80079e6:	f24e 0314 	movw	r3, #57364	; 0xe014
 80079ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079ec:	2301      	movs	r3, #1
 80079ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f0:	2300      	movs	r3, #0
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079f4:	2300      	movs	r3, #0
 80079f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80079f8:	f107 031c 	add.w	r3, r7, #28
 80079fc:	4619      	mov	r1, r3
 80079fe:	4824      	ldr	r0, [pc, #144]	; (8007a90 <MX_GPIO_Init+0x270>)
 8007a00:	f7f8 ff5c 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007a04:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a12:	2300      	movs	r3, #0
 8007a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007a16:	2306      	movs	r3, #6
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a1a:	f107 031c 	add.w	r3, r7, #28
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4819      	ldr	r0, [pc, #100]	; (8007a88 <MX_GPIO_Init+0x268>)
 8007a22:	f7f8 ff4b 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|OTG_FS_OverCurrent_Pin;
 8007a26:	2322      	movs	r3, #34	; 0x22
 8007a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a32:	f107 031c 	add.w	r3, r7, #28
 8007a36:	4619      	mov	r1, r3
 8007a38:	4815      	ldr	r0, [pc, #84]	; (8007a90 <MX_GPIO_Init+0x270>)
 8007a3a:	f7f8 ff3f 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a44:	2312      	movs	r3, #18
 8007a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a50:	2304      	movs	r3, #4
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a54:	f107 031c 	add.w	r3, r7, #28
 8007a58:	4619      	mov	r1, r3
 8007a5a:	480f      	ldr	r0, [pc, #60]	; (8007a98 <MX_GPIO_Init+0x278>)
 8007a5c:	f7f8 ff2e 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007a60:	2302      	movs	r3, #2
 8007a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007a64:	4b0b      	ldr	r3, [pc, #44]	; (8007a94 <MX_GPIO_Init+0x274>)
 8007a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007a6c:	f107 031c 	add.w	r3, r7, #28
 8007a70:	4619      	mov	r1, r3
 8007a72:	4804      	ldr	r0, [pc, #16]	; (8007a84 <MX_GPIO_Init+0x264>)
 8007a74:	f7f8 ff22 	bl	80008bc <HAL_GPIO_Init>

}
 8007a78:	bf00      	nop
 8007a7a:	3730      	adds	r7, #48	; 0x30
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40021000 	.word	0x40021000
 8007a88:	40020800 	.word	0x40020800
 8007a8c:	40020000 	.word	0x40020000
 8007a90:	40020c00 	.word	0x40020c00
 8007a94:	10120000 	.word	0x10120000
 8007a98:	40020400 	.word	0x40020400

08007a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007aa0:	bf00      	nop
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	607b      	str	r3, [r7, #4]
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <HAL_MspInit+0x4c>)
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aba:	4a0f      	ldr	r2, [pc, #60]	; (8007af8 <HAL_MspInit+0x4c>)
 8007abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ac2:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <HAL_MspInit+0x4c>)
 8007ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007aca:	607b      	str	r3, [r7, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ace:	2300      	movs	r3, #0
 8007ad0:	603b      	str	r3, [r7, #0]
 8007ad2:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <HAL_MspInit+0x4c>)
 8007ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad6:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <HAL_MspInit+0x4c>)
 8007ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007adc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ade:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <HAL_MspInit+0x4c>)
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007aea:	2007      	movs	r0, #7
 8007aec:	f7f8 fea4 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	40023800 	.word	0x40023800

08007afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a1c      	ldr	r2, [pc, #112]	; (8007b7c <HAL_TIM_Base_MspInit+0x80>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d116      	bne.n	8007b3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	4b1b      	ldr	r3, [pc, #108]	; (8007b80 <HAL_TIM_Base_MspInit+0x84>)
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	4a1a      	ldr	r2, [pc, #104]	; (8007b80 <HAL_TIM_Base_MspInit+0x84>)
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b1e:	4b18      	ldr	r3, [pc, #96]	; (8007b80 <HAL_TIM_Base_MspInit+0x84>)
 8007b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	2019      	movs	r0, #25
 8007b30:	f7f8 fe8d 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007b34:	2019      	movs	r0, #25
 8007b36:	f7f8 fea6 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8007b3a:	e01a      	b.n	8007b72 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a10      	ldr	r2, [pc, #64]	; (8007b84 <HAL_TIM_Base_MspInit+0x88>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d115      	bne.n	8007b72 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007b46:	2300      	movs	r3, #0
 8007b48:	60bb      	str	r3, [r7, #8]
 8007b4a:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <HAL_TIM_Base_MspInit+0x84>)
 8007b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <HAL_TIM_Base_MspInit+0x84>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b54:	6453      	str	r3, [r2, #68]	; 0x44
 8007b56:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <HAL_TIM_Base_MspInit+0x84>)
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5e:	60bb      	str	r3, [r7, #8]
 8007b60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007b62:	2200      	movs	r2, #0
 8007b64:	2100      	movs	r1, #0
 8007b66:	2019      	movs	r0, #25
 8007b68:	f7f8 fe71 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007b6c:	2019      	movs	r0, #25
 8007b6e:	f7f8 fe8a 	bl	8000886 <HAL_NVIC_EnableIRQ>
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40023800 	.word	0x40023800
 8007b84:	40014400 	.word	0x40014400

08007b88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a0b      	ldr	r2, [pc, #44]	; (8007bc4 <HAL_TIM_PWM_MspInit+0x3c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d10d      	bne.n	8007bb6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <HAL_TIM_PWM_MspInit+0x40>)
 8007ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba2:	4a09      	ldr	r2, [pc, #36]	; (8007bc8 <HAL_TIM_PWM_MspInit+0x40>)
 8007ba4:	f043 0304 	orr.w	r3, r3, #4
 8007ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <HAL_TIM_PWM_MspInit+0x40>)
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40000800 	.word	0x40000800
 8007bc8:	40023800 	.word	0x40023800

08007bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	605a      	str	r2, [r3, #4]
 8007bde:	609a      	str	r2, [r3, #8]
 8007be0:	60da      	str	r2, [r3, #12]
 8007be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <HAL_TIM_MspPostInit+0x68>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d11e      	bne.n	8007c2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	4b11      	ldr	r3, [pc, #68]	; (8007c38 <HAL_TIM_MspPostInit+0x6c>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	4a10      	ldr	r2, [pc, #64]	; (8007c38 <HAL_TIM_MspPostInit+0x6c>)
 8007bf8:	f043 0308 	orr.w	r3, r3, #8
 8007bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <HAL_TIM_MspPostInit+0x6c>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	60bb      	str	r3, [r7, #8]
 8007c08:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c10:	2302      	movs	r3, #2
 8007c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c20:	f107 030c 	add.w	r3, r7, #12
 8007c24:	4619      	mov	r1, r3
 8007c26:	4805      	ldr	r0, [pc, #20]	; (8007c3c <HAL_TIM_MspPostInit+0x70>)
 8007c28:	f7f8 fe48 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007c2c:	bf00      	nop
 8007c2e:	3720      	adds	r7, #32
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40000800 	.word	0x40000800
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	40020c00 	.word	0x40020c00

08007c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08a      	sub	sp, #40	; 0x28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	609a      	str	r2, [r3, #8]
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a19      	ldr	r2, [pc, #100]	; (8007cc4 <HAL_UART_MspInit+0x84>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d12b      	bne.n	8007cba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007c62:	2300      	movs	r3, #0
 8007c64:	613b      	str	r3, [r7, #16]
 8007c66:	4b18      	ldr	r3, [pc, #96]	; (8007cc8 <HAL_UART_MspInit+0x88>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <HAL_UART_MspInit+0x88>)
 8007c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c70:	6413      	str	r3, [r2, #64]	; 0x40
 8007c72:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <HAL_UART_MspInit+0x88>)
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c7a:	613b      	str	r3, [r7, #16]
 8007c7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
 8007c82:	4b11      	ldr	r3, [pc, #68]	; (8007cc8 <HAL_UART_MspInit+0x88>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	4a10      	ldr	r2, [pc, #64]	; (8007cc8 <HAL_UART_MspInit+0x88>)
 8007c88:	f043 0301 	orr.w	r3, r3, #1
 8007c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c8e:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <HAL_UART_MspInit+0x88>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007caa:	2307      	movs	r3, #7
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cae:	f107 0314 	add.w	r3, r7, #20
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4805      	ldr	r0, [pc, #20]	; (8007ccc <HAL_UART_MspInit+0x8c>)
 8007cb6:	f7f8 fe01 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007cba:	bf00      	nop
 8007cbc:	3728      	adds	r7, #40	; 0x28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40004400 	.word	0x40004400
 8007cc8:	40023800 	.word	0x40023800
 8007ccc:	40020000 	.word	0x40020000

08007cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007cd4:	bf00      	nop
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ce2:	e7fe      	b.n	8007ce2 <HardFault_Handler+0x4>

08007ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ce8:	e7fe      	b.n	8007ce8 <MemManage_Handler+0x4>

08007cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cea:	b480      	push	{r7}
 8007cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007cee:	e7fe      	b.n	8007cee <BusFault_Handler+0x4>

08007cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007cf4:	e7fe      	b.n	8007cf4 <UsageFault_Handler+0x4>

08007cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007cfa:	bf00      	nop
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d08:	bf00      	nop
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d12:	b480      	push	{r7}
 8007d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d16:	bf00      	nop
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d24:	f7f8 fc76 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007d28:	bf00      	nop
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d30:	4803      	ldr	r0, [pc, #12]	; (8007d40 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8007d32:	f7fb f94f 	bl	8002fd4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8007d36:	4803      	ldr	r0, [pc, #12]	; (8007d44 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8007d38:	f7fb f94c 	bl	8002fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007d3c:	bf00      	nop
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200002cc 	.word	0x200002cc
 8007d44:	2000020c 	.word	0x2000020c

08007d48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007d4c:	4802      	ldr	r0, [pc, #8]	; (8007d58 <OTG_FS_IRQHandler+0x10>)
 8007d4e:	f7f9 fa21 	bl	8001194 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007d52:	bf00      	nop
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000718 	.word	0x20000718

08007d5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d64:	4b11      	ldr	r3, [pc, #68]	; (8007dac <_sbrk+0x50>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <_sbrk+0x16>
		heap_end = &end;
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <_sbrk+0x50>)
 8007d6e:	4a10      	ldr	r2, [pc, #64]	; (8007db0 <_sbrk+0x54>)
 8007d70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007d72:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <_sbrk+0x50>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007d78:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <_sbrk+0x50>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	466a      	mov	r2, sp
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d907      	bls.n	8007d96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d86:	f000 fb5d 	bl	8008444 <__errno>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	230c      	movs	r3, #12
 8007d8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007d90:	f04f 33ff 	mov.w	r3, #4294967295
 8007d94:	e006      	b.n	8007da4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <_sbrk+0x50>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	4a03      	ldr	r2, [pc, #12]	; (8007dac <_sbrk+0x50>)
 8007da0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	200000b4 	.word	0x200000b4
 8007db0:	200009e0 	.word	0x200009e0

08007db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007db8:	4b08      	ldr	r3, [pc, #32]	; (8007ddc <SystemInit+0x28>)
 8007dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dbe:	4a07      	ldr	r2, [pc, #28]	; (8007ddc <SystemInit+0x28>)
 8007dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007dc8:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <SystemInit+0x28>)
 8007dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007dce:	609a      	str	r2, [r3, #8]
#endif
}
 8007dd0:	bf00      	nop
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000ed00 	.word	0xe000ed00

08007de0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007de4:	2201      	movs	r2, #1
 8007de6:	490e      	ldr	r1, [pc, #56]	; (8007e20 <MX_USB_HOST_Init+0x40>)
 8007de8:	480e      	ldr	r0, [pc, #56]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007dea:	f7fd ff6b 	bl	8005cc4 <USBH_Init>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007df4:	f7ff fe52 	bl	8007a9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007df8:	490b      	ldr	r1, [pc, #44]	; (8007e28 <MX_USB_HOST_Init+0x48>)
 8007dfa:	480a      	ldr	r0, [pc, #40]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007dfc:	f7fd ffd5 	bl	8005daa <USBH_RegisterClass>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007e06:	f7ff fe49 	bl	8007a9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007e0a:	4806      	ldr	r0, [pc, #24]	; (8007e24 <MX_USB_HOST_Init+0x44>)
 8007e0c:	f7fe f85a 	bl	8005ec4 <USBH_Start>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007e16:	f7ff fe41 	bl	8007a9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007e1a:	bf00      	nop
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	08007e41 	.word	0x08007e41
 8007e24:	2000034c 	.word	0x2000034c
 8007e28:	20000008 	.word	0x20000008

08007e2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007e30:	4802      	ldr	r0, [pc, #8]	; (8007e3c <MX_USB_HOST_Process+0x10>)
 8007e32:	f7fe f857 	bl	8005ee4 <USBH_Process>
}
 8007e36:	bf00      	nop
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	2000034c 	.word	0x2000034c

08007e40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d819      	bhi.n	8007e88 <USBH_UserProcess+0x48>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <USBH_UserProcess+0x1c>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e89 	.word	0x08007e89
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007e89 	.word	0x08007e89
 8007e68:	08007e81 	.word	0x08007e81
 8007e6c:	08007e71 	.word	0x08007e71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e72:	2203      	movs	r2, #3
 8007e74:	701a      	strb	r2, [r3, #0]
  break;
 8007e76:	e008      	b.n	8007e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e78:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	701a      	strb	r2, [r3, #0]
  break;
 8007e7e:	e004      	b.n	8007e8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <USBH_UserProcess+0x58>)
 8007e82:	2201      	movs	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
  break;
 8007e86:	e000      	b.n	8007e8a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	200000b8 	.word	0x200000b8

08007e9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea4:	f107 0314 	add.w	r3, r7, #20
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	60da      	str	r2, [r3, #12]
 8007eb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ebc:	d147      	bne.n	8007f4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec6:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8007ece:	4b22      	ldr	r3, [pc, #136]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	613b      	str	r3, [r7, #16]
 8007ed8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007ee8:	f107 0314 	add.w	r3, r7, #20
 8007eec:	4619      	mov	r1, r3
 8007eee:	481b      	ldr	r0, [pc, #108]	; (8007f5c <HAL_HCD_MspInit+0xc0>)
 8007ef0:	f7f8 fce4 	bl	80008bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007ef4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007efa:	2302      	movs	r3, #2
 8007efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f02:	2300      	movs	r3, #0
 8007f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f06:	230a      	movs	r3, #10
 8007f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f0a:	f107 0314 	add.w	r3, r7, #20
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4812      	ldr	r0, [pc, #72]	; (8007f5c <HAL_HCD_MspInit+0xc0>)
 8007f12:	f7f8 fcd3 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f16:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	4a0f      	ldr	r2, [pc, #60]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f20:	6353      	str	r3, [r2, #52]	; 0x34
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2a:	4a0b      	ldr	r2, [pc, #44]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f30:	6453      	str	r3, [r2, #68]	; 0x44
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <HAL_HCD_MspInit+0xbc>)
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	2043      	movs	r0, #67	; 0x43
 8007f44:	f7f8 fc83 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f48:	2043      	movs	r0, #67	; 0x43
 8007f4a:	f7f8 fc9c 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f4e:	bf00      	nop
 8007f50:	3728      	adds	r7, #40	; 0x28
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	40023800 	.word	0x40023800
 8007f5c:	40020000 	.word	0x40020000

08007f60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fa69 	bl	8006446 <USBH_LL_IncTimer>
}
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe faae 	bl	80064ec <USBH_LL_Connect>
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fac6 	bl	8006538 <USBH_LL_Disconnect>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fa5b 	bl	800649a <USBH_LL_PortEnabled>
} 
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fa5b 	bl	80064b6 <USBH_LL_PortDisabled>
} 
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d12a      	bne.n	8008070 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800801a:	4a18      	ldr	r2, [pc, #96]	; (800807c <USBH_LL_Init+0x74>)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a15      	ldr	r2, [pc, #84]	; (800807c <USBH_LL_Init+0x74>)
 8008026:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800802a:	4b14      	ldr	r3, [pc, #80]	; (800807c <USBH_LL_Init+0x74>)
 800802c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008030:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <USBH_LL_Init+0x74>)
 8008034:	2208      	movs	r2, #8
 8008036:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008038:	4b10      	ldr	r3, [pc, #64]	; (800807c <USBH_LL_Init+0x74>)
 800803a:	2201      	movs	r2, #1
 800803c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <USBH_LL_Init+0x74>)
 8008040:	2200      	movs	r2, #0
 8008042:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008044:	4b0d      	ldr	r3, [pc, #52]	; (800807c <USBH_LL_Init+0x74>)
 8008046:	2202      	movs	r2, #2
 8008048:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800804a:	4b0c      	ldr	r3, [pc, #48]	; (800807c <USBH_LL_Init+0x74>)
 800804c:	2200      	movs	r2, #0
 800804e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008050:	480a      	ldr	r0, [pc, #40]	; (800807c <USBH_LL_Init+0x74>)
 8008052:	f7f8 fe19 	bl	8000c88 <HAL_HCD_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800805c:	f7ff fd1e 	bl	8007a9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008060:	4806      	ldr	r0, [pc, #24]	; (800807c <USBH_LL_Init+0x74>)
 8008062:	f7f9 fa15 	bl	8001490 <HAL_HCD_GetCurrentFrame>
 8008066:	4603      	mov	r3, r0
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fe f9dc 	bl	8006428 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000718 	.word	0x20000718

08008080 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008096:	4618      	mov	r0, r3
 8008098:	f7f9 f982 	bl	80013a0 <HAL_HCD_Start>
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 f95c 	bl	8008360 <USBH_Get_USB_Status>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80080ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7f9 f98a 	bl	80013e6 <HAL_HCD_Stop>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	4618      	mov	r0, r3
 80080da:	f000 f941 	bl	8008360 <USBH_Get_USB_Status>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080fe:	4618      	mov	r0, r3
 8008100:	f7f9 f9d4 	bl	80014ac <HAL_HCD_GetCurrentSpeed>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d007      	beq.n	800811a <USBH_LL_GetSpeed+0x2e>
 800810a:	2b01      	cmp	r3, #1
 800810c:	d302      	bcc.n	8008114 <USBH_LL_GetSpeed+0x28>
 800810e:	2b02      	cmp	r3, #2
 8008110:	d006      	beq.n	8008120 <USBH_LL_GetSpeed+0x34>
 8008112:	e008      	b.n	8008126 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]
    break;
 8008118:	e008      	b.n	800812c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800811a:	2301      	movs	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
    break;
 800811e:	e005      	b.n	800812c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008120:	2302      	movs	r3, #2
 8008122:	73fb      	strb	r3, [r7, #15]
    break;
 8008124:	e002      	b.n	800812c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
    break;
 800812a:	bf00      	nop
  }
  return  speed;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b084      	sub	sp, #16
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813e:	2300      	movs	r3, #0
 8008140:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800814c:	4618      	mov	r0, r3
 800814e:	f7f9 f967 	bl	8001420 <HAL_HCD_ResetPort>
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f901 	bl	8008360 <USBH_Get_USB_Status>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008162:	7bbb      	ldrb	r3, [r7, #14]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	4611      	mov	r1, r2
 8008182:	4618      	mov	r0, r3
 8008184:	f7f9 f96f 	bl	8001466 <HAL_HCD_HC_GetXferCount>
 8008188:	4603      	mov	r3, r0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008192:	b590      	push	{r4, r7, lr}
 8008194:	b089      	sub	sp, #36	; 0x24
 8008196:	af04      	add	r7, sp, #16
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	461a      	mov	r2, r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	70fb      	strb	r3, [r7, #3]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70bb      	strb	r3, [r7, #2]
 80081a8:	4613      	mov	r3, r2
 80081aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80081ba:	787c      	ldrb	r4, [r7, #1]
 80081bc:	78ba      	ldrb	r2, [r7, #2]
 80081be:	78f9      	ldrb	r1, [r7, #3]
 80081c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081c2:	9302      	str	r3, [sp, #8]
 80081c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	4623      	mov	r3, r4
 80081d2:	f7f8 fdbb 	bl	8000d4c <HAL_HCD_HC_Init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 f8bf 	bl	8008360 <USBH_Get_USB_Status>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd90      	pop	{r4, r7, pc}

080081f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800820a:	78fa      	ldrb	r2, [r7, #3]
 800820c:	4611      	mov	r1, r2
 800820e:	4618      	mov	r0, r3
 8008210:	f7f8 fe34 	bl	8000e7c <HAL_HCD_HC_Halt>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f8a0 	bl	8008360 <USBH_Get_USB_Status>
 8008220:	4603      	mov	r3, r0
 8008222:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008224:	7bbb      	ldrb	r3, [r7, #14]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800822e:	b590      	push	{r4, r7, lr}
 8008230:	b089      	sub	sp, #36	; 0x24
 8008232:	af04      	add	r7, sp, #16
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	4608      	mov	r0, r1
 8008238:	4611      	mov	r1, r2
 800823a:	461a      	mov	r2, r3
 800823c:	4603      	mov	r3, r0
 800823e:	70fb      	strb	r3, [r7, #3]
 8008240:	460b      	mov	r3, r1
 8008242:	70bb      	strb	r3, [r7, #2]
 8008244:	4613      	mov	r3, r2
 8008246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008256:	787c      	ldrb	r4, [r7, #1]
 8008258:	78ba      	ldrb	r2, [r7, #2]
 800825a:	78f9      	ldrb	r1, [r7, #3]
 800825c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008260:	9303      	str	r3, [sp, #12]
 8008262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008264:	9302      	str	r3, [sp, #8]
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	4623      	mov	r3, r4
 8008272:	f7f8 fe27 	bl	8000ec4 <HAL_HCD_HC_SubmitRequest>
 8008276:	4603      	mov	r3, r0
 8008278:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800827a:	7bfb      	ldrb	r3, [r7, #15]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 f86f 	bl	8008360 <USBH_Get_USB_Status>
 8008282:	4603      	mov	r3, r0
 8008284:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008286:	7bbb      	ldrb	r3, [r7, #14]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	bd90      	pop	{r4, r7, pc}

08008290 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	460b      	mov	r3, r1
 800829a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	4611      	mov	r1, r2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7f9 f8c8 	bl	800143c <HAL_HCD_HC_GetURBState>
 80082ac:	4603      	mov	r3, r0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b082      	sub	sp, #8
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	460b      	mov	r3, r1
 80082c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d103      	bne.n	80082d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f872 	bl	80083b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80082d4:	20c8      	movs	r0, #200	; 0xc8
 80082d6:	f7f8 f9bd 	bl	8000654 <HAL_Delay>
  return USBH_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
 80082f0:	4613      	mov	r3, r2
 80082f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80082fc:	78fa      	ldrb	r2, [r7, #3]
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	440b      	add	r3, r1
 800830a:	333b      	adds	r3, #59	; 0x3b
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	440b      	add	r3, r1
 8008320:	3350      	adds	r3, #80	; 0x50
 8008322:	78ba      	ldrb	r2, [r7, #2]
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	e009      	b.n	800833c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	00db      	lsls	r3, r3, #3
 8008334:	440b      	add	r3, r1
 8008336:	3351      	adds	r3, #81	; 0x51
 8008338:	78ba      	ldrb	r2, [r7, #2]
 800833a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7f8 f97e 	bl	8000654 <HAL_Delay>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	2b03      	cmp	r3, #3
 8008372:	d817      	bhi.n	80083a4 <USBH_Get_USB_Status+0x44>
 8008374:	a201      	add	r2, pc, #4	; (adr r2, 800837c <USBH_Get_USB_Status+0x1c>)
 8008376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837a:	bf00      	nop
 800837c:	0800838d 	.word	0x0800838d
 8008380:	08008393 	.word	0x08008393
 8008384:	08008399 	.word	0x08008399
 8008388:	0800839f 	.word	0x0800839f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
    break;
 8008390:	e00b      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008392:	2302      	movs	r3, #2
 8008394:	73fb      	strb	r3, [r7, #15]
    break;
 8008396:	e008      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
    break;
 800839c:	e005      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
    break;
 80083a2:	e002      	b.n	80083aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	73fb      	strb	r3, [r7, #15]
    break;
 80083a8:	bf00      	nop
  }
  return usb_status;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80083c2:	79fb      	ldrb	r3, [r7, #7]
 80083c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d102      	bne.n	80083d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
 80083d0:	e001      	b.n	80083d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80083d2:	2300      	movs	r3, #0
 80083d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	461a      	mov	r2, r3
 80083da:	2101      	movs	r1, #1
 80083dc:	4803      	ldr	r0, [pc, #12]	; (80083ec <MX_DriverVbusFS+0x34>)
 80083de:	f7f8 fc1f 	bl	8000c20 <HAL_GPIO_WritePin>
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	40020800 	.word	0x40020800

080083f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80083f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008428 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80083f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80083f6:	e003      	b.n	8008400 <LoopCopyDataInit>

080083f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80083fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80083fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80083fe:	3104      	adds	r1, #4

08008400 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008400:	480b      	ldr	r0, [pc, #44]	; (8008430 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008402:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008404:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008406:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008408:	d3f6      	bcc.n	80083f8 <CopyDataInit>
  ldr  r2, =_sbss
 800840a:	4a0b      	ldr	r2, [pc, #44]	; (8008438 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800840c:	e002      	b.n	8008414 <LoopFillZerobss>

0800840e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800840e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008410:	f842 3b04 	str.w	r3, [r2], #4

08008414 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008414:	4b09      	ldr	r3, [pc, #36]	; (800843c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008416:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008418:	d3f9      	bcc.n	800840e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800841a:	f7ff fccb 	bl	8007db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800841e:	f000 f817 	bl	8008450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008422:	f7fe fffb 	bl	800741c <main>
  bx  lr    
 8008426:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008428:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800842c:	08008d54 	.word	0x08008d54
  ldr  r0, =_sdata
 8008430:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008434:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8008438:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800843c:	200009e0 	.word	0x200009e0

08008440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008440:	e7fe      	b.n	8008440 <ADC_IRQHandler>
	...

08008444 <__errno>:
 8008444:	4b01      	ldr	r3, [pc, #4]	; (800844c <__errno+0x8>)
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	20000030 	.word	0x20000030

08008450 <__libc_init_array>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4e0d      	ldr	r6, [pc, #52]	; (8008488 <__libc_init_array+0x38>)
 8008454:	4c0d      	ldr	r4, [pc, #52]	; (800848c <__libc_init_array+0x3c>)
 8008456:	1ba4      	subs	r4, r4, r6
 8008458:	10a4      	asrs	r4, r4, #2
 800845a:	2500      	movs	r5, #0
 800845c:	42a5      	cmp	r5, r4
 800845e:	d109      	bne.n	8008474 <__libc_init_array+0x24>
 8008460:	4e0b      	ldr	r6, [pc, #44]	; (8008490 <__libc_init_array+0x40>)
 8008462:	4c0c      	ldr	r4, [pc, #48]	; (8008494 <__libc_init_array+0x44>)
 8008464:	f000 fc36 	bl	8008cd4 <_init>
 8008468:	1ba4      	subs	r4, r4, r6
 800846a:	10a4      	asrs	r4, r4, #2
 800846c:	2500      	movs	r5, #0
 800846e:	42a5      	cmp	r5, r4
 8008470:	d105      	bne.n	800847e <__libc_init_array+0x2e>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008478:	4798      	blx	r3
 800847a:	3501      	adds	r5, #1
 800847c:	e7ee      	b.n	800845c <__libc_init_array+0xc>
 800847e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008482:	4798      	blx	r3
 8008484:	3501      	adds	r5, #1
 8008486:	e7f2      	b.n	800846e <__libc_init_array+0x1e>
 8008488:	08008d4c 	.word	0x08008d4c
 800848c:	08008d4c 	.word	0x08008d4c
 8008490:	08008d4c 	.word	0x08008d4c
 8008494:	08008d50 	.word	0x08008d50

08008498 <malloc>:
 8008498:	4b02      	ldr	r3, [pc, #8]	; (80084a4 <malloc+0xc>)
 800849a:	4601      	mov	r1, r0
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	f000 b861 	b.w	8008564 <_malloc_r>
 80084a2:	bf00      	nop
 80084a4:	20000030 	.word	0x20000030

080084a8 <free>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <free+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f000 b80b 	b.w	80084c8 <_free_r>
 80084b2:	bf00      	nop
 80084b4:	20000030 	.word	0x20000030

080084b8 <memset>:
 80084b8:	4402      	add	r2, r0
 80084ba:	4603      	mov	r3, r0
 80084bc:	4293      	cmp	r3, r2
 80084be:	d100      	bne.n	80084c2 <memset+0xa>
 80084c0:	4770      	bx	lr
 80084c2:	f803 1b01 	strb.w	r1, [r3], #1
 80084c6:	e7f9      	b.n	80084bc <memset+0x4>

080084c8 <_free_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4605      	mov	r5, r0
 80084cc:	2900      	cmp	r1, #0
 80084ce:	d045      	beq.n	800855c <_free_r+0x94>
 80084d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d4:	1f0c      	subs	r4, r1, #4
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bfb8      	it	lt
 80084da:	18e4      	addlt	r4, r4, r3
 80084dc:	f000 f8cc 	bl	8008678 <__malloc_lock>
 80084e0:	4a1f      	ldr	r2, [pc, #124]	; (8008560 <_free_r+0x98>)
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	4610      	mov	r0, r2
 80084e6:	b933      	cbnz	r3, 80084f6 <_free_r+0x2e>
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	6014      	str	r4, [r2, #0]
 80084ec:	4628      	mov	r0, r5
 80084ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f2:	f000 b8c2 	b.w	800867a <__malloc_unlock>
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	d90c      	bls.n	8008514 <_free_r+0x4c>
 80084fa:	6821      	ldr	r1, [r4, #0]
 80084fc:	1862      	adds	r2, r4, r1
 80084fe:	4293      	cmp	r3, r2
 8008500:	bf04      	itt	eq
 8008502:	681a      	ldreq	r2, [r3, #0]
 8008504:	685b      	ldreq	r3, [r3, #4]
 8008506:	6063      	str	r3, [r4, #4]
 8008508:	bf04      	itt	eq
 800850a:	1852      	addeq	r2, r2, r1
 800850c:	6022      	streq	r2, [r4, #0]
 800850e:	6004      	str	r4, [r0, #0]
 8008510:	e7ec      	b.n	80084ec <_free_r+0x24>
 8008512:	4613      	mov	r3, r2
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	b10a      	cbz	r2, 800851c <_free_r+0x54>
 8008518:	42a2      	cmp	r2, r4
 800851a:	d9fa      	bls.n	8008512 <_free_r+0x4a>
 800851c:	6819      	ldr	r1, [r3, #0]
 800851e:	1858      	adds	r0, r3, r1
 8008520:	42a0      	cmp	r0, r4
 8008522:	d10b      	bne.n	800853c <_free_r+0x74>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	4401      	add	r1, r0
 8008528:	1858      	adds	r0, r3, r1
 800852a:	4282      	cmp	r2, r0
 800852c:	6019      	str	r1, [r3, #0]
 800852e:	d1dd      	bne.n	80084ec <_free_r+0x24>
 8008530:	6810      	ldr	r0, [r2, #0]
 8008532:	6852      	ldr	r2, [r2, #4]
 8008534:	605a      	str	r2, [r3, #4]
 8008536:	4401      	add	r1, r0
 8008538:	6019      	str	r1, [r3, #0]
 800853a:	e7d7      	b.n	80084ec <_free_r+0x24>
 800853c:	d902      	bls.n	8008544 <_free_r+0x7c>
 800853e:	230c      	movs	r3, #12
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	e7d3      	b.n	80084ec <_free_r+0x24>
 8008544:	6820      	ldr	r0, [r4, #0]
 8008546:	1821      	adds	r1, r4, r0
 8008548:	428a      	cmp	r2, r1
 800854a:	bf04      	itt	eq
 800854c:	6811      	ldreq	r1, [r2, #0]
 800854e:	6852      	ldreq	r2, [r2, #4]
 8008550:	6062      	str	r2, [r4, #4]
 8008552:	bf04      	itt	eq
 8008554:	1809      	addeq	r1, r1, r0
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	605c      	str	r4, [r3, #4]
 800855a:	e7c7      	b.n	80084ec <_free_r+0x24>
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	bf00      	nop
 8008560:	200000bc 	.word	0x200000bc

08008564 <_malloc_r>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	1ccd      	adds	r5, r1, #3
 8008568:	f025 0503 	bic.w	r5, r5, #3
 800856c:	3508      	adds	r5, #8
 800856e:	2d0c      	cmp	r5, #12
 8008570:	bf38      	it	cc
 8008572:	250c      	movcc	r5, #12
 8008574:	2d00      	cmp	r5, #0
 8008576:	4606      	mov	r6, r0
 8008578:	db01      	blt.n	800857e <_malloc_r+0x1a>
 800857a:	42a9      	cmp	r1, r5
 800857c:	d903      	bls.n	8008586 <_malloc_r+0x22>
 800857e:	230c      	movs	r3, #12
 8008580:	6033      	str	r3, [r6, #0]
 8008582:	2000      	movs	r0, #0
 8008584:	bd70      	pop	{r4, r5, r6, pc}
 8008586:	f000 f877 	bl	8008678 <__malloc_lock>
 800858a:	4a21      	ldr	r2, [pc, #132]	; (8008610 <_malloc_r+0xac>)
 800858c:	6814      	ldr	r4, [r2, #0]
 800858e:	4621      	mov	r1, r4
 8008590:	b991      	cbnz	r1, 80085b8 <_malloc_r+0x54>
 8008592:	4c20      	ldr	r4, [pc, #128]	; (8008614 <_malloc_r+0xb0>)
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	b91b      	cbnz	r3, 80085a0 <_malloc_r+0x3c>
 8008598:	4630      	mov	r0, r6
 800859a:	f000 f83d 	bl	8008618 <_sbrk_r>
 800859e:	6020      	str	r0, [r4, #0]
 80085a0:	4629      	mov	r1, r5
 80085a2:	4630      	mov	r0, r6
 80085a4:	f000 f838 	bl	8008618 <_sbrk_r>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d124      	bne.n	80085f6 <_malloc_r+0x92>
 80085ac:	230c      	movs	r3, #12
 80085ae:	6033      	str	r3, [r6, #0]
 80085b0:	4630      	mov	r0, r6
 80085b2:	f000 f862 	bl	800867a <__malloc_unlock>
 80085b6:	e7e4      	b.n	8008582 <_malloc_r+0x1e>
 80085b8:	680b      	ldr	r3, [r1, #0]
 80085ba:	1b5b      	subs	r3, r3, r5
 80085bc:	d418      	bmi.n	80085f0 <_malloc_r+0x8c>
 80085be:	2b0b      	cmp	r3, #11
 80085c0:	d90f      	bls.n	80085e2 <_malloc_r+0x7e>
 80085c2:	600b      	str	r3, [r1, #0]
 80085c4:	50cd      	str	r5, [r1, r3]
 80085c6:	18cc      	adds	r4, r1, r3
 80085c8:	4630      	mov	r0, r6
 80085ca:	f000 f856 	bl	800867a <__malloc_unlock>
 80085ce:	f104 000b 	add.w	r0, r4, #11
 80085d2:	1d23      	adds	r3, r4, #4
 80085d4:	f020 0007 	bic.w	r0, r0, #7
 80085d8:	1ac3      	subs	r3, r0, r3
 80085da:	d0d3      	beq.n	8008584 <_malloc_r+0x20>
 80085dc:	425a      	negs	r2, r3
 80085de:	50e2      	str	r2, [r4, r3]
 80085e0:	e7d0      	b.n	8008584 <_malloc_r+0x20>
 80085e2:	428c      	cmp	r4, r1
 80085e4:	684b      	ldr	r3, [r1, #4]
 80085e6:	bf16      	itet	ne
 80085e8:	6063      	strne	r3, [r4, #4]
 80085ea:	6013      	streq	r3, [r2, #0]
 80085ec:	460c      	movne	r4, r1
 80085ee:	e7eb      	b.n	80085c8 <_malloc_r+0x64>
 80085f0:	460c      	mov	r4, r1
 80085f2:	6849      	ldr	r1, [r1, #4]
 80085f4:	e7cc      	b.n	8008590 <_malloc_r+0x2c>
 80085f6:	1cc4      	adds	r4, r0, #3
 80085f8:	f024 0403 	bic.w	r4, r4, #3
 80085fc:	42a0      	cmp	r0, r4
 80085fe:	d005      	beq.n	800860c <_malloc_r+0xa8>
 8008600:	1a21      	subs	r1, r4, r0
 8008602:	4630      	mov	r0, r6
 8008604:	f000 f808 	bl	8008618 <_sbrk_r>
 8008608:	3001      	adds	r0, #1
 800860a:	d0cf      	beq.n	80085ac <_malloc_r+0x48>
 800860c:	6025      	str	r5, [r4, #0]
 800860e:	e7db      	b.n	80085c8 <_malloc_r+0x64>
 8008610:	200000bc 	.word	0x200000bc
 8008614:	200000c0 	.word	0x200000c0

08008618 <_sbrk_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4c06      	ldr	r4, [pc, #24]	; (8008634 <_sbrk_r+0x1c>)
 800861c:	2300      	movs	r3, #0
 800861e:	4605      	mov	r5, r0
 8008620:	4608      	mov	r0, r1
 8008622:	6023      	str	r3, [r4, #0]
 8008624:	f7ff fb9a 	bl	8007d5c <_sbrk>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_sbrk_r+0x1a>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	b103      	cbz	r3, 8008632 <_sbrk_r+0x1a>
 8008630:	602b      	str	r3, [r5, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	200009dc 	.word	0x200009dc

08008638 <siprintf>:
 8008638:	b40e      	push	{r1, r2, r3}
 800863a:	b500      	push	{lr}
 800863c:	b09c      	sub	sp, #112	; 0x70
 800863e:	ab1d      	add	r3, sp, #116	; 0x74
 8008640:	9002      	str	r0, [sp, #8]
 8008642:	9006      	str	r0, [sp, #24]
 8008644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008648:	4809      	ldr	r0, [pc, #36]	; (8008670 <siprintf+0x38>)
 800864a:	9107      	str	r1, [sp, #28]
 800864c:	9104      	str	r1, [sp, #16]
 800864e:	4909      	ldr	r1, [pc, #36]	; (8008674 <siprintf+0x3c>)
 8008650:	f853 2b04 	ldr.w	r2, [r3], #4
 8008654:	9105      	str	r1, [sp, #20]
 8008656:	6800      	ldr	r0, [r0, #0]
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	a902      	add	r1, sp, #8
 800865c:	f000 f868 	bl	8008730 <_svfiprintf_r>
 8008660:	9b02      	ldr	r3, [sp, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	b01c      	add	sp, #112	; 0x70
 8008668:	f85d eb04 	ldr.w	lr, [sp], #4
 800866c:	b003      	add	sp, #12
 800866e:	4770      	bx	lr
 8008670:	20000030 	.word	0x20000030
 8008674:	ffff0208 	.word	0xffff0208

08008678 <__malloc_lock>:
 8008678:	4770      	bx	lr

0800867a <__malloc_unlock>:
 800867a:	4770      	bx	lr

0800867c <__ssputs_r>:
 800867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008680:	688e      	ldr	r6, [r1, #8]
 8008682:	429e      	cmp	r6, r3
 8008684:	4682      	mov	sl, r0
 8008686:	460c      	mov	r4, r1
 8008688:	4690      	mov	r8, r2
 800868a:	4699      	mov	r9, r3
 800868c:	d837      	bhi.n	80086fe <__ssputs_r+0x82>
 800868e:	898a      	ldrh	r2, [r1, #12]
 8008690:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008694:	d031      	beq.n	80086fa <__ssputs_r+0x7e>
 8008696:	6825      	ldr	r5, [r4, #0]
 8008698:	6909      	ldr	r1, [r1, #16]
 800869a:	1a6f      	subs	r7, r5, r1
 800869c:	6965      	ldr	r5, [r4, #20]
 800869e:	2302      	movs	r3, #2
 80086a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80086a8:	f109 0301 	add.w	r3, r9, #1
 80086ac:	443b      	add	r3, r7
 80086ae:	429d      	cmp	r5, r3
 80086b0:	bf38      	it	cc
 80086b2:	461d      	movcc	r5, r3
 80086b4:	0553      	lsls	r3, r2, #21
 80086b6:	d530      	bpl.n	800871a <__ssputs_r+0x9e>
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7ff ff53 	bl	8008564 <_malloc_r>
 80086be:	4606      	mov	r6, r0
 80086c0:	b950      	cbnz	r0, 80086d8 <__ssputs_r+0x5c>
 80086c2:	230c      	movs	r3, #12
 80086c4:	f8ca 3000 	str.w	r3, [sl]
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ce:	81a3      	strh	r3, [r4, #12]
 80086d0:	f04f 30ff 	mov.w	r0, #4294967295
 80086d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d8:	463a      	mov	r2, r7
 80086da:	6921      	ldr	r1, [r4, #16]
 80086dc:	f000 faa8 	bl	8008c30 <memcpy>
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ea:	81a3      	strh	r3, [r4, #12]
 80086ec:	6126      	str	r6, [r4, #16]
 80086ee:	6165      	str	r5, [r4, #20]
 80086f0:	443e      	add	r6, r7
 80086f2:	1bed      	subs	r5, r5, r7
 80086f4:	6026      	str	r6, [r4, #0]
 80086f6:	60a5      	str	r5, [r4, #8]
 80086f8:	464e      	mov	r6, r9
 80086fa:	454e      	cmp	r6, r9
 80086fc:	d900      	bls.n	8008700 <__ssputs_r+0x84>
 80086fe:	464e      	mov	r6, r9
 8008700:	4632      	mov	r2, r6
 8008702:	4641      	mov	r1, r8
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	f000 fa9e 	bl	8008c46 <memmove>
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	1b9b      	subs	r3, r3, r6
 800870e:	60a3      	str	r3, [r4, #8]
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	441e      	add	r6, r3
 8008714:	6026      	str	r6, [r4, #0]
 8008716:	2000      	movs	r0, #0
 8008718:	e7dc      	b.n	80086d4 <__ssputs_r+0x58>
 800871a:	462a      	mov	r2, r5
 800871c:	f000 faac 	bl	8008c78 <_realloc_r>
 8008720:	4606      	mov	r6, r0
 8008722:	2800      	cmp	r0, #0
 8008724:	d1e2      	bne.n	80086ec <__ssputs_r+0x70>
 8008726:	6921      	ldr	r1, [r4, #16]
 8008728:	4650      	mov	r0, sl
 800872a:	f7ff fecd 	bl	80084c8 <_free_r>
 800872e:	e7c8      	b.n	80086c2 <__ssputs_r+0x46>

08008730 <_svfiprintf_r>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	461d      	mov	r5, r3
 8008736:	898b      	ldrh	r3, [r1, #12]
 8008738:	061f      	lsls	r7, r3, #24
 800873a:	b09d      	sub	sp, #116	; 0x74
 800873c:	4680      	mov	r8, r0
 800873e:	460c      	mov	r4, r1
 8008740:	4616      	mov	r6, r2
 8008742:	d50f      	bpl.n	8008764 <_svfiprintf_r+0x34>
 8008744:	690b      	ldr	r3, [r1, #16]
 8008746:	b96b      	cbnz	r3, 8008764 <_svfiprintf_r+0x34>
 8008748:	2140      	movs	r1, #64	; 0x40
 800874a:	f7ff ff0b 	bl	8008564 <_malloc_r>
 800874e:	6020      	str	r0, [r4, #0]
 8008750:	6120      	str	r0, [r4, #16]
 8008752:	b928      	cbnz	r0, 8008760 <_svfiprintf_r+0x30>
 8008754:	230c      	movs	r3, #12
 8008756:	f8c8 3000 	str.w	r3, [r8]
 800875a:	f04f 30ff 	mov.w	r0, #4294967295
 800875e:	e0c8      	b.n	80088f2 <_svfiprintf_r+0x1c2>
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	6163      	str	r3, [r4, #20]
 8008764:	2300      	movs	r3, #0
 8008766:	9309      	str	r3, [sp, #36]	; 0x24
 8008768:	2320      	movs	r3, #32
 800876a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800876e:	2330      	movs	r3, #48	; 0x30
 8008770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008774:	9503      	str	r5, [sp, #12]
 8008776:	f04f 0b01 	mov.w	fp, #1
 800877a:	4637      	mov	r7, r6
 800877c:	463d      	mov	r5, r7
 800877e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008782:	b10b      	cbz	r3, 8008788 <_svfiprintf_r+0x58>
 8008784:	2b25      	cmp	r3, #37	; 0x25
 8008786:	d13e      	bne.n	8008806 <_svfiprintf_r+0xd6>
 8008788:	ebb7 0a06 	subs.w	sl, r7, r6
 800878c:	d00b      	beq.n	80087a6 <_svfiprintf_r+0x76>
 800878e:	4653      	mov	r3, sl
 8008790:	4632      	mov	r2, r6
 8008792:	4621      	mov	r1, r4
 8008794:	4640      	mov	r0, r8
 8008796:	f7ff ff71 	bl	800867c <__ssputs_r>
 800879a:	3001      	adds	r0, #1
 800879c:	f000 80a4 	beq.w	80088e8 <_svfiprintf_r+0x1b8>
 80087a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a2:	4453      	add	r3, sl
 80087a4:	9309      	str	r3, [sp, #36]	; 0x24
 80087a6:	783b      	ldrb	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 809d 	beq.w	80088e8 <_svfiprintf_r+0x1b8>
 80087ae:	2300      	movs	r3, #0
 80087b0:	f04f 32ff 	mov.w	r2, #4294967295
 80087b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	9307      	str	r3, [sp, #28]
 80087bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087c0:	931a      	str	r3, [sp, #104]	; 0x68
 80087c2:	462f      	mov	r7, r5
 80087c4:	2205      	movs	r2, #5
 80087c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80087ca:	4850      	ldr	r0, [pc, #320]	; (800890c <_svfiprintf_r+0x1dc>)
 80087cc:	f7f7 fd00 	bl	80001d0 <memchr>
 80087d0:	9b04      	ldr	r3, [sp, #16]
 80087d2:	b9d0      	cbnz	r0, 800880a <_svfiprintf_r+0xda>
 80087d4:	06d9      	lsls	r1, r3, #27
 80087d6:	bf44      	itt	mi
 80087d8:	2220      	movmi	r2, #32
 80087da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087de:	071a      	lsls	r2, r3, #28
 80087e0:	bf44      	itt	mi
 80087e2:	222b      	movmi	r2, #43	; 0x2b
 80087e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80087e8:	782a      	ldrb	r2, [r5, #0]
 80087ea:	2a2a      	cmp	r2, #42	; 0x2a
 80087ec:	d015      	beq.n	800881a <_svfiprintf_r+0xea>
 80087ee:	9a07      	ldr	r2, [sp, #28]
 80087f0:	462f      	mov	r7, r5
 80087f2:	2000      	movs	r0, #0
 80087f4:	250a      	movs	r5, #10
 80087f6:	4639      	mov	r1, r7
 80087f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fc:	3b30      	subs	r3, #48	; 0x30
 80087fe:	2b09      	cmp	r3, #9
 8008800:	d94d      	bls.n	800889e <_svfiprintf_r+0x16e>
 8008802:	b1b8      	cbz	r0, 8008834 <_svfiprintf_r+0x104>
 8008804:	e00f      	b.n	8008826 <_svfiprintf_r+0xf6>
 8008806:	462f      	mov	r7, r5
 8008808:	e7b8      	b.n	800877c <_svfiprintf_r+0x4c>
 800880a:	4a40      	ldr	r2, [pc, #256]	; (800890c <_svfiprintf_r+0x1dc>)
 800880c:	1a80      	subs	r0, r0, r2
 800880e:	fa0b f000 	lsl.w	r0, fp, r0
 8008812:	4318      	orrs	r0, r3
 8008814:	9004      	str	r0, [sp, #16]
 8008816:	463d      	mov	r5, r7
 8008818:	e7d3      	b.n	80087c2 <_svfiprintf_r+0x92>
 800881a:	9a03      	ldr	r2, [sp, #12]
 800881c:	1d11      	adds	r1, r2, #4
 800881e:	6812      	ldr	r2, [r2, #0]
 8008820:	9103      	str	r1, [sp, #12]
 8008822:	2a00      	cmp	r2, #0
 8008824:	db01      	blt.n	800882a <_svfiprintf_r+0xfa>
 8008826:	9207      	str	r2, [sp, #28]
 8008828:	e004      	b.n	8008834 <_svfiprintf_r+0x104>
 800882a:	4252      	negs	r2, r2
 800882c:	f043 0302 	orr.w	r3, r3, #2
 8008830:	9207      	str	r2, [sp, #28]
 8008832:	9304      	str	r3, [sp, #16]
 8008834:	783b      	ldrb	r3, [r7, #0]
 8008836:	2b2e      	cmp	r3, #46	; 0x2e
 8008838:	d10c      	bne.n	8008854 <_svfiprintf_r+0x124>
 800883a:	787b      	ldrb	r3, [r7, #1]
 800883c:	2b2a      	cmp	r3, #42	; 0x2a
 800883e:	d133      	bne.n	80088a8 <_svfiprintf_r+0x178>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	1d1a      	adds	r2, r3, #4
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	9203      	str	r2, [sp, #12]
 8008848:	2b00      	cmp	r3, #0
 800884a:	bfb8      	it	lt
 800884c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008850:	3702      	adds	r7, #2
 8008852:	9305      	str	r3, [sp, #20]
 8008854:	4d2e      	ldr	r5, [pc, #184]	; (8008910 <_svfiprintf_r+0x1e0>)
 8008856:	7839      	ldrb	r1, [r7, #0]
 8008858:	2203      	movs	r2, #3
 800885a:	4628      	mov	r0, r5
 800885c:	f7f7 fcb8 	bl	80001d0 <memchr>
 8008860:	b138      	cbz	r0, 8008872 <_svfiprintf_r+0x142>
 8008862:	2340      	movs	r3, #64	; 0x40
 8008864:	1b40      	subs	r0, r0, r5
 8008866:	fa03 f000 	lsl.w	r0, r3, r0
 800886a:	9b04      	ldr	r3, [sp, #16]
 800886c:	4303      	orrs	r3, r0
 800886e:	3701      	adds	r7, #1
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	7839      	ldrb	r1, [r7, #0]
 8008874:	4827      	ldr	r0, [pc, #156]	; (8008914 <_svfiprintf_r+0x1e4>)
 8008876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800887a:	2206      	movs	r2, #6
 800887c:	1c7e      	adds	r6, r7, #1
 800887e:	f7f7 fca7 	bl	80001d0 <memchr>
 8008882:	2800      	cmp	r0, #0
 8008884:	d038      	beq.n	80088f8 <_svfiprintf_r+0x1c8>
 8008886:	4b24      	ldr	r3, [pc, #144]	; (8008918 <_svfiprintf_r+0x1e8>)
 8008888:	bb13      	cbnz	r3, 80088d0 <_svfiprintf_r+0x1a0>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	3307      	adds	r3, #7
 800888e:	f023 0307 	bic.w	r3, r3, #7
 8008892:	3308      	adds	r3, #8
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008898:	444b      	add	r3, r9
 800889a:	9309      	str	r3, [sp, #36]	; 0x24
 800889c:	e76d      	b.n	800877a <_svfiprintf_r+0x4a>
 800889e:	fb05 3202 	mla	r2, r5, r2, r3
 80088a2:	2001      	movs	r0, #1
 80088a4:	460f      	mov	r7, r1
 80088a6:	e7a6      	b.n	80087f6 <_svfiprintf_r+0xc6>
 80088a8:	2300      	movs	r3, #0
 80088aa:	3701      	adds	r7, #1
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	4619      	mov	r1, r3
 80088b0:	250a      	movs	r5, #10
 80088b2:	4638      	mov	r0, r7
 80088b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088b8:	3a30      	subs	r2, #48	; 0x30
 80088ba:	2a09      	cmp	r2, #9
 80088bc:	d903      	bls.n	80088c6 <_svfiprintf_r+0x196>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0c8      	beq.n	8008854 <_svfiprintf_r+0x124>
 80088c2:	9105      	str	r1, [sp, #20]
 80088c4:	e7c6      	b.n	8008854 <_svfiprintf_r+0x124>
 80088c6:	fb05 2101 	mla	r1, r5, r1, r2
 80088ca:	2301      	movs	r3, #1
 80088cc:	4607      	mov	r7, r0
 80088ce:	e7f0      	b.n	80088b2 <_svfiprintf_r+0x182>
 80088d0:	ab03      	add	r3, sp, #12
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4622      	mov	r2, r4
 80088d6:	4b11      	ldr	r3, [pc, #68]	; (800891c <_svfiprintf_r+0x1ec>)
 80088d8:	a904      	add	r1, sp, #16
 80088da:	4640      	mov	r0, r8
 80088dc:	f3af 8000 	nop.w
 80088e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80088e4:	4681      	mov	r9, r0
 80088e6:	d1d6      	bne.n	8008896 <_svfiprintf_r+0x166>
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	065b      	lsls	r3, r3, #25
 80088ec:	f53f af35 	bmi.w	800875a <_svfiprintf_r+0x2a>
 80088f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088f2:	b01d      	add	sp, #116	; 0x74
 80088f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	ab03      	add	r3, sp, #12
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4622      	mov	r2, r4
 80088fe:	4b07      	ldr	r3, [pc, #28]	; (800891c <_svfiprintf_r+0x1ec>)
 8008900:	a904      	add	r1, sp, #16
 8008902:	4640      	mov	r0, r8
 8008904:	f000 f882 	bl	8008a0c <_printf_i>
 8008908:	e7ea      	b.n	80088e0 <_svfiprintf_r+0x1b0>
 800890a:	bf00      	nop
 800890c:	08008d10 	.word	0x08008d10
 8008910:	08008d16 	.word	0x08008d16
 8008914:	08008d1a 	.word	0x08008d1a
 8008918:	00000000 	.word	0x00000000
 800891c:	0800867d 	.word	0x0800867d

08008920 <_printf_common>:
 8008920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008924:	4691      	mov	r9, r2
 8008926:	461f      	mov	r7, r3
 8008928:	688a      	ldr	r2, [r1, #8]
 800892a:	690b      	ldr	r3, [r1, #16]
 800892c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008930:	4293      	cmp	r3, r2
 8008932:	bfb8      	it	lt
 8008934:	4613      	movlt	r3, r2
 8008936:	f8c9 3000 	str.w	r3, [r9]
 800893a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800893e:	4606      	mov	r6, r0
 8008940:	460c      	mov	r4, r1
 8008942:	b112      	cbz	r2, 800894a <_printf_common+0x2a>
 8008944:	3301      	adds	r3, #1
 8008946:	f8c9 3000 	str.w	r3, [r9]
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	0699      	lsls	r1, r3, #26
 800894e:	bf42      	ittt	mi
 8008950:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008954:	3302      	addmi	r3, #2
 8008956:	f8c9 3000 	strmi.w	r3, [r9]
 800895a:	6825      	ldr	r5, [r4, #0]
 800895c:	f015 0506 	ands.w	r5, r5, #6
 8008960:	d107      	bne.n	8008972 <_printf_common+0x52>
 8008962:	f104 0a19 	add.w	sl, r4, #25
 8008966:	68e3      	ldr	r3, [r4, #12]
 8008968:	f8d9 2000 	ldr.w	r2, [r9]
 800896c:	1a9b      	subs	r3, r3, r2
 800896e:	42ab      	cmp	r3, r5
 8008970:	dc28      	bgt.n	80089c4 <_printf_common+0xa4>
 8008972:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008976:	6822      	ldr	r2, [r4, #0]
 8008978:	3300      	adds	r3, #0
 800897a:	bf18      	it	ne
 800897c:	2301      	movne	r3, #1
 800897e:	0692      	lsls	r2, r2, #26
 8008980:	d42d      	bmi.n	80089de <_printf_common+0xbe>
 8008982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008986:	4639      	mov	r1, r7
 8008988:	4630      	mov	r0, r6
 800898a:	47c0      	blx	r8
 800898c:	3001      	adds	r0, #1
 800898e:	d020      	beq.n	80089d2 <_printf_common+0xb2>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	68e5      	ldr	r5, [r4, #12]
 8008994:	f8d9 2000 	ldr.w	r2, [r9]
 8008998:	f003 0306 	and.w	r3, r3, #6
 800899c:	2b04      	cmp	r3, #4
 800899e:	bf08      	it	eq
 80089a0:	1aad      	subeq	r5, r5, r2
 80089a2:	68a3      	ldr	r3, [r4, #8]
 80089a4:	6922      	ldr	r2, [r4, #16]
 80089a6:	bf0c      	ite	eq
 80089a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089ac:	2500      	movne	r5, #0
 80089ae:	4293      	cmp	r3, r2
 80089b0:	bfc4      	itt	gt
 80089b2:	1a9b      	subgt	r3, r3, r2
 80089b4:	18ed      	addgt	r5, r5, r3
 80089b6:	f04f 0900 	mov.w	r9, #0
 80089ba:	341a      	adds	r4, #26
 80089bc:	454d      	cmp	r5, r9
 80089be:	d11a      	bne.n	80089f6 <_printf_common+0xd6>
 80089c0:	2000      	movs	r0, #0
 80089c2:	e008      	b.n	80089d6 <_printf_common+0xb6>
 80089c4:	2301      	movs	r3, #1
 80089c6:	4652      	mov	r2, sl
 80089c8:	4639      	mov	r1, r7
 80089ca:	4630      	mov	r0, r6
 80089cc:	47c0      	blx	r8
 80089ce:	3001      	adds	r0, #1
 80089d0:	d103      	bne.n	80089da <_printf_common+0xba>
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089da:	3501      	adds	r5, #1
 80089dc:	e7c3      	b.n	8008966 <_printf_common+0x46>
 80089de:	18e1      	adds	r1, r4, r3
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	2030      	movs	r0, #48	; 0x30
 80089e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089e8:	4422      	add	r2, r4
 80089ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089f2:	3302      	adds	r3, #2
 80089f4:	e7c5      	b.n	8008982 <_printf_common+0x62>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4622      	mov	r2, r4
 80089fa:	4639      	mov	r1, r7
 80089fc:	4630      	mov	r0, r6
 80089fe:	47c0      	blx	r8
 8008a00:	3001      	adds	r0, #1
 8008a02:	d0e6      	beq.n	80089d2 <_printf_common+0xb2>
 8008a04:	f109 0901 	add.w	r9, r9, #1
 8008a08:	e7d8      	b.n	80089bc <_printf_common+0x9c>
	...

08008a0c <_printf_i>:
 8008a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008a14:	460c      	mov	r4, r1
 8008a16:	7e09      	ldrb	r1, [r1, #24]
 8008a18:	b085      	sub	sp, #20
 8008a1a:	296e      	cmp	r1, #110	; 0x6e
 8008a1c:	4617      	mov	r7, r2
 8008a1e:	4606      	mov	r6, r0
 8008a20:	4698      	mov	r8, r3
 8008a22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a24:	f000 80b3 	beq.w	8008b8e <_printf_i+0x182>
 8008a28:	d822      	bhi.n	8008a70 <_printf_i+0x64>
 8008a2a:	2963      	cmp	r1, #99	; 0x63
 8008a2c:	d036      	beq.n	8008a9c <_printf_i+0x90>
 8008a2e:	d80a      	bhi.n	8008a46 <_printf_i+0x3a>
 8008a30:	2900      	cmp	r1, #0
 8008a32:	f000 80b9 	beq.w	8008ba8 <_printf_i+0x19c>
 8008a36:	2958      	cmp	r1, #88	; 0x58
 8008a38:	f000 8083 	beq.w	8008b42 <_printf_i+0x136>
 8008a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008a44:	e032      	b.n	8008aac <_printf_i+0xa0>
 8008a46:	2964      	cmp	r1, #100	; 0x64
 8008a48:	d001      	beq.n	8008a4e <_printf_i+0x42>
 8008a4a:	2969      	cmp	r1, #105	; 0x69
 8008a4c:	d1f6      	bne.n	8008a3c <_printf_i+0x30>
 8008a4e:	6820      	ldr	r0, [r4, #0]
 8008a50:	6813      	ldr	r3, [r2, #0]
 8008a52:	0605      	lsls	r5, r0, #24
 8008a54:	f103 0104 	add.w	r1, r3, #4
 8008a58:	d52a      	bpl.n	8008ab0 <_printf_i+0xa4>
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6011      	str	r1, [r2, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	da03      	bge.n	8008a6a <_printf_i+0x5e>
 8008a62:	222d      	movs	r2, #45	; 0x2d
 8008a64:	425b      	negs	r3, r3
 8008a66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008a6a:	486f      	ldr	r0, [pc, #444]	; (8008c28 <_printf_i+0x21c>)
 8008a6c:	220a      	movs	r2, #10
 8008a6e:	e039      	b.n	8008ae4 <_printf_i+0xd8>
 8008a70:	2973      	cmp	r1, #115	; 0x73
 8008a72:	f000 809d 	beq.w	8008bb0 <_printf_i+0x1a4>
 8008a76:	d808      	bhi.n	8008a8a <_printf_i+0x7e>
 8008a78:	296f      	cmp	r1, #111	; 0x6f
 8008a7a:	d020      	beq.n	8008abe <_printf_i+0xb2>
 8008a7c:	2970      	cmp	r1, #112	; 0x70
 8008a7e:	d1dd      	bne.n	8008a3c <_printf_i+0x30>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	f043 0320 	orr.w	r3, r3, #32
 8008a86:	6023      	str	r3, [r4, #0]
 8008a88:	e003      	b.n	8008a92 <_printf_i+0x86>
 8008a8a:	2975      	cmp	r1, #117	; 0x75
 8008a8c:	d017      	beq.n	8008abe <_printf_i+0xb2>
 8008a8e:	2978      	cmp	r1, #120	; 0x78
 8008a90:	d1d4      	bne.n	8008a3c <_printf_i+0x30>
 8008a92:	2378      	movs	r3, #120	; 0x78
 8008a94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a98:	4864      	ldr	r0, [pc, #400]	; (8008c2c <_printf_i+0x220>)
 8008a9a:	e055      	b.n	8008b48 <_printf_i+0x13c>
 8008a9c:	6813      	ldr	r3, [r2, #0]
 8008a9e:	1d19      	adds	r1, r3, #4
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6011      	str	r1, [r2, #0]
 8008aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008aac:	2301      	movs	r3, #1
 8008aae:	e08c      	b.n	8008bca <_printf_i+0x1be>
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6011      	str	r1, [r2, #0]
 8008ab4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ab8:	bf18      	it	ne
 8008aba:	b21b      	sxthne	r3, r3
 8008abc:	e7cf      	b.n	8008a5e <_printf_i+0x52>
 8008abe:	6813      	ldr	r3, [r2, #0]
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	1d18      	adds	r0, r3, #4
 8008ac4:	6010      	str	r0, [r2, #0]
 8008ac6:	0628      	lsls	r0, r5, #24
 8008ac8:	d501      	bpl.n	8008ace <_printf_i+0xc2>
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	e002      	b.n	8008ad4 <_printf_i+0xc8>
 8008ace:	0668      	lsls	r0, r5, #25
 8008ad0:	d5fb      	bpl.n	8008aca <_printf_i+0xbe>
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	4854      	ldr	r0, [pc, #336]	; (8008c28 <_printf_i+0x21c>)
 8008ad6:	296f      	cmp	r1, #111	; 0x6f
 8008ad8:	bf14      	ite	ne
 8008ada:	220a      	movne	r2, #10
 8008adc:	2208      	moveq	r2, #8
 8008ade:	2100      	movs	r1, #0
 8008ae0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ae4:	6865      	ldr	r5, [r4, #4]
 8008ae6:	60a5      	str	r5, [r4, #8]
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	f2c0 8095 	blt.w	8008c18 <_printf_i+0x20c>
 8008aee:	6821      	ldr	r1, [r4, #0]
 8008af0:	f021 0104 	bic.w	r1, r1, #4
 8008af4:	6021      	str	r1, [r4, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d13d      	bne.n	8008b76 <_printf_i+0x16a>
 8008afa:	2d00      	cmp	r5, #0
 8008afc:	f040 808e 	bne.w	8008c1c <_printf_i+0x210>
 8008b00:	4665      	mov	r5, ip
 8008b02:	2a08      	cmp	r2, #8
 8008b04:	d10b      	bne.n	8008b1e <_printf_i+0x112>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	07db      	lsls	r3, r3, #31
 8008b0a:	d508      	bpl.n	8008b1e <_printf_i+0x112>
 8008b0c:	6923      	ldr	r3, [r4, #16]
 8008b0e:	6862      	ldr	r2, [r4, #4]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	bfde      	ittt	le
 8008b14:	2330      	movle	r3, #48	; 0x30
 8008b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b1e:	ebac 0305 	sub.w	r3, ip, r5
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	f8cd 8000 	str.w	r8, [sp]
 8008b28:	463b      	mov	r3, r7
 8008b2a:	aa03      	add	r2, sp, #12
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4630      	mov	r0, r6
 8008b30:	f7ff fef6 	bl	8008920 <_printf_common>
 8008b34:	3001      	adds	r0, #1
 8008b36:	d14d      	bne.n	8008bd4 <_printf_i+0x1c8>
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	b005      	add	sp, #20
 8008b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b42:	4839      	ldr	r0, [pc, #228]	; (8008c28 <_printf_i+0x21c>)
 8008b44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008b48:	6813      	ldr	r3, [r2, #0]
 8008b4a:	6821      	ldr	r1, [r4, #0]
 8008b4c:	1d1d      	adds	r5, r3, #4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6015      	str	r5, [r2, #0]
 8008b52:	060a      	lsls	r2, r1, #24
 8008b54:	d50b      	bpl.n	8008b6e <_printf_i+0x162>
 8008b56:	07ca      	lsls	r2, r1, #31
 8008b58:	bf44      	itt	mi
 8008b5a:	f041 0120 	orrmi.w	r1, r1, #32
 8008b5e:	6021      	strmi	r1, [r4, #0]
 8008b60:	b91b      	cbnz	r3, 8008b6a <_printf_i+0x15e>
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	f022 0220 	bic.w	r2, r2, #32
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	2210      	movs	r2, #16
 8008b6c:	e7b7      	b.n	8008ade <_printf_i+0xd2>
 8008b6e:	064d      	lsls	r5, r1, #25
 8008b70:	bf48      	it	mi
 8008b72:	b29b      	uxthmi	r3, r3
 8008b74:	e7ef      	b.n	8008b56 <_printf_i+0x14a>
 8008b76:	4665      	mov	r5, ip
 8008b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b7c:	fb02 3311 	mls	r3, r2, r1, r3
 8008b80:	5cc3      	ldrb	r3, [r0, r3]
 8008b82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b86:	460b      	mov	r3, r1
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	d1f5      	bne.n	8008b78 <_printf_i+0x16c>
 8008b8c:	e7b9      	b.n	8008b02 <_printf_i+0xf6>
 8008b8e:	6813      	ldr	r3, [r2, #0]
 8008b90:	6825      	ldr	r5, [r4, #0]
 8008b92:	6961      	ldr	r1, [r4, #20]
 8008b94:	1d18      	adds	r0, r3, #4
 8008b96:	6010      	str	r0, [r2, #0]
 8008b98:	0628      	lsls	r0, r5, #24
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	d501      	bpl.n	8008ba2 <_printf_i+0x196>
 8008b9e:	6019      	str	r1, [r3, #0]
 8008ba0:	e002      	b.n	8008ba8 <_printf_i+0x19c>
 8008ba2:	066a      	lsls	r2, r5, #25
 8008ba4:	d5fb      	bpl.n	8008b9e <_printf_i+0x192>
 8008ba6:	8019      	strh	r1, [r3, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	4665      	mov	r5, ip
 8008bae:	e7b9      	b.n	8008b24 <_printf_i+0x118>
 8008bb0:	6813      	ldr	r3, [r2, #0]
 8008bb2:	1d19      	adds	r1, r3, #4
 8008bb4:	6011      	str	r1, [r2, #0]
 8008bb6:	681d      	ldr	r5, [r3, #0]
 8008bb8:	6862      	ldr	r2, [r4, #4]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f7f7 fb07 	bl	80001d0 <memchr>
 8008bc2:	b108      	cbz	r0, 8008bc8 <_printf_i+0x1bc>
 8008bc4:	1b40      	subs	r0, r0, r5
 8008bc6:	6060      	str	r0, [r4, #4]
 8008bc8:	6863      	ldr	r3, [r4, #4]
 8008bca:	6123      	str	r3, [r4, #16]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bd2:	e7a7      	b.n	8008b24 <_printf_i+0x118>
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4639      	mov	r1, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	47c0      	blx	r8
 8008bde:	3001      	adds	r0, #1
 8008be0:	d0aa      	beq.n	8008b38 <_printf_i+0x12c>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	079b      	lsls	r3, r3, #30
 8008be6:	d413      	bmi.n	8008c10 <_printf_i+0x204>
 8008be8:	68e0      	ldr	r0, [r4, #12]
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	4298      	cmp	r0, r3
 8008bee:	bfb8      	it	lt
 8008bf0:	4618      	movlt	r0, r3
 8008bf2:	e7a3      	b.n	8008b3c <_printf_i+0x130>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	464a      	mov	r2, r9
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	47c0      	blx	r8
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d09a      	beq.n	8008b38 <_printf_i+0x12c>
 8008c02:	3501      	adds	r5, #1
 8008c04:	68e3      	ldr	r3, [r4, #12]
 8008c06:	9a03      	ldr	r2, [sp, #12]
 8008c08:	1a9b      	subs	r3, r3, r2
 8008c0a:	42ab      	cmp	r3, r5
 8008c0c:	dcf2      	bgt.n	8008bf4 <_printf_i+0x1e8>
 8008c0e:	e7eb      	b.n	8008be8 <_printf_i+0x1dc>
 8008c10:	2500      	movs	r5, #0
 8008c12:	f104 0919 	add.w	r9, r4, #25
 8008c16:	e7f5      	b.n	8008c04 <_printf_i+0x1f8>
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1ac      	bne.n	8008b76 <_printf_i+0x16a>
 8008c1c:	7803      	ldrb	r3, [r0, #0]
 8008c1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c26:	e76c      	b.n	8008b02 <_printf_i+0xf6>
 8008c28:	08008d21 	.word	0x08008d21
 8008c2c:	08008d32 	.word	0x08008d32

08008c30 <memcpy>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	1e43      	subs	r3, r0, #1
 8008c34:	440a      	add	r2, r1
 8008c36:	4291      	cmp	r1, r2
 8008c38:	d100      	bne.n	8008c3c <memcpy+0xc>
 8008c3a:	bd10      	pop	{r4, pc}
 8008c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c44:	e7f7      	b.n	8008c36 <memcpy+0x6>

08008c46 <memmove>:
 8008c46:	4288      	cmp	r0, r1
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	eb01 0302 	add.w	r3, r1, r2
 8008c4e:	d807      	bhi.n	8008c60 <memmove+0x1a>
 8008c50:	1e42      	subs	r2, r0, #1
 8008c52:	4299      	cmp	r1, r3
 8008c54:	d00a      	beq.n	8008c6c <memmove+0x26>
 8008c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008c5e:	e7f8      	b.n	8008c52 <memmove+0xc>
 8008c60:	4283      	cmp	r3, r0
 8008c62:	d9f5      	bls.n	8008c50 <memmove+0xa>
 8008c64:	1881      	adds	r1, r0, r2
 8008c66:	1ad2      	subs	r2, r2, r3
 8008c68:	42d3      	cmn	r3, r2
 8008c6a:	d100      	bne.n	8008c6e <memmove+0x28>
 8008c6c:	bd10      	pop	{r4, pc}
 8008c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c76:	e7f7      	b.n	8008c68 <memmove+0x22>

08008c78 <_realloc_r>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	4607      	mov	r7, r0
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	460e      	mov	r6, r1
 8008c80:	b921      	cbnz	r1, 8008c8c <_realloc_r+0x14>
 8008c82:	4611      	mov	r1, r2
 8008c84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c88:	f7ff bc6c 	b.w	8008564 <_malloc_r>
 8008c8c:	b922      	cbnz	r2, 8008c98 <_realloc_r+0x20>
 8008c8e:	f7ff fc1b 	bl	80084c8 <_free_r>
 8008c92:	4625      	mov	r5, r4
 8008c94:	4628      	mov	r0, r5
 8008c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c98:	f000 f814 	bl	8008cc4 <_malloc_usable_size_r>
 8008c9c:	42a0      	cmp	r0, r4
 8008c9e:	d20f      	bcs.n	8008cc0 <_realloc_r+0x48>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f7ff fc5e 	bl	8008564 <_malloc_r>
 8008ca8:	4605      	mov	r5, r0
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d0f2      	beq.n	8008c94 <_realloc_r+0x1c>
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	f7ff ffbd 	bl	8008c30 <memcpy>
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff fc05 	bl	80084c8 <_free_r>
 8008cbe:	e7e9      	b.n	8008c94 <_realloc_r+0x1c>
 8008cc0:	4635      	mov	r5, r6
 8008cc2:	e7e7      	b.n	8008c94 <_realloc_r+0x1c>

08008cc4 <_malloc_usable_size_r>:
 8008cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc8:	1f18      	subs	r0, r3, #4
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	bfbc      	itt	lt
 8008cce:	580b      	ldrlt	r3, [r1, r0]
 8008cd0:	18c0      	addlt	r0, r0, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_init>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr

08008ce0 <_fini>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	bf00      	nop
 8008ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce6:	bc08      	pop	{r3}
 8008ce8:	469e      	mov	lr, r3
 8008cea:	4770      	bx	lr
